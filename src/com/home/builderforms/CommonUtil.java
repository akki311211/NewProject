package com.home.builderforms;
import com.home.builderforms.DataCollector;


/**
 * Version No.				   Date		         By	    		           Function Changed			
 * P_B_CM_040413          	10 Apr 2013       	Prabhat Jain               Table header get disapeared on click sort field
 P_FIM_B_20074             30 apr 2013     Priyanka jain                    pagging was not proper
 P_E_CurrencyFormat         2 apr 2013     Priyanka jain                 to change currency format while displaying
 P_E_C_TRACKING  		23 May 2013   Brajesh Yadav    updateDocumentDownload()  New Method created to update Data on Download Artwork or Email Artwork
 P_CM_B_23006              05JULY2013       PRASHANT MALIK         Bug                 MUID
 P_ENH_SMS_CAMPAIGN             9 JUly 2013       Himanshi Gupta         SMS Campaign Enhancement 
 P_ADMIN_B_23654			10 July 2013		Anubhav Jain			BUG			ALL locations should show for muid user			 
 P_ADMIN_B_24277			16 July 2013		Prabhat Jain			BUG			creation date for print campaign is not being displayed.
 P_B_CM_24335		17 July 2013		Deepak Gangore		              MUID change
 P_ADMIN_B_24339			18 July 2013		Prabhat Jain			BUG			Email id is not a link for email column
 P_B_CM_25289				26 jULY 2013		Prabhat Jain			BUG			Phone No. and Mobile is not formatted correctly.
 P_B_CT_25415             27th July,2013      Prakriti Sharma         BUG         MUID, adding muid users to the "franchise users" combo in report.
 P_B_CT_23852             29th July,2013      Prakriti Sharma         BUG         MUID,dashboard wasn't relecting the data.
 P_B_25485				26July2013			Naman Jain				data is not coming in date
 P_B_CT_26266             6th Aug,2013        Prakriti Sharma         BUG         Js error when clicked on CT > Dashboard(widgets).
 P_ADMIN_B_26356			13 Aug 2013			Anubhav Jain			Bug			Franchise user info not dispalying
 P_B_COMMON_8137         19 Aug, 2013      Banti Prajapati 			Bug	  Case :{User Role Privileges has been passed in a Map<String,Boolean> to add privileges in action menu.}
 P_B_26757               22 aug 2013       Banti Prajapati 			Bug	       JS error { Special characters escaped}
 P_Enh_Contact_type_23   26 Aug 2013       Divya Mishra               Enh			where clause is added to display the contact type in seb menus
 P_B_CT_28804            23 Sep 2013       Teena Sharma               Bug         Template is not coming in the "Existing Email Templates " drop down menu
 P_B_SCH_29744		   08 Nov 2013       Banti Prajapati			Bug			Case [Improper details of task product and services were showing in the mail to owner ]    
 P_E_MUID_CONFIG			27/11/2013		Anubhav jain		Enh
 SCH_OPT					10/01/2014			Enh			Chinmay Pareek			regarding to optimization in schedular.
 P_MP_B_29582             06/02/2014        Deepanshi Miglani         Bug         to remove deactivated franchisees from applied franchisee list in marketing pilot
 P_B_CM_34490			5th March 2014     Rachit Parnami			Bug			All users are not coming of a particular region id.
 P_B_AB_33887 			 7/03/2014 			 Shubham Ruhela			Rng			Address Not Populated : SpecialCharProblem
 CKCA-20140211-016	 	07March2014			Gaurang Agarwal			Bug			Timezone issue in reminders

 BB-20140303-019        13Mar2014				Varun Negi						Implemented a new GUI

 Sperry-20140204-132		18March2013			Naman Jain				Enh         When user search by First Name (Jerry) 7 results come up. When they search by First and Last name (Jerry Anderson ) 9 results come up.
 SMC-20140224-392	11 March 2014		Deepak Gangore			added condition in getSource3Map() for PPC lead settings.

 SMC-20140313-420	26 March 2014		Deepak gangore			Top Bar enhc
 ZCUB-21040402-034		  03/04/2014	Mohit Mishra			Added Export button 
 P_B_SCH_36280			4 apr 2014			Manik Malhotra						No result was shown due to wrong query.
 P_B_CM_36203          07 Apr  2014        Akash Jain                           Contact Manager > Reports > Contact Source Analysis > Email Report. 
 P_B_CM_36666		8th April,2014		Nancy Goyal												on exporting as excel,Only the previous page's records are exported.(fixed)
 P_B_SCH_34534       16th April,2014      Teena Sharma                 issue all rate cards are being displayed even if the regions are different.
 P_B_SCH_35929       16th April,2014      Teena Sharma                  dd/mm/yyyy format is coming for added task emails, it should be mm/dd/yy format
 SMC-20140415-462	17 April 2014		Deepak Gangore			Marketing Pilot optimization
 P_CM_Reports_B_38357  16 may 2014       Ikramuddin             the date format should be as per  the UK format 
 SMC_PW_OPT           27May14            Pushkal Sharma          getFranchiseeComboForRegion1(),  getFranchiseComboOptions(),  getFranchiseeResultSet() mehods added          
 P_B_AB_38177		10-jun-2014			Nivrutti Joshi			Download / Email the Artworks, recently downloaded / Emails artworks not coming at top
 P_CM_B_41804        23 JULY 2014        SWATI GARG              Correction of search through title drop down
 P_CM_B_42078        23 JULY 2014        SWATI GARG              Correction of Add category detail combo
 P_B_CM_42652     25 July 2014           Rashmi Shakya           GUI issue of combo.
 P_B_CM_43425       12th Aug 2014        Amit Tanwani            ? was coming for quote while company ajax search!
 P_B_RESTRUCT		05th Sep, 2014		Sanshey Sachdeva		Restruct		Changes regarding Service Restructuring
 P_FS_B_47896		17 Sep,2014			Nishant Verma			to show all records on click of Show All
 P_B_GUI_805			12th Sep, 2014		Sanshey Sachdeva		GUI Changes		Combo class is changed according to new gui.
 P_B_MP_47876 		17 Sep 2014			Nishant Prabhakar		Franchisee Locations were not ordered alphabetically
 P_B_CT_41454        14aug2014           Chetan Rawat            solved report issue(CT). Null Pointer Exception handled.
 P_B_CT_41480        19Aug2014  			Chetan Rawat            Resolved save view issue in Customer Transactions > Reports > Revenue Comparison / Sales by Period
 P_B_GUI_805			18 Sep, 2014		Sanshey Sachdeva		GUI Changes		getFranchiseUserCombo()		Combo was not showing selected options
 P_B_SCH_48956       14 Oct 2014         Somya Garg              Bug                 						Task Subject's special characters get converted when viewed in the mail.
 P_E_CT_GUI          20oct2014           Chetan Rawat	        Enh          Gui changes(Changes Job status color according to new color picker.)
 BB-20141017-177               5 nov 2014          Nazampreet Kaur       code added for customized summary display
 P_B_SCH_49733		12 Nov 2014			Ronak Maru				Bug  		job is not visible to franchise user
 P_B_JOB_50201       18 Nov 2014         Teena Sharma            Bug         Spacing is not proper. 
 P_B_JOBS_50277		20 Nov 2014			Somya Garg				Bug			Under Owner user as well Default User mails, GUI issues have been corrected
 P_B_JOBS_50144		20 Nov 2014			Ronak Maru				Bug			Products/Service section had an older GUI and all the products were not displayed.
 P_B_JOBS_50157		24 Nov 2014			Somya Garg				Bug			Wrong Labels in cancelled task's mail.
 P_B_JOBS_50276		24 Nov 2014			Somya Garg				Bug			Changed address format.
 ZCB-20150120-071        25 feb 2015    Divanshu Verma       To enable social Media module to work in MUID case
 ZCUB-20150515-147   5 June 2015       Divanshu Verma        Zip Code Validation
ZCUB-20151208-210       19 Dec 2015     Divanshu Verma      Payment Approval Process
ZCUB-20160310-239    18 March  2016    Divanshu Verma    Email Notification in case of RM Reports
 BB-20160203-516	 1 Apr 2016			Ronak Maru				BI Dashboard 
 ABS_NM082016        17 aug 2016        Utsav Chauhan                Note message textarea and textbox.
 */






import java.awt.Color;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLDecoder;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Pattern;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.Vector;
import java.io.InputStream;
import java.util.Properties;
import java.net.HttpURLConnection;
import java.io.DataOutputStream;
import java.io.IOException;

import com.home.builderforms.DivisionUtil;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import jxl.write.Number;
import jxl.write.WritableCellFormat;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.util.URIUtil;
import org.apache.log4j.Logger;
import org.json.JSONArray;

import com.appnetix.app.components.accesscontrolmgr.manager.AccessControlMgr;

import org.json.JSONObject;

import com.home.builderforms.Constants;
import com.appnetix.app.components.adminmgr.manager.AdminMgr;
import com.appnetix.app.components.calendarmgr.manager.CalendarMgr;
import com.appnetix.app.components.commonmgr.manager.CommonMgr;
import com.appnetix.app.components.commonmgr.manager.dao.CommonCmDAO;
import com.appnetix.app.components.locationmgr.manager.LocationMgr;
import com.appnetix.app.components.masterdatamgr.manager.MasterDataMgr;
import com.appnetix.app.components.regionmgr.manager.RegionMgr;
import com.appnetix.app.components.rolemgr.manager.RoleMgr;
import com.appnetix.app.components.taskmgr.manager.TaskMgr;
import com.appnetix.app.components.taskmgr.manager.dao.TaskDAO;
import com.appnetix.app.components.zipcodemgr.manager.ZipcodeMgr;
import com.appnetix.app.control.web.ParamResolver;
import com.appnetix.app.control.web.handler.ProductBroker;
import com.appnetix.app.control.web.multitenancy.resources.constants.BaseConstants;
import com.appnetix.app.control.web.multitenancy.util.MultiTenancyUtil;
import com.appnetix.app.control.web.webimpl.BuilderFormWebImpl;
import com.appnetix.app.portal.SearchConfiguration;
import com.appnetix.app.portal.UserInfo;
import com.appnetix.app.portal.builderforms.DataManipulator;
import com.appnetix.app.portal.calendar.UserTimezoneMap;
import com.appnetix.app.portal.export.ExportDataCollector;
import com.appnetix.app.portal.intelligence.LogiPrivilegeConstants;
import com.appnetix.app.portal.role.Privileges;
import com.appnetix.app.portal.role.PrivilegesMgr;
import com.appnetix.app.portal.role.UserRole;
import com.appnetix.app.portal.role.UserRoleMap;
import com.appnetix.app.portal.role.UserRoleMgr;
import com.appnetix.app.portal.tasks.TaskModule;
import com.appnetix.app.portal.upsshipping.UPSServiceCodeXMLParser;
import com.home.builderforms.ModuleUtil.MODULE_NAME;
import com.home.builderforms.base.BaseNewPortalUtils;
import com.home.builderforms.cache.CacheMgr;
import com.home.builderforms.database.Field;
import com.home.builderforms.database.FieldMappings;
import com.home.builderforms.information.Info;
import com.home.builderforms.mail.MailSender;
import com.home.builderforms.sqlqueries.ResultSet;
import com.home.builderforms.sqlqueries.SQLQuery;
import com.home.builderforms.sqlqueries.SQLUtil;
import com.home.builderforms.tagutils.Combo;
import com.google.gdata.util.common.html.HtmlToText;
import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.paymentech.orbital.sdk.request.Fields;
import com.home.builderforms.base.MenuUtils;//BB-20160203-516
import com.appnetix.app.portal.admin.WebCacheBypass;//BB-20160203-516

import org.apache.commons.lang.StringEscapeUtils;

public class CommonUtil {
    static	Logger logger = com.appnetix.app.control.web.multitenancy.util.MultiTenancyUtil.getTenantLogger(CommonUtil.class);
    private static final String monthNames[] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};


    //ClockWork-20141201-680 starts
    static Map<String,String> hMap=new HashMap<String,String>();
    static{
        hMap.put("FS_LEAD_DETAILS", "LEAD_ID");
        hMap.put("APPNETIX_CALENDAR","EVENT_ID");
        hMap.put("FS_LEAD_STATUS_CHANGE_INFO","SNO");
        hMap.put("FS_CAMPAIGN_EMAIL_LOG","CAMPAIGN_EMAIL_LOG_ID");
        hMap.put("FS_LEAD_STATUS","LEAD_STATUS_ID");
        hMap.put("FS_LEAD_COMPLIANCE","LEAD_COMPLIANCE_ID");
        hMap.put("FS_LEAD_REAL_ESTATE","REAL_ESTATE_ID");
        hMap.put("FS_LEAD_PERSONAL_PROFILE","PERSONAL_PROFILE_ID");
        hMap.put("FS_LEAD_SCHEDULE","SCHEDULE_ID");
        hMap.put("FS_LEAD_QUALIFICATION_DETAIL","LEAD_QUALIFICATION_DETAIL_ID");
        hMap.put("FS_BUSINESS_OVERVIEW","BUSINESS_OVERVIEW_ID");
        hMap.put("FS_LEAD_FRANCHISE_AGREEMENT","FRANCHISE_AGREEMENT_ID");
        hMap.put("FS_DOCUMENTS","DOCUMENT_ID");
        hMap.put("FS_LEAD_CALL","CALL_ID");
        hMap.put("FS_LEAD_RATING","LEAD_RATING_ID");
        hMap.put("FS_LEAD_REMARKS","LEAD_REMARK_ID");
        hMap.put("TASKS","TASK_ID");
    }
    //ClockWork-20141201-680 ends

    /**
     * P_Enh_AddressBook
     * @param userLevel
     * @param areaId
     * @param searchMap
     * @return
     */
    public static ResultSet getAddressBookUsers(String userLevel,String areaId,Map searchMap)
    {
      return   getAddressBookUsers( userLevel, areaId, searchMap,null);
    }
    public static ResultSet getAddressBookUsers(String userLevel,String areaId,Map searchMap,String divisionIds)
    {
        StringBuilder query=new StringBuilder();
        String[] searchString=new String[searchMap.size()];
        int i=0;
        Iterator mapItr=searchMap.entrySet().iterator();
        query.append("SELECT U.USER_NO FROM ( SELECT C.USER_NO,C.FRANCHISEE_NO,C.USER_LEVEL,C.STATUS,C.USER_FIRST_NAME,C.USER_LAST_NAME FROM USERS C WHERE C.USER_LEVEL IN(0,2,6) ");
        query.append(" UNION ALL SELECT C.USER_NO,C.FRANCHISEE_NO,C.USER_LEVEL,C.STATUS,C.USER_FIRST_NAME,C.USER_LAST_NAME FROM FRANCHISEE_USERS FU, FRANCHISEE F,USERS C,FIM_OWNERS FO,OWNERS OW,FIM_USERS FM WHERE FM.FRANCHISEE_NO = F.FRANCHISEE_NO AND C.USER_IDENTITY_NO = FU.FRANCHISEE_USER_NO AND OW.OWNER_ID=FO.FRANCHISE_OWNER_ID AND OW.FRANCHISEE_NO= FU.FRANCHISEE_NO AND FM.FRANCHISEE_USER_NO=FU.FRANCHISEE_USER_NO AND C.IS_DELETED='N' AND   F.STATUS!='0' AND FU.STATUS='1' AND C.STATUS!='0'   GROUP BY FU.FRANCHISEE_USER_NO ");
        query.append(") AS U ");
       
        //query.append("SELECT U.USER_NO FROM USERS U");
        if("2".equals(userLevel))
        {
            query.append(" JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO ");
        }
        
        query.append(" WHERE 1=1 ");
        while(mapItr.hasNext()){
            Entry e=(Entry)mapItr.next();
            if(StringUtil.isValidNew(((String)e.getValue())) && StringUtil.isValidNew((String)e.getKey()))
            {
            	searchString[i]="%"+(String)e.getValue()+"%";
            	i++;
                //query.append(" AND CASE WHEN U.USER_LEVEL=").append(e.getKey()).append(" THEN CONCAT(U.USER_FIRST_NAME,' ',U.USER_LAST_NAME ) LIKE '%").append(e.getValue()).append("%' ELSE 1=1 END ");
            	query.append(" AND CASE WHEN U.USER_LEVEL=").append(e.getKey()).append(" THEN CONCAT(U.USER_FIRST_NAME,' ',U.USER_LAST_NAME ) LIKE ? ELSE 1=1 END ");
            }
        }
        query.append(" AND U.STATUS <> 0 AND U.USER_NO NOT IN(2,1000,111111111) ");
        if("2".equals(userLevel) && StringUtil.isValidNew(areaId))
        {
            query.append(" AND F.AREA_ID IN(").append(areaId).append(",0)");
        }
       
      
        query.append(" ORDER BY U.USER_FIRST_NAME  ASC, U.USER_LAST_NAME ASC ");
        ResultSet result=null;
        try {
        result = QueryUtil.getResult(query.toString(),searchString);
        
        }
        catch(Exception e)
        {
        	 logger.info("ERROR: exception in getAddressBookUsers() ::" + e);
        }
        return result;
    }

    /**
     * P_Enh_AddressBook
     * @param userNo
     * @param searchString
     * @param searchFromWhere
     * @return
     */
    public static ResultSet getAddressBookGroups(String userNo,String searchString,String searchFromWhere)
    {
        StringBuilder query=new StringBuilder();
        List<String> paramList = new ArrayList<String>();
        paramList.add(userNo);
        query.append("SELECT GROUP_CONCAT(MGD.CONTACT_USER_NO) AS GROUP_USER_NOS, MG.GROUP_NAME, MG.GROUP_NO,COUNT(MGD.CONTACT_USER_NO) AS USER_COUNT FROM MESSAGE_GROUP_DETAIL MGD LEFT JOIN MESSAGE_GROUPS MG ON MGD.GROUP_NO = MG.GROUP_NO LEFT JOIN USERS U ON U.USER_NO=MGD.CONTACT_USER_NO ");
        query.append(" WHERE MG.USER_NO=? ");
        query.append(" AND U.STATUS<>0 ");
        if(StringUtil.isValidNew(searchString) && "groupSearch".equals(searchFromWhere))
        {
        	searchString="%"+searchString+"%";
        	paramList.add(searchString);
            query.append(" AND MG.GROUP_NAME LIKE ? ");
        }
        query.append(" GROUP BY MG.GROUP_NO ");
        ResultSet result = QueryUtil.getResult(query.toString(),paramList.toArray());
        return result;
    }

    /**
     * P_Enh_AddressBook starts
     * @param searchMap
     * @return
     */
    public static ResultSet getAddressBookRoles(Map searchMap)
    {
        StringBuilder query=new StringBuilder();
        String[] searchString=new String[searchMap.size()];
        int i=0;
        Iterator mapItr=searchMap.entrySet().iterator();
        query.append("SELECT NAME,IS_ADMIN,R.ROLE_ID,COUNT(UR.USER_NO) USER_COUNT,GROUP_CONCAT(UR.USER_NO) AS ROLE_USER_NOS FROM ROLE R JOIN USER_ROLES UR ON R.ROLE_ID=UR.ROLE_ID JOIN USERS U ON U.USER_NO =UR.USER_NO");
        query.append(" WHERE 1=1 ");
        while(mapItr.hasNext()){
            Entry e=(Entry)mapItr.next();
            if(StringUtil.isValidNew((String)e.getKey()) && StringUtil.isValidNew((String)e.getValue()))
            {
            	searchString[i]="%"+(String)e.getValue()+"%";
            	i++;
                //query.append(" AND CASE WHEN IS_ADMIN=").append(e.getKey()).append(" THEN NAME LIKE '%").append(e.getValue()).append("%' ELSE 1=1 END ");
            	query.append(" AND CASE WHEN IS_ADMIN=").append(e.getKey()).append(" THEN NAME LIKE ? ELSE 1=1 END ");
            }
        }
        query.append(" AND U.STATUS <> 0 ");
        query.append(" GROUP BY ROLE_ID");
        ResultSet result=QueryUtil.getResult(query.toString(), searchString);
        return result;
    }

    public static String getAllUserNoForRegion(String regionID) {


        StringBuffer sb = new StringBuffer(regionID);//added by anilT on 27-aug-2011

        String query = "SELECT U.USER_NO FROM USERS U, FRANCHISEE F , OWNERS O WHERE F.STATUS IN (1,3) AND IS_ADMIN='N' AND F.IS_FRANCHISEE IN ('Y','N') AND F.FRANCHISEE_NO =O.FRANCHISEE_NO AND U.FRANCHISEE_NO=F.FRANCHISEE_NO AND  F.AREA_ID=" + regionID + " ORDER BY FRANCHISEE_NAME";

        ResultSet result = null;
        try {
            result = QueryUtil.getResult(query, null);
            if (result.next()) {
                sb = new StringBuffer();
                sb.append(result.getString("USER_NO"));
            }
            while (result.next()) {

                sb.append(",").append(result.getString("USER_NO"));

            }
        } catch (Exception e) {
            logger.error("Exception caught in CmContactDetailDAO method::contactDetailsMap");
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return sb.toString();
    }

    public static String getDefaultEmailID() {
        return SQLUtil.getColumnValue("EMAILS_DEFAULT", "MAIL_FROM", FieldNames.MINUS_ONE, null);
    }

    public static SequenceMap getAllUsers() {
        return SQLUtil.getSequenceMapFromQuery("USER_NO","USER_ID","SELECT USER_ID, USER_NO FROM USERS");
    }

    public static String generateQuery(String tableName,String tableID,String leadId,String userLevel)
    {
        StringBuilder query= new StringBuilder();
        String queryData = FieldNames.EMPTY_STRING;
        String returnString = FieldNames.EMPTY_STRING;
        ResultSet result=null;
        try {

            query.append("SELECT * FROM ").append(tableName).append(" WHERE ").append(tableID).append("  =");
            query.append(leadId);
            if(tableName.equals("TASKS") && userLevel != null && !userLevel.equals("1")){
                query.append(" AND TASK_TYPE !=1 ");
            }
            result = QueryUtil.getResult(query.toString(),null);
            if(result!=null){
                while(result.next()) {
                    queryData=FieldNames.EMPTY_STRING;
                    int colCount = result.getnColumnCount();


                    for(int i=1;i<=colCount;i++) {
                        String qData=result.getString(i);
                        if(StringUtil.isValid(qData) &&  !qData.equals("false")) {
                            qData=PortalUtils.replaceAll(qData, "\\", "\\\\");//pita-20140523-065
                            qData= qData.replaceAll("'","");
                            qData="'"+qData+"'";
                        }

                        if(StringUtil.isValid(queryData))
                            queryData=queryData+" , "+qData;
                        else
                            queryData=qData;
                    }
                    returnString=returnString+" INSERT INTO "+tableName+" VALUES("+queryData+");";
                }
            }
        }catch(Exception e){
            logger.info("ERROR: exception in generateQuery() ::" + e);
        }
        finally {
            if(result!=null) {
                result.release();
                result=null;
            }
        }
        return returnString;
    }
    //P_Enh_COMMON_Task_Mails

    public static SequenceMap getTaskReminderMailContent(){

        SequenceMap sMap = new SequenceMap();
        StringBuffer sbQuery = new StringBuffer();
        StringBuffer query = new StringBuffer();
        String lastDateTimeOfThread = null;
        Info finalInfo = new Info();
        String currentDateTimeDB = DateUtil.getCurrentDateTimeDB();
        try {
            query.append(" SELECT LAST_REMINDER_SENT_DATE FROM TASK_REMINDER_MAIL_NOTIFICATION ");
            ResultSet rs = null;
            rs = QueryUtil.getResult(query.toString(), null);
            if (rs.next()) {
                lastDateTimeOfThread = DateUtil.formatDate(rs.getTimestamp("LAST_REMINDER_SENT_DATE").toString(), TimeZoneUtils.DB_DATETIME);
            }
            sbQuery.append("SELECT T.TASK_ID, T.FOREIGN_ID AS LEAD_ID, T.ASSIGN_BY, T.DATE, T.REMINDER_TIME, T.CREATION_DATE, T.REMINDER, T.ASSIGN_TO  AS LEAD_OWNER_ID,T.TT_ID, T.SUBJECT, F.EMAIL_ID , CRD.REMINDER_ID, T.STATUS, T.MODULE_ID, T.DURATION, T.COMMENTS FROM TASKS T LEFT JOIN USERS U ON U.USER_NO = T.ASSIGN_TO LEFT JOIN FRANCHISEE F ON F.FRANCHISEE_NO = U.FRANCHISEE_NO LEFT JOIN CAL_REMINDER CR ON CR.SCHEDULE_ID = T.TASK_ID LEFT JOIN CAL_REMINDER_DETAILS CRD ON CR.REMINDER_ID = CRD.REMINDER_ID WHERE T.TASK_EMAIL_REMINDER='Y' AND T.STATUS != '639' AND T.MAIL_REMINDER_SENT = 'N' AND T.REMINDER = 'Y' AND T.REMINDER_TIME BETWEEN '" + lastDateTimeOfThread + "' AND '" + currentDateTimeDB + "' ORDER BY F.EMAIL_ID");
            ResultSet result = null;
            result = QueryUtil.getResult(sbQuery.toString(), null);

            if (result != null) {
                while (result.next()) {

                }
            }
        }  catch(Exception e) {
                logger.error("Exception getTaskReminderMailContent --------", e);
            }

        return sMap;
    }

    public static Map getTaskCompletionMailContent(String taskID,String threadFor) {
    	return getTaskCompletionMailContent(taskID,threadFor,null);
    }
    //P_B_73957 STARTS
    public static Map getTaskCompletionMailContent(String taskID,String threadFor,String moduleName) {
    	return getTaskCompletionMailContent(taskID,threadFor,moduleName,null);
    }//P_B_73957 ENDS
    public static Map getTaskCompletionMailContent(String taskID,String threadFor,String moduleName,String assignToComboValue) {		//P_B_73957
        SequenceMap<String, Info> sMap = null;
        Map ownerTaskMap = BaseUtils.getNewHashMapWithKeyValueType();
        StringBuffer sbQuery = new StringBuffer();
        ResultSet result = null;
        try{
        	sbQuery.append("SELECT T.TASK_ID, T.FOREIGN_ID AS LEAD_ID, T.ASSIGN_BY, T.DATE, T.REMINDER_TIME, T.CREATION_DATE, T.REMINDER,T.ASSIGN_TO  AS LEAD_OWNER_ID ,GROUP_CONCAT(DISTINCT TOM.ASSIGN_TO)  AS ASSIGN_TO,T.TT_ID, T.SUBJECT, F.EMAIL_ID , CRD.REMINDER_ID, T.STATUS, T.MODULE_ID, T.DURATION, T.COMMENTS, TT.TT_NAME ,T.FOREIGN_TYPE FROM TASKS T LEFT JOIN USERS U ON U.USER_NO = T.ASSIGN_TO LEFT JOIN FRANCHISEE F ON F.FRANCHISEE_NO = U.FRANCHISEE_NO LEFT JOIN CAL_REMINDER CR ON CR.SCHEDULE_ID = T.TASK_ID LEFT JOIN CAL_REMINDER_DETAILS CRD ON CR.REMINDER_ID = CRD.REMINDER_ID  LEFT JOIN TASK_TYPE TT ON TT.TT_ID = T.TT_ID INNER JOIN TASK_OWNER_MAPPING TOM ON TOM.TASK_ID=T.TASK_ID WHERE T.TASK_ID IN("+taskID+") GROUP BY T.TASK_ID ORDER BY T.MODULE_ID ,T.FOREIGN_TYPE , F.EMAIL_ID");
        	result = QueryUtil.getResult(sbQuery.toString(), null);
            if (result != null) {
                while (result.next()) {
                	if(FieldNames.ASSIGN_BY.equals(threadFor)) {
                    if(ownerTaskMap.containsKey(result.getString("ASSIGN_BY"))){
                        sMap = (SequenceMap)ownerTaskMap.get(result.getString("ASSIGN_BY"));
                    } else {
                        sMap = SequenceMapFactory.getNewSequenceMap();
                    }
                	}
                	else 
                	{
                		if(ownerTaskMap.containsKey(result.getString("LEAD_OWNER_ID"))){
                            sMap = (SequenceMap)ownerTaskMap.get(result.getString("LEAD_OWNER_ID"));
                        } else {
                            sMap = SequenceMapFactory.getNewSequenceMap();
                        }	
                	}
                	
                    Info info = new Info();
                    info.set("leadID", result.getString("LEAD_ID"));
                    info.set("taskID", result.getString("TASK_ID"));
                    info.set(FieldNames.ASSIGN_BY, result.getString("ASSIGN_BY"));
                    info.set(FieldNames.DATE,result.getTimestamp("DATE"));
                    info.set(FieldNames.REMINDER_TIME, DateUtil.formatDate(result.getTimestamp("REMINDER_TIME"), TimeZoneUtils.DB_DATETIME));
                    info.set(FieldNames.CREATION_DATE, DateUtil.formatDate(result.getTimestamp("CREATION_DATE"), TimeZoneUtils.DB_DATETIME));
                    info.set(FieldNames.REMINDER, result.getString("REMINDER"));
                    info.set(FieldNames.ASSIGN_TO, result.getString("LEAD_OWNER_ID"));
                    info.set(FieldNames.TASK_TYPE, result.getString("TT_NAME"));
                    info.set(FieldNames.SUBJECT, result.getString("SUBJECT"));
                    info.set(FieldNames.EMAIL_ID, result.getString("EMAIL_ID"));
                    info.set(FieldNames.REMINDER_ID, result.getString("REMINDER_ID"));
                    info.set(FieldNames.STATUS, result.getString("STATUS"));
                    info.set(FieldNames.MODULE_ID, result.getString("MODULE_ID"));
                    info.set(FieldNames.DURATION, result.getString("DURATION"));
                    info.set(FieldNames.FOREIGN_TYPE, result.getString("FOREIGN_TYPE"));
                    info.set(FieldNames.COMMENTS, result.getString("COMMENTS"));
                    info.set(FieldNames.ASSIGN_TO, result.getString("ASSIGN_TO"));
                    //P_B_73957 STARTS
                    if(StringUtil.isValid(assignToComboValue)){
                    	info.set(FieldNames.ASSIGN_TO, assignToComboValue);
                    }//P_B_73957 ENDS
                    
                    if(FieldNames.ASSIGN_BY.equals(threadFor))
                    {
                    	sMap.put(result.getString("TASK_ID"), info);		//P_B_71103
                    	ownerTaskMap.put(result.getString("ASSIGN_BY"), sMap);
                    }
                    else 
                    {
                    	//P_B_71103 STARTS
                    	for(String leadOwnerID : info.getString(FieldNames.ASSIGN_TO).split(","))
                    	{
                    		if(ownerTaskMap.containsKey(leadOwnerID))
                    		{
                    			sMap = (SequenceMap)ownerTaskMap.get(leadOwnerID);
                    		}
                    		sMap.put(result.getString("TASK_ID"), info);	
                    		ownerTaskMap.put(leadOwnerID, sMap);
                    	}
                    	//P_B_71103 ENDS
                    }
                
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();;
            logger.error("Exception in getTaskCompletionMailContent>>>>.     ",e);
        }
        return ownerTaskMap;
    }

    public static Map getTaskMailNotificationMap() {
        SequenceMap<String, Info> sMap = null;
        Map ownerTaskMap = BaseUtils.getNewHashMapWithKeyValueType();
        StringBuffer sbQuery = new StringBuffer();
        StringBuffer query = new StringBuffer();
        String lastDateTimeOfThread = null;
        String currentDateTimeDB = DateUtil.getCurrentDateTimeDB();
        try {
        query.append(" SELECT LAST_REMINDER_SENT_DATE FROM TASK_REMINDER_MAIL_NOTIFICATION ");
        ResultSet rs = null;
            rs = QueryUtil.getResult(query.toString(), null);
        if(rs.next()) {
                lastDateTimeOfThread = DateUtil.formatDate(rs.getTimestamp("LAST_REMINDER_SENT_DATE").toString(), TimeZoneUtils.DB_DATE);
        }
           sbQuery.append("SELECT T.TASK_ID, T.FOREIGN_ID AS LEAD_ID, T.ASSIGN_BY, T.DATE, T.REMINDER_TIME, T.CREATION_DATE, T.REMINDER, T.ASSIGN_TO  AS LEAD_OWNER_ID,T.TT_ID, T.SUBJECT, F.EMAIL_ID , CRD.REMINDER_ID, T.STATUS, T.MODULE_ID, T.DURATION, T.COMMENTS ,T.FOREIGN_TYPE, TT.TT_NAME FROM TASKS T LEFT JOIN USERS U ON U.USER_NO = T.ASSIGN_TO LEFT JOIN FRANCHISEE F ON F.FRANCHISEE_NO = U.FRANCHISEE_NO LEFT JOIN CAL_REMINDER CR ON CR.SCHEDULE_ID = T.TASK_ID LEFT JOIN CAL_REMINDER_DETAILS CRD ON CR.REMINDER_ID = CRD.REMINDER_ID LEFT JOIN TASK_TYPE TT ON TT.TT_ID = T.TT_ID WHERE T.TASK_EMAIL_REMINDER='Y' AND T.STATUS != '639' AND T.MAIL_REMINDER_SENT = 'N' AND T.REMINDER = 'Y' AND T.REMINDER_TIME BETWEEN '" + lastDateTimeOfThread + "' AND '" + currentDateTimeDB + "' ORDER BY T.MODULE_ID,T.FOREIGN_TYPE  , F.EMAIL_ID");
           ResultSet result = null;
            result = QueryUtil.getResult(sbQuery.toString(), null);
            if (result != null) {
                while (result.next()) {
                if(ownerTaskMap.containsKey(result.getString("LEAD_OWNER_ID"))){
                    sMap = (SequenceMap)ownerTaskMap.get(result.getString("LEAD_OWNER_ID"));
                } else {
                    sMap = SequenceMapFactory.getNewSequenceMap();
                }
                    Info info = new Info();
                    info.set("taskID", result.getString("TASK_ID"));
                    info.set("leadID", result.getString("LEAD_ID"));
                    info.set(FieldNames.ASSIGN_BY, result.getString("ASSIGN_BY"));
                    info.set(FieldNames.DATE,result.getTimestamp("DATE"));
                    info.set(FieldNames.REMINDER_TIME, DateUtil.formatDate(result.getTimestamp("REMINDER_TIME"), TimeZoneUtils.DB_DATETIME));
                    info.set(FieldNames.CREATION_DATE, DateUtil.formatDate(result.getTimestamp("CREATION_DATE"), TimeZoneUtils.DB_DATETIME));
                    info.set(FieldNames.REMINDER, result.getString("REMINDER"));
                    info.set(FieldNames.ASSIGN_TO, result.getString("LEAD_OWNER_ID"));
                    info.set(FieldNames.TASK_TYPE, result.getString("TT_NAME"));
                    info.set(FieldNames.SUBJECT, result.getString("SUBJECT"));
                    info.set(FieldNames.EMAIL_ID, result.getString("EMAIL_ID"));
                    info.set(FieldNames.REMINDER_ID, result.getString("REMINDER_ID"));
                    info.set(FieldNames.STATUS, result.getString("STATUS"));
                    info.set(FieldNames.MODULE_ID, result.getString("MODULE_ID"));
                    info.set(FieldNames.DURATION, result.getString("DURATION"));
                    info.set(FieldNames.COMMENTS, result.getString("COMMENTS"));
                    info.set(FieldNames.FOREIGN_TYPE, result.getString("FOREIGN_TYPE"));
                    sMap.put(result.getString("TASK_ID"), info);
                    ownerTaskMap.put(result.getString("LEAD_OWNER_ID"), sMap);
                }
            }
        }catch(Exception e) {
            logger.error("Exception getTaskMailNotificationMap --------", e);
        }

        return ownerTaskMap;
    }
//P_Enh_COMMON_Task_Mails ends

    public static String generateQuery(String tableName, String tableID, String leadId)
    {
        StringBuilder query = new StringBuilder();
        String queryData = FieldNames.EMPTY_STRING;
        String returnString = FieldNames.EMPTY_STRING;
        ResultSet result = null;
        try {
            query.append("SELECT * FROM ").append(tableName).append(" WHERE ").append(tableID).append("  =");
            query.append(leadId);

            result = QueryUtil.getResult(query.toString(), null);
            int colCount = 0;
            String qData = null;

            if(result != null) {
                while (result.next()) {
                    queryData = FieldNames.EMPTY_STRING;
                    colCount = result.getnColumnCount();

                    for (int i = 1; i <= colCount; i++) {

                        //ClockWork-20141201-680 starts
                        String colName=result.getMetaData().getColumnName(i);
                        String columnName = (String)hMap.get(tableName);
                        //ClockWork-20141201-680 ends

                        qData = result.getInString(i);

                        //ClockWork-20141201-680 starts
                        if(colName.equals(columnName) && !"FS_LEAD_DETAILS".equals(tableName)){
                            qData="null";
                        }
                        //ClockWork-20141201-680 ends

                        if ( tableName != null && tableName.equals("FS_CAMPAIGN_EMAIL_LOG") && i == 9) {
                            if (qData != null && qData.equals(FieldNames.ZERO)) {
                                queryData = queryData + ", null";
                            } else if (qData != null) {
                                queryData = queryData + ", "+qData;
                            } else {
                                queryData = queryData + ", null";
                            }
                        } else {
                            if (qData != null && !qData.equals("null") && !qData.equals("false") && !qData.equals("true")) {
                                qData=PortalUtils.replaceAll(qData, "\\", "\\\\");//pita-20140523-065
                                qData = qData.replaceAll("'", "\\\\'");
                                qData = "'" + qData + "'";
                            }

                            // LEAD_DELETED flag must be blank or null.
							/*if (tableName.equals("FS_LEAD_DETAILS") && i == 80) {
								qData = FieldNames.NULL;
							}

							//P_E_Delete_ArchiveLeads starts
							if (("FS_LEAD_DETAILS_ARCHIVE".equals(tableName)) && i == 81) {
								qData = FieldNames.NULL;
							}*/
                            if("LEAD_DELETED".equals(colName)) {
                                qData = FieldNames.NULL;
                            }
                            //P_E_Delete_ArchiveLeads ends

                            if (queryData != null && !queryData.equals("")) {
                                queryData = queryData + " , " + qData;
                            } else {
                                queryData = qData;
                            }
                        }
                    }

                    if ( tableName != null && tableName.equals("FS_CAMPAIGN_EMAIL_LOG") ) {
                    }

                    //P_E_Delete_ArchiveLeads starts
                    if("FS_LEAD_DETAILS_ARCHIVE".equals(tableName)) {
                        tableName = "FS_LEAD_DETAILS";
                    }
                    //P_E_Delete_ArchiveLeads ends

                    returnString = returnString + " INSERT INTO " + tableName + " VALUES(" + queryData + ");@@@3@@@";
                }
            }

        } catch (Exception e) {
            logger.error("Exception in generateQuery:", e);
        } finally {
            if(result != null) {
                result.release();
                result = null;
            }
        }
        return returnString;

    }

    public static Info getComboInfo(String tableName,String columnName){
        Info info=new Info();
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        LinkedHashMap map=null;
        String initialValue=FieldNames.EMPTY_STRING;
        String endValue=FieldNames.EMPTY_STRING;
        String key=FieldNames.EMPTY_STRING;
        String score=FieldNames.EMPTY_STRING;
        HashMap hMap=null;
        if("NET_WORTH_SCORES".equals(tableName) || "LIQUIDITY_SCORES".equals(tableName))
//			map=(LinkedHashMap)CacheDataUtil.getHeatElementMap().get(tableName);
            map=(LinkedHashMap)NewPortalUtils.getHeatElementMap().get(tableName);
        else
//			map=(LinkedHashMap)CacheDataUtil.getHeatElementMap().get("INVESTMENT_SCORES");
            map=(LinkedHashMap)NewPortalUtils.getHeatElementMap().get("INVESTMENT_SCORES");
        if(map!=null)
        {
            Iterator it=map.keySet().iterator();
            while(it.hasNext())
            {
                key=(String)it.next();
                hMap=(HashMap)map.get(key);
                if("SCORE".equals(columnName))
                {
                    score=(String)hMap.get(FieldNames.SCORE);
                    info.set(key,score);
                }else
                {
                    initialValue=(String)hMap.get(FieldNames.INITIAL_VALUE);
                    endValue=(String)hMap.get(FieldNames.END_VALUE);
                    if("NET_WORTH_SCORES".equals(tableName) || "LIQUIDITY_SCORES".equals(tableName))
                    {
                        if("0".equals(initialValue))
                            initialValue="Under "+_baseConstants.USER_CURRENCY;
                        else if("0".equals(endValue))
                        {
                            endValue=initialValue;
                            initialValue="Over "+_baseConstants.USER_CURRENCY;
                        }
                        else
                            initialValue=_baseConstants.USER_CURRENCY+initialValue+"  to "+_baseConstants.USER_CURRENCY;
                    }else
                    {
                        if("0".equals(initialValue))
                        {
                            initialValue="Under ";
                            endValue+=" Month";
                        }
                        else if("0".equals(endValue))
                        {
                            endValue=initialValue +" Months";
                            initialValue="Over ";
                        }
                        else
                        {
                            initialValue+="  to ";
                            endValue+=" Months";
                        }
                    }
                    info.set(key,initialValue+endValue);
                }
            }
        }
        map=null;
        initialValue=null;
        endValue=null;
        key=null;
        score=null;
        hMap=null;
        return info;
    }

    public static Info getBackGroundInfo() {
        return SQLUtil.getColumnValueInfo("EMPLOYMENT_BACKGROUND", "EBG_ID", "EBG_NAME", null, null, "EBG_NAME", null);
    }

    public static SequenceMap getWebsiteLinks(String userNo, String sortKey, String sortOrder, String linkNo)
    {
        String query = FieldNames.EMPTY_STRING;
        ResultSet resultSet=null;
        if (StringUtil.isValid(linkNo))
        {
            query = "SELECT LINK_NO, LINK_TITLE, LINK_URL, LINK_DATE DATE, USER_NO, DESCRIPTION , LINK_USER_ID ,AES_DECRYPT(LINK_PASSWORD,'pvm@e20') LINK_PASSWORD FROM WEBSITE_LINKS WHERE LINK_NO="+linkNo;
        }

        if (((linkNo == null) && (sortKey == null) && (sortOrder == null)))
        {
            query = "SELECT LINK_NO, LINK_TITLE, LINK_URL, LINK_DATE DATE, USER_NO, DESCRIPTION,LINK_USER_ID ,AES_DECRYPT(LINK_PASSWORD,'pvm@e20') LINK_PASSWORD FROM WEBSITE_LINKS WHERE 1=1 ORDER BY LINK_DATE DESC";
        }
        else
        {
            if ((linkNo == null) || (linkNo.length() == 0))
            {
                query = "SELECT LINK_NO, LINK_TITLE, LINK_URL, LINK_DATE DATE, USER_NO, DESCRIPTION , LINK_USER_ID ,AES_DECRYPT(LINK_PASSWORD,'pvm@e20') LINK_PASSWORD FROM WEBSITE_LINKS WHERE 1=1 ORDER BY "+sortKey+" "+sortOrder;
            }
        }
        SequenceMap webLinksMap	= new SequenceMap();
        try
        {
            resultSet = QueryUtil.getResult(query,null);
            while (resultSet.next())
            {
                Info WebLinksInfo = new Info();
                WebLinksInfo.set(FieldNames.LINK_NO,resultSet.getString("LINK_NO"));
                WebLinksInfo.set(FieldNames.LINK_TITLE,resultSet.getString("LINK_TITLE"));
                WebLinksInfo.set(FieldNames.LINK_URL,resultSet.getString("LINK_URL"));
                WebLinksInfo.set(FieldNames.USER_NO,resultSet.getString("USER_NO"));
                WebLinksInfo.set(FieldNames.LINK_DATE,PortalUtils.changeDateFormatone(resultSet.getString("DATE")));
                WebLinksInfo.set(FieldNames.DESCRIPTION,resultSet.getString("DESCRIPTION"));
                WebLinksInfo.set(FieldNames.LINK_USER_ID,resultSet.getString("LINK_USER_ID"));
                WebLinksInfo.set(FieldNames.LINK_PASSWORD,resultSet.getString("LINK_PASSWORD"));
                webLinksMap.put(resultSet.getString("LINK_NO") , WebLinksInfo);
            }
        }
        catch(Exception e)
        {
            logger.error("Exception in getWebsiteLinks() :" + e);
        }
        finally
        {
            if(resultSet != null)
            {
                resultSet.release();
                resultSet = null;
            }
        }
        return webLinksMap;
    }


    public static void updateWebSiteInfo(String linkNo,String linkUrl, String userID, String password,String userNo) {
        String query = "UPDATE WEBSITE_LINKS SET LINK_URL ='"+linkUrl+"' ,LINK_USER_ID='"+userID+"' ,LINK_PASSWORD=AES_ENCRYPT('"+password+"','pvm@e20'),USER_NO='"+userNo+"',LINK_DATE=now() WHERE LINK_NO='1' ";
        try {
            QueryUtil.update(query,Constants.EMPTY_STRING_ARRAY);
        }
        catch(Exception e) {
            logger.error("Exception in updateWebSiteInfo() :" + e);
        }
    }

    public static boolean checkForDelete(String select, String from, String where)
    {
        boolean returnBoolean = false;
        StringBuilder query = new StringBuilder();
        query.append("SELECT ");
        query.append(select);
        query.append(" FROM ");
        query.append(from);
        query.append(" WHERE ");
        query.append(where);
        ResultSet result=null;
        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                String resultString = result.getString(1);
                if(resultString!=null && (resultString.equals("0") || resultString.equals("0.0")))
                    returnBoolean = false;
                else
                    returnBoolean = true;
            }
        }
        catch (Exception e)
        {
            logger.error("Exception in checkForDelete() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }

        return returnBoolean;
    }


    public static boolean directQueryUpdate(String query) {
        boolean flag = false;
        try {
            int size = QueryUtil.update(query, Constants.EMPTY_STRING_ARRAY);
            if(size > 0){
                flag = true;
            }
        }
        catch (Exception e) {
            logger.error("Exception in directQueryUpdate() Method :::",e);
        }
        return flag;
    }

    public static SequenceMap getDuplicacyCriteria1() {
        return getDuplicacyCriteria(false);
    }

    public static SequenceMap getDuplicacyCriteria2() {
        return getDuplicacyCriteria(true);
    }

    /**
     * @author Vivek Maurya
     * @param isCriteria2 true for duplicate criteria 2 , false for criteria 1
     * @return duplicate criteria map 
     */
    public static SequenceMap getDuplicacyCriteria(boolean isCriteria2) {
        String columnName = "SELECTED_FOR_CRITERIA1";
        String columnKey = "selectedForCriteria1";
        if(isCriteria2) {
            columnName = "SELECTED_FOR_CRITERIA2";
            columnKey = "selectedForCriteria2";
        }
        SequenceMap oldCriteriaMap = new SequenceMap();
        SequenceMap rowMap = new SequenceMap();
        ResultSet result = null;
        try {
            String query = "SELECT CRITERIA_ID,CRITERIA_NAME,MODULE_ID,"+columnName+" FROM DUPLICACY_CRITERIA WHERE "+columnName+" ="
                    + 1 + " ORDER BY CRITERIA_ID";

            result = QueryUtil.getResult(query, null);
            int count = 0;

            while (result.next()) {
                rowMap = new SequenceMap();
                rowMap.put("criteriaId", result.getString("CRITERIA_ID"));
                rowMap.put("criteriaName", result.getString("CRITERIA_NAME"));
                rowMap.put("moduleID", result.getString("MODULE_ID"));
                rowMap.put(columnKey,result.getString(columnName));
                oldCriteriaMap.put("" + (++count), rowMap);
            }
        } catch (Exception e) {
            logger.error("ERROR: exception in getDuplicacyCriteria1 ::" , e);
        } finally {
            if (result != null) {
                result.release();
                result = null;
            }
        }

        return oldCriteriaMap;
    }

    /**
     * @author Vivek Maurya
     * @date 25Apr2011
     * @desc Method is used to insert criteria change info for audit history
     * @param criteriaFrom
     *            previous criteria
     * @param criteriaTo
     *            updated criteria
     * @param userNo
     *            userNo
     * @param moduleID
     *            2 for FS, 4 for CM
     * @param criteria
     *            1 for Criteria 1,2 for Criteria 2
     */
    public static void insertCriteria1ChangeInfo(String criteriaFrom,String criteriaTo, String userNo, String moduleID, String criteria)
    {
        String query = "INSERT INTO DUPLICACY_CRITERIA_CHANGE_INFO (CRITERIA_FROM,CRITERIA_TO,DATE_CHANGED,CHANGED_BY,CRITERIA,MODULE_ID) VALUES (?,?,?,?,?,?)";
        String currentDate = DateUtil.getCurrentDateTimeDB();
        try {
            QueryUtil.update(query, new String[]{criteriaFrom,
                    criteriaTo, currentDate, userNo, criteria, moduleID});
        } catch (Exception e) {
            logger.error("Exception in insertCriteria1ChangeInfo ::: ",e);
        }
    }

    /**
     * @author Vivek Maurya
     * @date 25Apr2011
     * @desc Method is used to retrieve criteria change info for audit history
     * @param userNo
     *            userNo
     */
    public static SequenceMap getDuplicateCriteriaChangeMap(String userNo)
    {
        SequenceMap sMap = new SequenceMap();
        String query = FieldNames.EMPTY_STRING;
        Info info = new Info();
        ResultSet result = null;
        try {
            query = "SELECT CRITERIA_FROM,CRITERIA_TO,DATE_CHANGED,CHANGED_BY,CRITERIA FROM DUPLICACY_CRITERIA_CHANGE_INFO ORDER BY DATE_CHANGED DESC";
            result = QueryUtil.getResult(query, null);
            int i = 0;
            String timeIn = FieldNames.EMPTY_STRING;
            Info userInfo = AdminMgr.newInstance().getUsersDAO().getUsers();
            while (result.next()) {

                info = new Info();
                info.set("criteriaFrom", changeLanguage(result.getString("CRITERIA_FROM")));

                info.set("criteriaTo", changeLanguage(result.getString("CRITERIA_TO")));

                String userTimezone = UserTimezoneMap.newInstance().getTimezone(userNo);
                if (StringUtil.isValid(result.getString("DATE_CHANGED")))
                {
                    String tZConvertedDateTime = TimeZoneUtils.performUTCConversion(
                            com.appnetix.app.control.web.multitenancy.util.MultiTenancyUtil.getTenantConstants().DB_TIMEZONE_TIMEZONEUTILS,
                            userTimezone,
                            DateTime.getDateTime(
                                    result.getTimestamp("DATE_CHANGED"),
                                    TimeZoneUtils.DB_DATETIME),
                            DateUtil.DB_DATETIME_FORMAT,
                            TimeZoneUtils.DB_DATETIME);
                    java.sql.Timestamp tStampObj = DateTime.getTimestamp(
                            tZConvertedDateTime, TimeZoneUtils.DB_DATETIME);
                    timeIn = DateUtil.getDisplayDate(result.getString("DATE_CHANGED"))
                            + " "
                            + DateTime.getCalendarDisplayTime(java.sql.Timestamp.valueOf(tStampObj.toString()));
                }
                info.set(FieldNames.DATE_CHANGED, timeIn);

                info.set("statusChangedBy",
                        userInfo.get(result.getString("CHANGED_BY")));
                if (StringUtil.isValid(result.getString("CRITERIA"))) {
                    if (FieldNames.ONE.equals(result.getString("CRITERIA"))) {
                        info.set("criteria",LanguageUtil.getString("Duplicate Criteria")+ " 1");
                    } else if (FieldNames.TWO.equals(result.getString("CRITERIA"))) {
                        info.set("criteria", LanguageUtil.getString("Duplicate Criteria")+ " 2");
                    }
                }
                sMap.put("" + i, info);
                i++;
            }
        } catch (Exception e) {
            logger.error("Exception in getDuplicateCriteriaChangeMap ::: ",e);
        } finally {
            if (result != null) {
                result.release();
                result = null;
            }
        }
        return sMap;
    }

    public static String changeLanguage( String criteria)  {
        String changeCriteria=FieldNames.EMPTY_STRING;
        String[] criteriaValue=criteria.split(",");
        try {
            for(int i=0;i<criteriaValue.length;i++){
                changeCriteria=changeCriteria+LanguageUtil.getString(criteriaValue[i]);
                if(i<(criteriaValue.length-1)){
                    changeCriteria=changeCriteria+",";
                }
            }
        }
        catch (Exception e) {
            logger.error("Exception in changeLanguage() Method :::", e);
        }
        return changeCriteria;
    }

    public static boolean directQueryChecking(String query,String accntname)
    {
        boolean flag = false;
        ResultSet result = null;
        try
        {
            if(StringUtil.isValid(accntname))
                result = QueryUtil.getResult(query, new Object[]{accntname});
            else
                result = QueryUtil.getResult(query,null);

            if(result.size() > 0){
                flag = true;
            }
        }catch(Exception e){
            logger.error("Exception in method directQueryChecking():: ",e);
        }
        finally{
            if(result!=null){
                result.release();
                result=null;
            }
        }
        return flag;
    }



    public static boolean checkVerDuplicate(String tablename,String [] colArray,String [] valArray,String isKey)
    {
        boolean duplicateflag = false ;
        String [] colKeys=colArray;
        String [] valKeys=valArray;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(colKeys[0]);
        query.append(" FROM "+tablename);
        query.append(" WHERE  ");
        StringBuilder condition=new StringBuilder();
        ResultSet result=null;
        for (int i=0; i < colKeys.length; i++)
        {
            if (i==2 && valKeys[1].equalsIgnoreCase("public"))
            {

            } else
            {
                String key = valKeys[i];
                key = key.replaceAll("\"","\\\\\"");
                key = key.replaceAll("'","\\\\\'");
                if(i == 0 && isKey != null && "finAgrVer".equals(isKey)) {
                    condition.append(colKeys[i]).append("!='").append(key).append("'").append(" AND ");
                } else {
                    condition.append(colKeys[i]).append("='").append(key).append("'").append(" AND ");
                }
            }
        }

        int endIndex=condition.length()-4;
        String finalCondition=FieldNames.EMPTY_STRING;
        finalCondition=condition.substring(0,endIndex).toString();
        query.append(finalCondition);
        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                duplicateflag = true;
            }
        } catch (Exception e){
            logger.error("Exception in checkVerDuplicate() Method :::" ,e);
        }finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }





    /**
     * This will delete report of given id whose dashlet shown in dashboard
     * @author abhishek gupta
     */
    public static boolean checkFsCustomDashletDelete(String tablename,String [] colArray,String [] valArray,String isKey)
    {
        boolean duplicateflag = true ;
        String [] colKeys=colArray;
        String [] valKeys=valArray;
        String key = colKeys[0];
        String val = valKeys[0];
        key = key.replaceAll("\"","\\\\\"");
        key = key.replaceAll("'","\\\\\'");

        try
        {
            StringBuilder sbQuery1 = new StringBuilder();
            sbQuery1.append("DELETE FROM "+tablename+" WHERE "+key+"=").append(val);
            int result1 = QueryUtil.update(sbQuery1.toString(), Constants.EMPTY_STRING_ARRAY);
            if(result1 > 0)
            {
                duplicateflag = false;
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkFsCustomDashletDelete() Method :::",e);
        }

        return duplicateflag;
    }

    /**
     * Check dashboard data already exist or not when new dashboard information added to system
     * @author abhishek gupta
     */
    public static boolean checkFsCustomDashboard(String tablename,String [] colArray,String [] valArray,String isKey)
    {
        boolean duplicateflag = false;
        String [] colKeys=colArray;
        String [] valKeys=valArray;
        String key = colKeys[0];
        String val = valKeys[0];
        key = key.replaceAll("\"","\\\\\"");
        key = key.replaceAll("'","\\\\\'");
        ResultSet result1=null;
        try
        {
            StringBuilder sbQuery1 = new StringBuilder();
            sbQuery1.append("SELECT *  FROM "+tablename+" WHERE "+key+"='").append(val).append("' ");
            result1 = QueryUtil.getResult(sbQuery1.toString(),null);
            if(result1.size() > 0)
            {
                duplicateflag = true;
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkFsCustomDashboard() Method :::" +e.getMessage());
        }
        finally {
            if(result1 != null){
                result1.release();
                result1 = null;
            }
        }
        return duplicateflag;
    }

    public static boolean checkDuplicate7(String tablename,String columnname,String valKeys,String havingKeyCondition)
    {
        boolean duplicateflag = false;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);
        query.append(" WHERE 1=1 AND "+havingKeyCondition+"('");
        query.append(valKeys);
        query.append("',");
        query.append(columnname);
        query.append(")>0");

        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if (result!= null && result.next())
            {
                duplicateflag = true;
            }
        }
        catch (Exception e)
        {
            logger.error("Exception in checkDuplicate7() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    public static boolean getReminderMap(String sDate, String userId)
    {		  BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        //getting time zone
        String userTimeZone = UserTimezoneMap.newInstance().getTimezone(userId);
        SequenceMap scheduleMap = null;
        String eDate =	sDate.substring(0, 11) + "23:59:59";
        boolean check = true;
        sDate = TimeZoneUtils.performUTCConversion(userTimeZone,_baseConstants.DB_TIMEZONE_TIMEZONEUTILS, sDate, DateUtil.DB_FORMAT_HMS,DateUtil.DB_FORMAT_HMS); // CKCA-20140211-016
        eDate = TimeZoneUtils.performUTCConversion(userTimeZone,_baseConstants.DB_TIMEZONE_TIMEZONEUTILS, eDate, DateUtil.DB_FORMAT_HMS,DateUtil.DB_FORMAT_HMS); // CKCA-20140211-016

        // converting end date time in DB time zone
        String rTempStartTime =new String(sDate);

        try
        {
            //object of CalendarMgr
            CalendarMgr calendarMgr = CalendarMgr.newInstance();
            scheduleMap = calendarMgr.getCalReminderDetailsDAO().getReminder(rTempStartTime, eDate, userId);
            if(scheduleMap!=null && scheduleMap.size()!=0)
            {
                check = true;
            } else
            {
                check = false;
            }
        } catch (Exception e)
        {
            logger.error("Exception while getting next reminder time in getReminderMap()", e);
        }

        return check;
    }

    public static String checkDuplicate(String tablename,String requiredCol,String [] validatingColArray,String [] validatingValArray,String isWhere)
    {
        String outputValue="0";
        String [] colKeys=validatingColArray;
        String [] valKeys=validatingValArray;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(requiredCol);
        query.append(" FROM "+tablename);
        query.append(" WHERE  ");
        StringBuilder condition=new StringBuilder();
        if(colKeys.length>0){
            for (int i=0; i < colKeys.length; i++)
            {
                String key = valKeys[i];
                key = key.replaceAll("\"","\\\\\"");
                key = key.replaceAll("'","\\\\\'");
                key = key.replaceAll("####",",");//Broker_Summary_Filter_Issue
                condition.append(colKeys[i]).append("='").append(key).append("'").append(" AND ");
            }
        }else{
            condition.append(" 1=1  AND ");
        }
        int endIndex=condition.length()-4;
        String finalCondition="";
        finalCondition=condition.substring(0,endIndex).toString();
        query.append(finalCondition);
        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                outputValue=result.getString(requiredCol);
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return outputValue;
    }

    public static boolean checkDuplicate(String tablename,String [] colArray,String [] valArray,String isWhere)
    {
        boolean duplicateflag = false ;
        String [] colKeys=colArray;
        String [] valKeys=valArray;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(colKeys[0]);
        query.append(" FROM "+tablename);
        query.append(" WHERE  ");
        StringBuilder condition=new StringBuilder();

        for (int i=0; i < colKeys.length; i++)
        {
            if (i==2 && valKeys[1].equalsIgnoreCase("public"))
            {

            } else
            {
                String key = valKeys[i];
                key = PortalUtils.replaceAll(key, "#####", "&");
                key = PortalUtils.replaceAll(key, "@@@@@", ",");//MeltingPot-20160201-665
                key = PortalUtils.replaceAll(key, "^^^**^^^", "&");
                key = PortalUtils.replaceAll(key, "^^^**^", "%");
                key = PortalUtils.replaceAll(key,"\\","\\\\");
                key = key.replaceAll("\"","\\\\\"");
                key = key.replaceAll("'","\\\\\'");
                condition.append(colKeys[i]).append("='").append(key).append("'").append(" AND ");
            }
        }

        int endIndex=condition.length()-4;
        String finalCondition=FieldNames.EMPTY_STRING;
        finalCondition=condition.substring(0,endIndex).toString();
        query.append(finalCondition);
        
        if(ModuleUtil.zcubatorImplemented() && StringUtil.isValid((String)StrutsUtil.getHttpServletRequest().getParameter("groupId"))){
        	query.append(" AND GROUP_ID !=").append((String)StrutsUtil.getHttpServletRequest().getParameter("groupId"));
        }
        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                duplicateflag = true;
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    public static boolean checkDuplicate(String tablename, String columnname, String key,String templatename, String tempidValue)
    {
        boolean duplicateflag = false ;
        ResultSet result = null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);

        if (key!= null)
        {
            key = key.trim();
            key = key.replaceAll("\"","\\\\\"");
            key = key.replaceAll("'","\\\\\'");
        }

        if ( tempidValue != null)
        {
            tempidValue = tempidValue.replaceAll("\"","\\\\\"");
            tempidValue = tempidValue.replaceAll("'","\\\\\'");
        }

        query.append(" WHERE  ").append(columnname).append(" ='").append(key).append("'");
        query.append(" AND  ").append(templatename);



        query.append(" !='");

        query.append(tempidValue).append("'");

        try
        {
            result = QueryUtil.getResult(query.toString(),null);
            if(result!= null && result.next())
            {
                duplicateflag = true;
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }
    public static boolean checkDuplicateWithLike(String tablename, String columnname, String key)
    {
    	 boolean duplicateflag = false;
         ResultSet result=null;
         StringBuilder query = new StringBuilder("SELECT ");
         query.append(columnname);
         query.append(" FROM "+tablename);

         if (key != null)
         {
             key = key.trim();
             key = key.replaceAll("\"","\\\\\"");
             key = key.replaceAll("'","\\\\\'");
         }

         query.append(" WHERE  ").append(columnname).append(" LIKE'").append("%").append(key).append("%").append("'");

         try
         {
             result = QueryUtil.getResult(query.toString(),null);
             if (result!= null && result.next())
             {
                 duplicateflag = true;
             }
         } catch (Exception e)
         {
             logger.error("Exception in checkDuplicate() Method :::" ,e);
         }
         finally {
             if(result != null){
                 result.release();
                 result = null;
             }
         }
         return duplicateflag; 	
    	
    	
    	
    }
    public static boolean checkDuplicate(String tablename, String columnname, String key)
    {
        boolean duplicateflag = false;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);

        if (key != null)
        {
            key = key.trim();
            key = key.replaceAll("\"","\\\\\"");
            key = key.replaceAll("'","\\\\\'");
        }

        query.append(" WHERE  ").append(columnname).append(" ='").append(key).append("'");

        try
        {
            result = QueryUtil.getResult(query.toString(),null);
            if (result!= null && result.next())
            {
                duplicateflag = true;
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    //P_ADMIN_B_19347 override by Ravi
    public static boolean checkDuplicate(String tablename,String  columnname,String key, String idField,String  idValue,String  idField1,String  idValue1,String  flag,String flag1)
    {
        return checkDuplicate( tablename,  columnname, key,  idField,  idValue,  idField1,  idValue1,  flag, flag1,null,null);
    }//P_ADMIN_B_19347 by Ravi

    public static boolean checkDuplicate(String tablename,String  columnname,String key, String idField,String  idValue,String  idField1,String  idValue1,String  flag,String flag1,String idField2, String idValue2)
    {
        boolean duplicateflag = false ;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);
        String resultString = null;

        if (key!= null)
        {
            key = key.trim();
            key = key.replaceAll("\"","\\\\\"");
            key = key.replaceAll("'","\\\\\'");
        }

        if (idValue!= null)
        {
            idValue = idValue.trim();
            idValue = idValue.replaceAll("\"","\\\\\"");
            idValue = idValue.replaceAll("'","\\\\\'");
        }

        if (idValue1!= null)
        {
            idValue1 = idValue1.trim();
            idValue1 = idValue1.replaceAll("\"","\\\\\"");
            idValue1 = idValue1.replaceAll("'","\\\\\'");
        }

        //P_ADMIN_B_19347 by Ravi
        if (idValue2!= null)
        {
            idValue2 = idValue2.trim();
            idValue2 = idValue2.replaceAll("\"","\\\\\"");
            idValue2 = idValue2.replaceAll("'","\\\\\'");
        }//P_ADMIN_B_19347 by Ravi

        query.append(" WHERE  ").append(columnname).append(" ='").append(key).append("'");
        query.append(" AND  ").append(idField);

        if( flag != null && flag.equals("false"))
            query.append(" !='");
        else
            query.append(" ='");
        query.append(idValue).append("'");
        query.append(" AND  ").append(idField1);
        if( flag1 != null && flag1.equals("false"))
            query.append(" !='");
        else
            query.append(" ='");

        query.append(idValue1).append("'");

        //P_ADMIN_B_19347 by Ravi
        if(idField2 !=null && idValue2!=null){
            query.append(" AND  ").append(idField2);
            query.append(" ='");
            query.append(idValue2).append("'");
        }//P_ADMIN_B_19347 by Ravi

        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                if ( columnname != null && columnname.indexOf(",") != -1)
                {
                    resultString = result.getString(columnname);
                } else
                {
                    String columnNames[] = columnname.split(",");
                    resultString = result.getString(columnNames[0]);
                }

                if ( !StringUtil.isValid(resultString))
                {
                    duplicateflag = false;
                } else
                {
                    duplicateflag = true;
                }
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    public static boolean checkDuplicate(String tablename, String columnname, String key, String idField, String idValue, String flag)
    {
        boolean duplicateflag = false ;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);
        String resultString = null;

        if (key!= null)
        {
            key = key.trim();
            key = PortalUtils.replaceAll(key, "#####", "&");
            key = PortalUtils.replaceAll(key, "@@@@@", ",");//MeltingPot-20160201-665
            key = PortalUtils.replaceAll(key, "^^^**^^^", "&");
            key = PortalUtils.replaceAll(key, "^^^**^", "%");
            key = key.replaceAll("\"","\\\\\"");
            key = key.replaceAll("'","\\\\\'");
        }

        // ADDRESS_TITLE for 72:starts
        if (idValue!= null && !"IN".equalsIgnoreCase(flag))
        {
            idValue = idValue.trim();
            idValue = idValue.replaceAll("\"","\\\\\"");
            idValue = idValue.replaceAll("'","\\\\\'");
        }

        query.append(" WHERE  ").append(columnname).append(" ='").append(key).append("'");
        query.append(" AND  ").append(idField);
        // condition Added by Veerpal Singh 0n 1 Dec 2011
        if( flag != null && "false".equalsIgnoreCase(flag))
            query.append(" !='"+idValue+"'");
        else if( flag != null && "IN".equalsIgnoreCase(flag))
            query.append(" IN("+idValue+")");
        else
            query.append(" ='"+idValue+"'");
        // ADDRESS_TITLE for 72:ends
        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                if ( columnname != null && columnname.indexOf(",") != -1)
                {
                    resultString = result.getString(columnname);
                } else
                {
                    String columnNames[] = columnname.split(",");
                    resultString = result.getString(columnNames[0]);
                }

                if ( !StringUtil.isValid(resultString))
                {
                    duplicateflag = false;
                } else
                {
                    duplicateflag = true;
                }
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    public static boolean checkDuplicate(String tablename, String columnname, String key, String idField, String idValue, String flag, String parentIdField, String parentIdValue)
    {
        boolean duplicateflag = false ;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);

        if(key!= null)
        {
            key = key.trim();
            key = key.replaceAll("\"","\\\\\"");
            key = key.replaceAll("'","\\\\\'");
        }

        if (idValue!= null)
        {
            idValue = idValue.trim();
            idValue = idValue.replaceAll("\"","\\\\\"");
            idValue = idValue.replaceAll("'","\\\\\'");
        }

        query.append(" WHERE  ").append(columnname).append(" ='").append(key).append("'");
        query.append(" AND  ").append(idField);

        if( flag != null && flag.equals("false"))
            query.append(" !='");
        else
            query.append(" ='");

        query.append(idValue).append("' AND ");
        query.append(parentIdField).append(" ='");
        query.append(parentIdValue).append("'");

        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if(result!= null && result.next())
            {
                duplicateflag = true;
            }
        } catch (Exception e)
        {
            logger.error("Exception in checkDuplicate() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    public static boolean updateMyLinksPublish(String linkNo, String value){

        String query = "UPDATE RELATED_LINKS SET PUBLISH='"+value+"' WHERE LINK_NO = "+linkNo;
        int status = 0;
        try {
            status = QueryUtil.update(query, Constants.EMPTY_STRING_ARRAY);
        } catch (Exception e) {
            logger.error("Exception in updateMyLinksPublish() Method :::" ,e);
        }
        return status<=0?false:true;
    }

    public static SequenceMap getCreatedByMap(HttpServletRequest request,String dataKey)
    {
        return getCreatedByMap(request, dataKey,false,false);
    }


    public static SequenceMap getCreatedByMap(HttpServletRequest request,String dataKey,boolean flag,boolean fromTemplateSummary)
    {
        SequenceMap userMap = new SequenceMap();

        HttpSession session=request.getSession();
        String userNo=(String)session.getAttribute("user_no");
        String userLevel=(String)session.getAttribute("user_level");
        String regionId=(String)session.getAttribute("regionId");
        String divisionIds = (String)session.getAttribute("divisionIds");; 
        String fNo=(String)session.getAttribute("franchisee_no");
        String franchiseOwner[] = new String[2];
        String regionList="";
        if("All".equals((String)request.getSession().getAttribute("franchisee_all"))&&"1".equals(userLevel))
        {
            franchiseOwner=CommonUtil.getFranchiseeAndOwner(request);
            regionList=CommonUtil.getRegionList(franchiseOwner[1]);
        }
        try{
            if(StringUtil.isValid(dataKey))
            {
                if("0".equals(dataKey))
                {
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers(dataKey, null, userNo, null);
                }else if("2".equals(dataKey))
                {
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers(dataKey, null, userNo, null);
                }else if(dataKey.indexOf("#")!=-1)
                {
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers("2", null, userNo, regionId);
                }else if(Constants.USER_LEVEL_DIVISION.equals(dataKey))
                {
                	if(StringUtil.isValidNew(divisionIds)) {
                		dataKey += " AND UDM.DIVISION_ID IN (" + divisionIds + ")  ";
    				}
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers(dataKey, null, userNo, null);
                }else if(dataKey.indexOf("$")!=-1)
                {
                	String val = Constants.USER_LEVEL_DIVISION;
                	if(StringUtil.isValidNew(divisionIds)) {
                		val += " AND UDM.DIVISION_ID IN (" + divisionIds + ")  ";
    				}
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers(val, null, userNo, "", divisionIds);
                }
                else if("3".equals(dataKey))
                {
                	if(Constants.USER_LEVEL_DIVISION.equals(userLevel))
                    {

                        userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1", DivisionUtil.getAllDivisionFranchiseeNos((String) request.getSession().getAttribute("divisionIds")), userNo, regionId);
                    }
                	else   if("2".equals(userLevel))
                    {
                        userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1", null, userNo, regionId);
                    }
                    else if("1".equals(userLevel))
                    {
                        if(StringUtil.isValid(franchiseOwner[0])&& StringUtil.isValid(franchiseOwner[1])&&StringUtil.isValid(regionList))
                        {
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1", franchiseOwner[0], franchiseOwner[1], regionList);
                        }
                        else
                        {
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1", fNo, userNo, regionId);
                        }
                    }
                    else
                    {
                        userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1", null, userNo, null);
                    }
                }
                else if("-1".equals(dataKey))
                {
                	StringBuilder sbQuery = new StringBuilder();
                    if("0".equals(userLevel))
                    {
                        if(flag)
                        {
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers("'0'", null, userNo, null);
                        }
                        else
                        {
                        	sbQuery.append("'0' OR U.USER_LEVEL='1' OR U.USER_LEVEL='2' ");
                        	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
                        	{
                        		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("'");
                        	}
                        	userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(), null, userNo, null);
                        }
                    }else if("2".equals(userLevel))
                    {
                        if(fromTemplateSummary)
                        {
                        	sbQuery.append("'1' OR U.USER_LEVEL='2' ");
                        	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
                        	{
                        		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("'");
                        	}
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(),null, userNo, regionId);
                        }
                        else
                        {
                        	sbQuery.append("'0' ");
                        	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
                        	{
                        		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("' ");
                        	}
                        	sbQuery.append(" OR ((U.USER_LEVEL='1' OR U.USER_LEVEL='2') AND F.AREA_ID="+regionId+" )");
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(), null, userNo, null);
                        }
                    }else if(Constants.USER_LEVEL_DIVISION.equals(userLevel))
                    {
                        if(fromTemplateSummary)
                        {
                        	sbQuery.append("'1' OR U.USER_LEVEL='2' ");
                        	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
                        	{
                        		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("'");
                        	}
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(),null, userNo, "", divisionIds);
                        }
                        else
                        {
                        	sbQuery.append("'0' OR (U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)+")) OR U.USER_LEVEL='2' ");
                        	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
                        	{
                        		sbQuery.append(" OR (U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("' ");
                        	}
                        	if(StringUtil.isValidNew(divisionIds))
                        	{
                        		sbQuery.append(" AND UDM.DIVISION_ID IN("+divisionIds+") ");
                        	}
                        	sbQuery.append(") ");
                            userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(), null, userNo, null);
                        }
                    }else
                    {
                        if(fromTemplateSummary)
                        {
                            if(StringUtil.isValid(franchiseOwner[0])&& StringUtil.isValid(franchiseOwner[1])&&StringUtil.isValid(regionList))
                            {
                                userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1",franchiseOwner[0] , franchiseOwner[1], regionList);
                            }
                            else
                            {
                                userMap=AdminMgr.newInstance().getUsersDAO().getUsers("1",fNo , userNo, regionId);
                            }
                        }
                        else
                        {
                            if(StringUtil.isValid(franchiseOwner[0])&& StringUtil.isValid(franchiseOwner[1])&&StringUtil.isValid(regionList))
                            {
                                userMap=AdminMgr.newInstance().getUsersDAO().getUsers("'0' OR (U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+franchiseOwner[0]+") )", null, franchiseOwner[1], null);
                            }
                            else
                            {
                                userMap=AdminMgr.newInstance().getUsersDAO().getUsers("'0' OR (U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+fNo+") )", null, userNo, null);
                            }
                        }
                    }
                }else
                {
                    userMap= AdminMgr.newInstance().getUsersDAO().getUsers("1", dataKey, userNo, regionId);
                }
            }
        }catch(Exception e)
        {
            logger.error("Exception in getCreatedByMap() Method :::" ,e);
        }
        return userMap;
    }
    
    public static SequenceMap getTemplatesCreatedByMap(HttpServletRequest request,String templateType)
    {
        SequenceMap userMap = new SequenceMap();

        HttpSession session=request.getSession();
        String userNo=(String)session.getAttribute("user_no");
        String userLevel=(String)session.getAttribute("user_level");
        String regionId=(String)session.getAttribute("regionId");
        String divisionIds = (String)session.getAttribute("divisionIds");; 
        String fNo=(String)session.getAttribute("franchisee_no");
        String franchiseOwner[] = new String[2];
        String regionList="";
        String selectedFranchisee = request.getParameter("userType");

        //P_CM_B_82109 Starts
        if(StringUtil.isValidNew(selectedFranchisee) && !"0".equals(selectedFranchisee) && !"2".equals(selectedFranchisee)){
            templateType="location";
        } else {
            selectedFranchisee=null;
        }
        //P_CM_B_82109 Ends

        if("All".equals((String)request.getSession().getAttribute("franchisee_all"))&&"1".equals(userLevel))
        {
            franchiseOwner=CommonUtil.getFranchiseeAndOwner(request);
            regionList=CommonUtil.getRegionList(franchiseOwner[1]);
        }
        try
        {
        	StringBuilder sbQuery = new StringBuilder();
            if("0".equals(userLevel))
            {
            	if("corporate".equals(templateType))
            	{
            		sbQuery.append("'0' OR U.USER_LEVEL='2' ");
	            	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
	            	{
	            		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("'");
	            	}
            	}
            	else if("location".equals(templateType))
            	{
            		sbQuery.append("1");
	            }
            	else
            	{
	        		sbQuery.append("'0' OR U.USER_LEVEL='1' OR U.USER_LEVEL='2' ");
	            	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
	            	{
	            		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("'");
	            	}
            	}
            	userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(), selectedFranchisee, userNo, null);
            }
            else if("2".equals(userLevel))
            {
            	
            	if("corporate".equals(templateType))
            	{
	              	sbQuery.append("'0' ");
	            	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
	            	{
	            		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("' ");
	            	}
	            	sbQuery.append(" OR ( U.USER_LEVEL='2' AND F.AREA_ID="+regionId+" )");
            	}
            	else if("location".equals(templateType))
            	{
	            	sbQuery.append(" '1' AND F.AREA_ID="+regionId+" ");
	            }
            	else
            	{
	              	sbQuery.append("'0' ");
	            	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
	            	{
	            		sbQuery.append(" OR U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("' ");
	            	}
	            	sbQuery.append(" OR ((U.USER_LEVEL='1' OR U.USER_LEVEL='2') AND F.AREA_ID="+regionId+" )");
            	}
            	userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(), selectedFranchisee, userNo, null);
            }
            else if(Constants.USER_LEVEL_DIVISION.equals(userLevel))
            {
            	
            	if("corporate".equals(templateType))
            	{
            		sbQuery.append("'0' OR U.USER_LEVEL='2' ");
	            	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
	            	{
	            		sbQuery.append(" OR (U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("' ");
	            	}
	            	if(StringUtil.isValidNew(divisionIds))
	            	{
	            		sbQuery.append(" AND UDM.DIVISION_ID IN("+divisionIds+") ");
	            	}
	            	sbQuery.append(") ");
            	}
            	else if("location".equals(templateType))
            	{
            		sbQuery.append("U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)+") ");
	            }
            	else
            	{
	            	sbQuery.append("'0' OR (U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)+")) OR U.USER_LEVEL='2' ");
	            	if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED))
	            	{
	            		sbQuery.append(" OR (U.USER_LEVEL='").append(Constants.USER_LEVEL_DIVISION).append("' ");
	            	}
	            	if(StringUtil.isValidNew(divisionIds))
	            	{
	            		sbQuery.append(" AND UDM.DIVISION_ID IN("+divisionIds+") ");
	            	}
	            	sbQuery.append(") ");
            	}
                userMap=AdminMgr.newInstance().getUsersDAO().getUsers(sbQuery.toString(), selectedFranchisee, userNo, null);
            }else
            {
                if(StringUtil.isValid(franchiseOwner[0])&& StringUtil.isValid(franchiseOwner[1])&&StringUtil.isValid(regionList))
                {
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers("'0' OR (U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+franchiseOwner[0]+") )", null, franchiseOwner[1], null);
                }
                else
                {
                    userMap=AdminMgr.newInstance().getUsersDAO().getUsers("'0' OR (U.USER_LEVEL='1' AND F.FRANCHISEE_NO IN("+fNo+") )", null, userNo, null);
                }
            }
        }
        catch(Exception e)
        {
            logger.error("Exception in getCreatedByMap() Method :::" ,e);
        }
        return userMap;
    }

    public static String getUserTypeCombo(String userCat,String userLevel,String regionNo,boolean flag,boolean fromTemplateSummary, String filterValue,String cssName,String templateType)
    {
        StringBuffer userTypeCombo = new StringBuffer("");
        Info franInfo = null;
        String comboClass = cssName;
        String jsFunction1 = "\"getUserCombo('CREATED_BY',this.value,'userId',-1,'"+flag+"','"+fromTemplateSummary+"');\"";
        
        if("0".equals(userLevel) || Constants.USER_LEVEL_DIVISION.equals(userLevel))
        {
        	userTypeCombo.append("<select class=\""+comboClass+"\" name=\"userType\" id=\"userType\" onChange="+jsFunction1+" >");	
        	
        	
        	if("corporate".equals(templateType)){
        		
        		if(!FieldNames.THREE.equals(filterValue)) {
                	String userCat1=","+userCat+",";
                    userTypeCombo.append("<option value=\"-1\"");
                    if (StringUtil.isValid(userCat) && userCat1.contains(",-1,"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("All Users")).append("</option>");
                    userTypeCombo.append("<option value=\"0\"");
                    if (StringUtil.isValid(userCat) && userCat1.contains(",0,"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Corporate Users")).append("</option>");
                    userTypeCombo.append("<option value=\"2\"");
                    if (StringUtil.isValid(userCat) && userCat1.contains(",2,"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Regional Users")).append("</option>");
                }
        	
        	}
        	else if("location".equals(templateType)){
        		
                if((userLevel != null && Constants.USER_LEVEL_DIVISION.equals(userLevel))){
               	     String divisionIds= (String)StrutsUtil.getHttpSession().getAttribute("divisionIds");
               	    String fNo = null;
    	        	fNo=DivisionUtil.getAllDivisionFranchiseeNos(divisionIds);
                	franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingDivisionalUsers(fNo);
                }else{
                franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingUsers();
                } 

                if(!FieldNames.ZERO.equals(filterValue) && franInfo!=null && franInfo.size()>0)
                {
                    userTypeCombo.append("<option class=\"dropdown_list\" disabled=\"\" value=\"-1\"");
                    if (StringUtil.isValid(userCat) && userCat.contains("-1"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">------ " + LanguageUtil.getString("Franchise Locations") + " ------").append("</option>");
                    Iterator franItr = franInfo.getKeySetIterator();
                    while (franItr.hasNext())
                    {
                        String franKey = (String) franItr.next();
                        userTypeCombo.append("<option value=\"" + franKey + "\"");
                        if (StringUtil.isValid(userCat) && userCat.contains(franKey))
                        {
                            userTypeCombo.append(" selected ");
                        }
                        userTypeCombo.append(">" + franInfo.get(franKey) + "").append("</option>");
                    }
                }
        	
        	}
        	else
        	{
        	
        		if(!FieldNames.THREE.equals(filterValue)) {
                	String userCat1=","+userCat+",";
                    userTypeCombo.append("<option value=\"-1\"");
                    if (StringUtil.isValid(userCat) && userCat1.contains(",-1,"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("All Users")).append("</option>");
                    userTypeCombo.append("<option value=\"0\"");
                    if (StringUtil.isValid(userCat) && userCat1.contains(",0,"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Corporate Users")).append("</option>");
                    userTypeCombo.append("<option value=\"2\"");
                    if (StringUtil.isValid(userCat) && userCat1.contains(",2,"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Regional Users")).append("</option>");
                }
                if((userLevel != null && Constants.USER_LEVEL_DIVISION.equals(userLevel))){
               	     String divisionIds= (String)StrutsUtil.getHttpSession().getAttribute("divisionIds");
               	    String fNo = null;
    	        	fNo=DivisionUtil.getAllDivisionFranchiseeNos(divisionIds);
                	franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingDivisionalUsers(fNo);
                }else{
                franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingUsers();
                } 

                if(!FieldNames.ZERO.equals(filterValue) && franInfo!=null && franInfo.size()>0)
                {
                    userTypeCombo.append("<option class=\"dropdown_list\" disabled=\"\" value=\"F\"");
                    userTypeCombo.append(">------ " + LanguageUtil.getString("Franchise Locations") + " ------").append("</option>");
                    Iterator franItr = franInfo.getKeySetIterator();
                    while (franItr.hasNext())
                    {
                        String franKey = (String) franItr.next();
                        userTypeCombo.append("<option value=\"" + franKey + "\"");
                        if (StringUtil.isValid(userCat) && userCat.contains(franKey))
                        {
                            userTypeCombo.append(" selected ");
                        }
                        userTypeCombo.append(">" + franInfo.get(franKey) + "").append("</option>");
                    }
                }
        	}
        	
            userTypeCombo.append("</select>");
        }
        else if("2".equals(userLevel))
        {
            userTypeCombo.append("<select class=\""+comboClass+"\" name=\"userType\" id=\"userType\" onChange="+jsFunction1+">");
            
            if("corporate".equals(templateType)){
            	
            	if(!FieldNames.THREE.equals(filterValue)) {
                    userTypeCombo.append("<option value=\"-1\"");
                    if (userCat != null && userCat.trim().equals("-1"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("All Users")).append("</option>");
                    userTypeCombo.append("<option value=\"0\"");
                    if (userCat != null && userCat.trim().equals("0"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Corporate Users")).append("</option>");

                    userTypeCombo.append("<option value=\"2#"+regionNo+"\"");
                    if (userCat != null && (userCat.trim().equals("2") || userCat.indexOf("#")!=-1))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Regional Users")).append("</option>");
                }
            	
            }
            else if("location".equals(templateType)){
            	
                if(!FieldNames.ZERO.equals(filterValue) && !flag)
                {
                    franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingUsers(regionNo);
                    if(franInfo!=null && franInfo.size()>0)
                    {
                        userTypeCombo.append("<option class=\"dropdown_list\" disabled=\"\" value=\"\"");
                        userTypeCombo.append(">------ " + LanguageUtil.getString("Franchise Locations") + " ------").append("</option>");
                        if(!fromTemplateSummary)
                        {
                            userTypeCombo.append("<option class=\"dropdown_list\" value=\"3\"");
                            if (userCat != null && userCat.trim().equals("3"))
                            {
                                userTypeCombo.append(" selected ");
                            }
                            userTypeCombo.append(">"+LanguageUtil.getString("All Franchise Locations")).append("</option>");
                        }
                        Iterator franItr = franInfo.getKeySetIterator();
                        while (franItr.hasNext())
                        {
                            String franKey = (String) franItr.next();
                            userTypeCombo.append("<option value=\"" + franKey + "\"");
                            if (userCat != null && userCat.trim().equals(franKey))
                            {
                                userTypeCombo.append(" selected ");
                            }
                            userTypeCombo.append(">" + franInfo.get(franKey) + "").append("</option>");
                        }
                    }
                }
            	
            }
            else
            {
            	if(!FieldNames.THREE.equals(filterValue)) {
                    userTypeCombo.append("<option value=\"-1\"");
                    if (userCat != null && userCat.trim().equals("-1"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("All Users")).append("</option>");
                    userTypeCombo.append("<option value=\"0\"");
                    if (userCat != null && userCat.trim().equals("0"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Corporate Users")).append("</option>");

                    userTypeCombo.append("<option value=\"2#"+regionNo+"\"");
                    if (userCat != null && (userCat.trim().equals("2") || userCat.indexOf("#")!=-1))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Regional Users")).append("</option>");
                }
                if(!FieldNames.ZERO.equals(filterValue) && !flag)
                {
                    franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingUsers(regionNo);
                    if(franInfo!=null && franInfo.size()>0)
                    {
                        userTypeCombo.append("<option class=\"dropdown_list\" disabled=\"\" value=\"\"");
                        userTypeCombo.append(">------ " + LanguageUtil.getString("Franchise Locations") + " ------").append("</option>");
                        if(!fromTemplateSummary)
                        {
                            userTypeCombo.append("<option class=\"dropdown_list\" value=\"3\"");
                            if (userCat != null && userCat.trim().equals("3"))
                            {
                                userTypeCombo.append(" selected ");
                            }
                            userTypeCombo.append(">"+LanguageUtil.getString("All Franchise Locations")).append("</option>");
                        }
                        Iterator franItr = franInfo.getKeySetIterator();
                        while (franItr.hasNext())
                        {
                            String franKey = (String) franItr.next();
                            userTypeCombo.append("<option value=\"" + franKey + "\"");
                            if (userCat != null && userCat.trim().equals(franKey))
                            {
                                userTypeCombo.append(" selected ");
                            }
                            userTypeCombo.append(">" + franInfo.get(franKey) + "").append("</option>");
                        }
                    }
                }
            }
            
            
            userTypeCombo.append("</select>");
        }
        else if("1".equals(userLevel) && !fromTemplateSummary)
        {
        	
        	franInfo=AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingUsers(regionNo);
        	userTypeCombo.append("<select class=\""+comboClass+"\" name=\"userType\" id=\"userType\" onChange="+jsFunction1+">");
        	
        	if("corporate".equals(templateType))
        	{
        		
        		if(!FieldNames.THREE.equals(filterValue)) {
                    userTypeCombo.append("<option value=\"-1\"");
                    if (userCat != null && userCat.trim().equals("-1"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("All Users")).append("</option>");
                    userTypeCombo.append("<option value=\"0\"");
                    if (userCat != null && userCat.trim().equals("0"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Corporate Users")).append("</option>");
                }
                
            }
            else if("location".equals(templateType)){
            	
                if(!FieldNames.ZERO.equals(filterValue)) {
                    userTypeCombo.append("<option class=\"dropdown_list\" value=\"3\"");
                    if (userCat != null && userCat.trim().equals("3"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">"+LanguageUtil.getString("Franchise Users")).append("</option>");
                    userTypeCombo.append("</select>");
                }	
            	
            }
            else
            {
            	if(!FieldNames.THREE.equals(filterValue)) {
                    userTypeCombo.append("<option value=\"-1\"");
                    if (userCat != null && userCat.trim().equals("-1"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("All Users")).append("</option>");
                    userTypeCombo.append("<option value=\"0\"");
                    if (userCat != null && userCat.trim().equals("0"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">" + LanguageUtil.getString("Corporate Users")).append("</option>");
                }
                if(!FieldNames.ZERO.equals(filterValue)) {
                    userTypeCombo.append("<option class=\"dropdown_list\" value=\"3\"");
                    if (userCat != null && userCat.trim().equals("3"))
                    {
                        userTypeCombo.append(" selected ");
                    }
                    userTypeCombo.append(">"+LanguageUtil.getString("Franchise Users")).append("</option>");
                    userTypeCombo.append("</select>");
                }
            }
        	
            
        }
        return userTypeCombo.toString();
    }
    
    public static HashMap<String,String> stateCountriesMapImport() {
        HashMap<String,String> dataMap = getValueMap("REGIONS", "REGION_NO", "COUNTRY_ID", null, false, "REGION_NO");
        return dataMap;
    }

    public static HashMap<String,String> countriesMapImport() {
        HashMap<String,String> dataMap = getValueMap("COUNTRIES", "COUNTRY_ID", "LCASE(NAME)", null, true, "COUNTRY_ID");
        return dataMap;
    }

    public static SequenceMap<String,String> getLeadSource2MapForImport() {
        StringBuffer query = null;
        query = new StringBuffer("SELECT LEAD_SOURCE2_ID ,LEAD_SOURCE2_NAME FROM FS_LEAD_SOURCE2 WHERE FLAG='Y' AND LEAD_SOURCE2_ID != 7 UNION SELECT CONCAT('B7_',CONTACT_TYPE_ID) AS LEAD_SOURCE2_ID, CONTACT_TYPE_NAME AS LEAD_SOURCE2_NAME FROM FS_CONTACT_TYPE ORDER BY LEAD_SOURCE2_NAME");
        return SQLUtil.getSequenceMapFromQuery("LEAD_SOURCE2_NAME","LEAD_SOURCE2_ID",query.toString());
    }

    public static HashMap<String,String> getLeadSource2Map() {
        HashMap<String,String> dataMap = getValueMap("FS_LEAD_SOURCE2", "LEAD_SOURCE2_ID", "LEAD_SOURCE2_NAME", "FLAG='Y'", true,null);
        return dataMap;
    }

    public static String getLeadVerifyCombo(String comboName, String selectedIndex, String comboJScript, String features,HttpServletRequest request){
        return getLeadVerifyCombo(comboName, selectedIndex, comboJScript,features,request,null);
    }

    public static String getLeadVerifyCombo(String comboName, String selectedIndex, String comboJScript, String features,HttpServletRequest request,String isMultiple){
        StringBuilder combo = null;
        try{

            String value=LanguageUtil.getString("Select Email Verification",(String)request.getSession().getAttribute("userLanguage"));
            combo = new StringBuilder("");
            combo.append("<select name=\"");
            combo.append(comboName);
            combo.append("\"");
            combo.append(" id=\"").append(comboName).append("\"");
            if (comboJScript != null)
                combo.append(" onchange=\"").append(comboJScript).append("\"");

            if (features == null)
                features = "";

            combo.append(features);
            combo.append(" >");
            combo.append("<option value=\"Show All\"");
            if( selectedIndex ==null || (selectedIndex!=null && selectedIndex.equals("Show All")) ) combo.append(" selected ");
            combo.append(">").append(value).append("</option>");
            combo.append("<option value='valid'");
            if( selectedIndex!=null && selectedIndex.equals("valid")) combo.append(" selected ");
            combo.append(">Valid</option>");
            combo.append("<option value='invalid'");
            if( selectedIndex!=null && selectedIndex.equals("invalid")) combo.append(" selected ");
            combo.append(">Invalid</option>");
            combo.append("<option value='undetermined'");
            if( selectedIndex!=null && selectedIndex.equals("undetermined")) combo.append(" selected ");
            combo.append(">Undetermined</option>");
            combo.append("</select>");
            //}//end if
        }catch(Exception e)
        {
            logger.error("ERROR: exception in getLeadVerifyCombo ::" + e);
        }
        return combo.toString();
    }

    public static String getUserEmailAddres(String userNO) {
        String sbQuery ="";
        String userLevel = NewPortalUtils.getColumnFromTable("USERS", "USER_LEVEL", "USER_NO", userNO);

        if (userLevel != null && "1".equals(userLevel)){
            sbQuery = "SELECT FU.EMAIL_ID FROM FRANCHISEE_USERS FU, FRANCHISEE F,USERS A WHERE FU.FRANCHISEE_NO = F.FRANCHISEE_NO AND A.USER_IDENTITY_NO = FU.FRANCHISEE_USER_NO AND A.STATUS = '1' AND A.USER_NO='" + userNO + "'";
        } else {
            sbQuery = "SELECT EMAIL_ID FROM FRANCHISEE F LEFT JOIN USERS U ON U.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE U.USER_NO="+userNO;
        }
        //String sbQuery="SELECT EMAIL_ID FROM FRANCHISEE F LEFT JOIN USERS U ON U.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE U.USER_NO="+userNO;
        return SQLUtil.getQueryResult(sbQuery, "EMAIL_ID");
    }

    public static String getUserName(String userIdentificationNo)
    {
        String fullName=FieldNames.EMPTY_STRING;
        String query = FieldNames.EMPTY_STRING;
        String userType = FieldNames.EMPTY_STRING;
        String userIdNos	= FieldNames.EMPTY_STRING;
        String franchiseeNos= FieldNames.EMPTY_STRING;
        ResultSet rs=null;
        try
        {
            query = "SELECT USER_LEVEL,USER_IDENTITY_NO,FRANCHISEE_NO  FROM USERS WHERE USER_NO=?";
            rs = QueryUtil.getResult(query, new Object[]{userIdentificationNo});

            while(rs.next())
            {
                userType = rs.getString("USER_LEVEL");
                userIdNos = rs.getString("USER_IDENTITY_NO");
                franchiseeNos = rs.getString("FRANCHISEE_NO");
            }
            rs=null;
            if(userType.equals("0") || userType.equals("2") || userType.equals("3"))
            {
                query = "SELECT FIRST_NAME,LAST_NAME FROM FRANCHISEE WHERE FRANCHISEE_NO=?";
                rs = QueryUtil.getResult(query, new Object[]{franchiseeNos});

                while(rs.next())
                {
                    String firstName	= rs.getString("FIRST_NAME");
                    String lastName = rs.getString("LAST_NAME");
                    fullName	= firstName+" "+lastName;
                }
            }else
            {
                query = "SELECT FIRST_NAME,LAST_NAME FROM FRANCHISEE_USERS WHERE FRANCHISEE_USER_NO=?";
                rs = QueryUtil.getResult(query, new Object[]{userIdNos});

                while(rs.next())
                {
                    String firstName	= rs.getString("FIRST_NAME");
                    String lastName = rs.getString("LAST_NAME");
                    fullName	 = firstName+" "+lastName;
                }
            }
        }catch(Exception e)
        {
            logger.info("Error in getUserName()  :" + e.getMessage());//BBEH-20121030-071_101
        }
        finally {
            if(rs != null){
                rs.release();
                rs = null;
            }
        }

        return fullName;
    }

    public static boolean  generateContactAnalysisPDF(HttpServletRequest request){
        boolean successFullyGenerated=true;
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        try{
            String fileName =null;
            SequenceMap reportMap= (SequenceMap)request.getSession().getAttribute("reportMap");
            SequenceMap typeMap= (SequenceMap)request.getSession().getAttribute("typeMap");
            fileName = (String)request.getSession().getAttribute("fileName");
            String url = _baseConstants.BASE_URL + "/src/temp/"+fileName;
            com.lowagie.text.Image gif = com.lowagie.text.Image.getInstance(url);
            gif.scaleToFit(400, 400);

            String pdfOutputFile = null;
            Info sourceInfo= null;
            String source = null;
            String total = null;
            String week = null;

            Document document = new Document(PageSize.A4, 50, 50, 50, 50);
            pdfOutputFile = new StringBuffer(fileName.substring(0,fileName.indexOf("."))).append(".pdf").toString();
            File pdfFile = new File(_baseConstants.BASE_URL + "/src/temp/"+ pdfOutputFile);
            FileOutputStream fos = new FileOutputStream(pdfFile);
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            PdfWriter.getInstance( document, buffer );
            document.open();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            StringBuffer dateBuff= new StringBuffer();
            //dateBuff.append("(").append((String)request.getAttribute("dateFrom")).append(" - ").append((String)request.getAttribute("dateFrom")).append(")");
//			dateBuff.append("(").append((String)request.getAttribute("dateFrom")).append(" - ").append((String)request.getAttribute("dateTo")).append(")"); //P_CM_B_23218 By Ravi
            dateBuff.append("(").append((String)request.getAttribute("dateDisplaymessages")).append(")"); //P_CM_B_23218 By Ravi//P_CM_Reports_B_38357

            Paragraph blankLine = new Paragraph(" ");

            PdfPTable fddHeader = new PdfPTable(4);
            fddHeader.setWidthPercentage(100);
            //P_FDD_B_58388
            PdfPCell cellFdd = new PdfPCell(new Paragraph("Contact Source analysis"+dateBuff.toString(),FontFactory.getFont(FontFactory.HELVETICA, 10, Font.BOLD,new Color(0, 0,0)))); //ZCUB-20150417-141
            cellFdd.setBackgroundColor(new Color(0xC0, 0xC0, 0xC0));
            cellFdd.setColspan(4);
            cellFdd.setHorizontalAlignment(Element.ALIGN_CENTER);
            cellFdd.setVerticalAlignment(Element.ALIGN_CENTER);
            cellFdd.setFixedHeight(20);
            fddHeader.addCell(cellFdd);
            document.add(fddHeader);
            document.add(blankLine);
            document.add(blankLine);
            document.add(blankLine);

            String user_no= (String)request.getSession().getAttribute("user_no");
            String user_name = PortalUtils.getUserName(user_no);

            //For First Row User Name n Value
            PdfPTable sourceHeader = new PdfPTable(4);
            int sourceHeaderwidths[] = {20,30,20,30};   // percentage
            sourceHeader.setWidths(sourceHeaderwidths);
            sourceHeader.setWidthPercentage(100);   // percentage
            PdfPCell userName = new PdfPCell(new Paragraph("Report Generated By :", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0, 0, 0))));//Neha Parmar to add
            PdfPCell userValue = new PdfPCell(new Paragraph(user_name, FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0, 0, 0))));
            PdfPCell blankCell1 = new PdfPCell(blankLine);
            PdfPCell dateICell1 = new PdfPCell(blankLine);

            userName.setHorizontalAlignment(Element.ALIGN_RIGHT);
            userValue.setHorizontalAlignment(Element.ALIGN_LEFT);
            blankCell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            dateICell1.setHorizontalAlignment(Element.ALIGN_LEFT);

            dateICell1.setBorder(0);
            userName.setBorder(0);
            userValue.setBorder(0);
            blankCell1.setBorder(0);

            sourceHeader.addCell(userName);
            sourceHeader.addCell(userValue);
            sourceHeader.addCell(blankCell1);
            sourceHeader.addCell(dateICell1);
            document.add(sourceHeader);


            Calendar calendar = Calendar.getInstance();
            PdfPTable DateHeader = new PdfPTable(4);
            int dateHeaderwidths[] = {20,30,20,30};   // percentage
			/*sourceHeader.setWidths(dateHeaderwidths);
			sourceHeader.setWidthPercentage(100); */  // percentage
            //P_CM_B_24986 by Ravi
            DateHeader.setWidths(dateHeaderwidths);
            DateHeader.setWidthPercentage(100);
            //P_CM_B_24986 by Ravi
            PdfPCell dateToday = new PdfPCell(new Paragraph("Report Date :", FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0, 0, 0))));
            PdfPCell dateValue = new PdfPCell(new Paragraph(dateFormat.format(calendar.getTime()), FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD, new Color(0, 0, 0))));
            PdfPCell blankCell2 = new PdfPCell(blankLine);
            PdfPCell dateICell2 = new PdfPCell(blankLine);

            dateToday.setHorizontalAlignment(Element.ALIGN_RIGHT);
            dateValue.setHorizontalAlignment(Element.ALIGN_LEFT);
            blankCell2.setHorizontalAlignment(Element.ALIGN_LEFT);
            dateICell2.setHorizontalAlignment(Element.ALIGN_LEFT);

            dateICell2.setBorder(0);
            dateToday.setBorder(0);
            dateValue.setBorder(0);
            blankCell2.setBorder(0);

            dateToday.setColspan(1);
            DateHeader.addCell(dateToday);
            DateHeader.addCell(dateValue);
            DateHeader.addCell(blankCell2);
            DateHeader.addCell(dateICell2);
            document.add(DateHeader);
            document.add(blankLine);
            document.add(blankLine);

            //For Image Chart

            PdfPTable headerLogoTital = new PdfPTable(4);
            int headerwidthsLogoTital[] = {10,80,5,5};   // percentage
            headerLogoTital.setWidths(headerwidthsLogoTital);
            headerLogoTital.setWidthPercentage(100);   // percentage
            PdfPCell logo1Cell = new PdfPCell(gif);//Neha Parmar to add
            PdfPCell title1Cell = new PdfPCell(blankLine);
            PdfPCell blankCell = new PdfPCell(blankLine);
            PdfPCell dateICell = new PdfPCell(blankLine);

            logo1Cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            title1Cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
            blankCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            dateICell.setHorizontalAlignment(Element.ALIGN_RIGHT);

            dateICell.setBorder(0);
            logo1Cell.setBorder(0);
            title1Cell.setBorder(0);
            blankCell.setBorder(0);

            dateICell.setColspan(1);
            headerLogoTital.addCell(title1Cell);
            headerLogoTital.addCell(logo1Cell);
            headerLogoTital.addCell(blankCell);
            headerLogoTital.addCell(dateICell);
            document.add(headerLogoTital);
            document.add(blankLine);

            int size=typeMap.size();
            float width=83/(size);

            float rColsWidth[] = new float[size+1];
            rColsWidth[0]=17;

            for(int m = 1; m<size+1;m++)
            {
                rColsWidth[m] = width;
            }

            PdfPTable rTable = new PdfPTable(rColsWidth);
            rTable.setWidthPercentage(100);

            if(typeMap!=null && typeMap.size()>0)
            {
                PdfPCell cellN = new PdfPCell(new Paragraph("Source", FontFactory.getFont(FontFactory.HELVETICA, 5, Font.BOLD, new Color(0, 0, 0))));
                cellN.setBackgroundColor(new Color(0xC0, 0xC0, 0xC0));
                cellN.setHorizontalAlignment(Element.ALIGN_CENTER);
                cellN.setVerticalAlignment(Element.ALIGN_CENTER);
                //cellR.setColspan(2);
                cellN.setFixedHeight(20);
                rTable.addCell(cellN);

                cellN = new PdfPCell(new Paragraph("Total", FontFactory.getFont(FontFactory.HELVETICA,5, Font.BOLD, new Color(0, 0, 0))));
                cellN.setBackgroundColor(new Color(0xC0, 0xC0, 0xC0));
                cellN.setHorizontalAlignment(Element.ALIGN_CENTER);
                cellN.setVerticalAlignment(Element.ALIGN_CENTER);
                cellN.setFixedHeight(25);
                rTable.addCell(cellN);

                //P_CM_B_27918 by Ravi
                String []token1=null;
                String token2=null;
                String token3=null;
                String interval=null;
                //P_CM_B_27918 by Ravi

                for (int j=1; j< typeMap.size(); j++){
                    Info gridInfo1=null;
                    gridInfo1=(Info)typeMap.get(j);
                    //P_CM_B_27918 by Ravi
                    token1=gridInfo1.get("week"+j).split("to");
                    token2=token1[0];
                    token3=token1[1];

                    token2=DateUtil.getDateFormatChanged(token2,_baseConstants.DISPLAY_FORMAT,"yyyy/MM/dd");//P_B_CM_36203
                    token3=DateUtil.getDateFormatChanged(token3,_baseConstants.DISPLAY_FORMAT,"yyyy/MM/dd");//P_B_CM_36203
                    interval=token2+" to "+token3;
                    //P_CM_B_27918 by Ravi
                    cellN = new PdfPCell(new Paragraph(interval, FontFactory.getFont(FontFactory.HELVETICA, 5, Font.BOLD, new Color(0, 0, 0))));
                    cellN.setBackgroundColor(new Color(0xC0, 0xC0, 0xC0));
                    cellN.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cellN.setVerticalAlignment(Element.ALIGN_CENTER);
                    cellN.setFixedHeight(20);
                    rTable.addCell(cellN);
                }
            }

            //P_FDD_E_22092010 starts

            if(reportMap!=null && reportMap.size()>0)
            {
                PdfPCell cellR =null;
                for (int i = 0; i < reportMap.size(); i++) {
                    sourceInfo = new Info();
                    sourceInfo = (Info) reportMap.get(i);
                    source = sourceInfo.getString("source");
                    total = sourceInfo.getString("total");
                    week = sourceInfo.getString("mailTemplateSubject");

                    cellR = new PdfPCell(new Paragraph(source, FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL, new Color(0, 0, 0))));
                    cellR.setVerticalAlignment(Element.ALIGN_CENTER);
                    cellR.setFixedHeight(10);
                    rTable.addCell(cellR);

                    cellR = new PdfPCell(new Paragraph(total, FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL, new Color(0, 0, 0))));
                    cellR.setVerticalAlignment(Element.ALIGN_CENTER);
                    cellR.setFixedHeight(10);
                    rTable.addCell(cellR);

                    for (int j=1; j< typeMap.size(); j++){
                        Info gridInfo=null;
                        gridInfo=(Info)typeMap.get(j);
                        cellR = new PdfPCell(new Paragraph(sourceInfo.get(gridInfo.get("name")), FontFactory.getFont(FontFactory.HELVETICA, 5, Font.NORMAL, new Color(0, 0, 0))));
                        cellR.setFixedHeight(10);
                        cellR.setVerticalAlignment(Element.ALIGN_CENTER);
                        rTable.addCell(cellR);
                    }
                }
            }

            document.add(rTable);
            document.close();
            //P_FDD_E_22092010 ends
            byte[] bytes = buffer.toByteArray();

            for( int i = 0; i < bytes.length; i++ ) {
                fos.write(bytes[i]);
            }
            fos.close();
        }catch(Exception e)
        {
            successFullyGenerated=false;
            logger.error("Exception in generateContactAnalysisPDF()..",e);
        }
        return successFullyGenerated;

    }

    public static SequenceMap getFranchiseeMuUserComboMap(String multiple, String franchiseeNo ){
        SequenceMap returnMap		= new SequenceMap();
        //ArrayList corpList			= null;
        ArrayList franList			= null;
        //ArrayList regnList          = null;
        try{

//			franList = CacheDataUtil.getMessageUsers("franchisee");
            franList = AdminMgr.newInstance().getUsersDAO().getUsers("1", false);
            //P_CM_B_23006 starts by Prashant Malik
            String key="",value="";
            Info muFranUserInfo=null;
            if(StringUtil.isValidNew(franchiseeNo)){
                muFranUserInfo=AdminMgr.newInstance().getUsersDAO().getUserInfoForMUID(franchiseeNo);
            }
            Iterator it=null;
            //P_CM_B_23006 ends by Prashant Malik
            if(!"pilotallcorporate".equals(franchiseeNo)){//marketing_pilot added by Ravi
                if(franList != null && franList.size() >0){
                    int size			= franList.size();
                    UserInfo userInfo	= null;
                    String fno="";
                    if(franchiseeNo.contains(",")){
                        StringTokenizer tokenizer =new StringTokenizer(franchiseeNo,",");
                        while(tokenizer.hasMoreTokens()){
                            fno=(String)tokenizer.nextToken();
                            for(int i = 0 ; i < size; i++){
                                userInfo		= (UserInfo)franList.get(i);
                                if(fno != null && userInfo.franchiseNo.equals(fno)){
                                    returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                                }else  if(fno.equals("null") || fno.length()<=0 || fno == null || (fno != null && userInfo.franchiseNo.trim().equals("")))
                                {
                                    returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                                }
                            }
                        }
                    }else{
                        for(int i = 0 ; i < size; i++){
                            userInfo		= (UserInfo)franList.get(i);
                            if(franchiseeNo != null && userInfo.franchiseNo.equals(franchiseeNo)){
                                returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                            }else  if(franchiseeNo.equals("null") || franchiseeNo.length()<=0 || franchiseeNo == null || (franchiseeNo != null && userInfo.franchiseNo.trim().equals(""))) //if(franchiseeNo == null || (franchiseeNo != null && userInfo.franchiseNo.trim().equals("")))
                            {
                                returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                            }
                        }
                    }
                }
                //P_CM_B_23006 starts by Prashant Malik	
                if(muFranUserInfo!=null && muFranUserInfo.size()>0){
                    it = muFranUserInfo.getKeySetIterator();
                    while(it.hasNext())
                    {
                        key = (String)it.next();
                        value = (String)muFranUserInfo.get(key);
                        returnMap.put(key , value);
                    }

                }
                //P_CM_B_23006 ends by Prashant Malik
            }
        }catch(Exception e){
            logger.info("Exception while getting data from cacheDataUtil:", e);
        }

        return returnMap;
    }
    public static SequenceMap getFranchiseeUserComboMap(String multiple, String franchiseeNo){

        return getFranchiseeUserComboMap(multiple,franchiseeNo,null);
    }

    public static SequenceMap getFranchiseeUserComboMap(String multiple, String franchiseeNo,String userLevel){
        SequenceMap returnMap		= new SequenceMap();
        ArrayList corpList			= null;
        ArrayList franList			= null;
        ArrayList regnList          = null;
        try{

            if(multiple == null &&( franchiseeNo == null  || franchiseeNo.equals("null") || franchiseeNo.length()<=0 || franchiseeNo.indexOf("pilotallcorporate")!=-1)){//MP_BUG_48763

//			corpList            = CacheDataUtil.getMessageUsers("CMcorporate");
//			regnList			=CacheDataUtil.getMessageUsers("regional");
                corpList            = AdminMgr.newInstance().getUsersDAO().getUsers("0", true);
                regnList			=AdminMgr.newInstance().getUsersDAO().getUsers("2", false);
                if(corpList != null && corpList.size() >0){
                    returnMap.put("C","-----"+LanguageUtil.getString("Corporate User")+"-----"); //Select All Changes 
                    int size            = corpList.size();
                    UserInfo userInfo   = null;
                    for(int i = 0 ; i < size; i++){
                        userInfo        = (UserInfo)corpList.get(i);
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName );
                    }
                }
                //MP_BUG_48763 end
                if(franchiseeNo.indexOf("pilotallcorporate")==-1){//marketing_pilot added by Ravi
                    if(regnList != null && regnList.size() >0){
                        returnMap.put("R","-----"+LanguageUtil.getString("Regional User")+"-----");//Select All Changes 
                        int size            = regnList.size();
                        UserInfo userInfo   = null;
                        for(int i = 0 ; i < size; i++){
                            userInfo        = (UserInfo)regnList.get(i);
                            returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName );
                        }
                    }
                }

                //MP_BUG_48763 start
                if(franchiseeNo.indexOf("pilotallcorporate,")!=-1){
                    franchiseeNo=franchiseeNo.substring( franchiseeNo.indexOf(",")+1);
                }
            }else if(ModuleUtil.zcubatorImplemented() && Constants.USER_LEVEL_DIVISION.equals((String)StrutsUtil.getHttpSession().getAttribute("user_level"))){
            	
            	regnList			=AdminMgr.newInstance().getUsersDAO().getUsers("2", false);
            	  if(regnList != null && regnList.size() >0){
                        returnMap.put("R","-----"+LanguageUtil.getString("Regional User")+"-----");
                        int size            = regnList.size();
                        UserInfo userInfo   = null;
                        for(int i = 0 ; i < size; i++){
                            userInfo        = (UserInfo)regnList.get(i);
                            returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName );
                        }
                    }
                }

//		franList = CacheDataUtil.getMessageUsers("franchisee");
            franList = AdminMgr.newInstance().getUsersDAO().getUsers("1", false);
            //P_CM_B_23006 starts by Prashant Malik
            String key="",value="";
            Info muFranUserInfo=null;
            if(StringUtil.isValidNew(franchiseeNo)){
                muFranUserInfo=AdminMgr.newInstance().getUsersDAO().getUserInfoForMUID(franchiseeNo);
            }

            Iterator it=null;
            //P_CM_B_23006 ends by Prashant Malik
            if(!franchiseeNo.trim().equals("pilotallcorporate")){
                if(franList != null && franList.size() >0){
                    if(!"1".equals(userLevel))
                        returnMap.put("F","-----"+LanguageUtil.getString("Franchise User")+"-----"); //Select All Changes 

                    int size			= franList.size();
                    UserInfo userInfo	= null;
                    String fno="";
                    if(franchiseeNo!=null && franchiseeNo.contains(",")){
                        StringTokenizer tokenizer =new StringTokenizer(franchiseeNo,",");
                        while(tokenizer.hasMoreTokens()){
                            fno=(String)tokenizer.nextToken();
                            for(int i = 0 ; i < size; i++){
                                userInfo		= (UserInfo)franList.get(i);
                                if(fno != null && userInfo.franchiseNo.equals(fno)){
                                    returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                                }else  if(fno.equals("null") || fno.length()<=0 || fno == null || (fno != null && userInfo.franchiseNo.trim().equals("")))
                                {
                                    returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                                }
                            }
                        }
                    }else{

                        for(int i = 0 ; i < size; i++){
                            userInfo		= (UserInfo)franList.get(i);
                            if(franchiseeNo != null && userInfo.franchiseNo.equals(franchiseeNo)){
                                returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                            }else  if(franchiseeNo==null || franchiseeNo.length()<=0 || "null".equals(franchiseeNo) || (franchiseeNo != null && userInfo.franchiseNo.trim().equals(""))) //if(franchiseeNo == null || (franchiseeNo != null && userInfo.franchiseNo.trim().equals("")))
                            {
                                returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);

                            }
                        }
                    }
                }
                //P_CM_B_23006 starts by Prashant Malik	
                if(muFranUserInfo!=null && muFranUserInfo.size()>0){
                    it = muFranUserInfo.getKeySetIterator();
                    while(it.hasNext())
                    {
                        key = (String)it.next();
                        value = (String)muFranUserInfo.get(key);
                        returnMap.put(key , value);
                    }

                }
                //P_CM_B_23006 ends by Prashant Malik

            }
        }catch(Exception e){
            e.printStackTrace();
            logger.info("Exception while getting data from cacheDataUtil:", e);
        }

        return returnMap;
    }

    public static SequenceMap getRegionsUser(String multiple, String areaID,String type){
        SequenceMap returnMap		= new SequenceMap();
        ArrayList franList			= null;
        ArrayList regnList          = null;
        try
        {
            if("franchisee".equals(type) || "all".equals(type) || type==null)
//				franList			= CacheDataUtil.getMessageUsers("franchisee");
                franList			= AdminMgr.newInstance().getUsersDAO().getUsers("1", false);
            if("regional".equals(type) || "all".equals(type) || type==null)
//				regnList			=CacheDataUtil.getMessageUsers("regional");	 
                regnList			=AdminMgr.newInstance().getUsersDAO().getUsers("2", false);


            if(regnList!=null && regnList.size()>0)
            {
                returnMap.put("R","-----Regional User-----");
                int size			= regnList.size();
                for(int i = 0 ; i < size; i++){
                    UserInfo userInfo		= (UserInfo)regnList.get(i);
                    if(areaID != null && userInfo.areaID.equals(areaID)){
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                    }else  if(areaID.equals("null") || areaID.equals("-1") || areaID.length()<=0 || areaID == null || (areaID != null && userInfo.areaID.trim().equals("")))
                    {
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                    }
                }
            }

            if(franList != null && franList.size() >0){
                returnMap.put("F","-----Franchise User-----");
                int size			= franList.size();
                UserInfo userInfo	= null;
                for(int i = 0 ; i < size; i++){
                    userInfo		= (UserInfo)franList.get(i);
                    if(areaID != null && userInfo.areaID != null && userInfo.areaID.equals(areaID)){
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                    }else  if(areaID == null || areaID.equals("null") || areaID.equals("-1")|| areaID.length()<=0 || userInfo.areaID == null || (areaID != null && userInfo.areaID.trim().equals("")))
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                }
            }

            //P_CM_B_29013 starts by Ravi
            String key="",value="";


            Info muFranUserInfo=null;
            if(StringUtil.isValidNew(areaID)){
                muFranUserInfo=AdminMgr.newInstance().getUsersDAO().getAllRegionFranchiseeUsers(areaID);
            }

            Iterator it=null;
            if(muFranUserInfo!=null && muFranUserInfo.size()>0){
                it = muFranUserInfo.getKeySetIterator();
                while(it.hasNext())
                {
                    key = (String)it.next();
                    value = (String)muFranUserInfo.get(key);
                    if(!returnMap.containsKey(key))
                        returnMap.put(key , value);
                }

            }
            //P_CM_B_29013 ends by Ravi 


        }catch(Exception e){
            logger.info("Exception in  cacheDataUtil getRegionsUser", e);
        }

        return returnMap;
    }

    
    public static SequenceMap getUsersForDivision(String divisionIds,String userNo){

    	SequenceMap returnMap		= new SequenceMap();
        ArrayList regnList          = null;
        
        String franchiseeForDivision= DivisionUtil.getAllDivisionFranchiseeNos(divisionIds);
        try
        {

        	regnList			=AdminMgr.newInstance().getUsersDAO().getUsers("2", false);
            if(regnList!=null && regnList.size()>0)
            {
                returnMap.put("R","-----Regional User-----");
                //returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                /*Info divisionalUserInfo= AdminMgr.newInstance().getUsersDAO().getUserInfo( userNo, "6");
                if(divisionalUserInfo!=null)
                {
                    returnMap.put(userNo,divisionalUserInfo.get(FieldNames.FIRST_NAME)+" "+divisionalUserInfo.get(FieldNames.LAST_NAME));
                }*/

                int size			= regnList.size();
                for(int i = 0 ; i < size; i++){
                    UserInfo userInfo		= (UserInfo)regnList.get(i);
              
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
              
                }
            }
        	if(StringUtil.isValid(franchiseeForDivision))
        	{
                returnMap.put("F","-----Franchise User-----");
                returnMap.putAll(getFranchiseeMuUserComboMap(null,franchiseeForDivision));
        	}            

        }catch(Exception e){
            logger.info("Exception in  cacheDataUtil getRegionsUser", e);
        }

        return returnMap;

    }
    
    
    //P_CM_BUG_32790 starts
    public static SequenceMap getRegionsUserForCMImport(String multiple, String areaID,String type){
        SequenceMap returnMap		= new SequenceMap();
        ArrayList franList			= null;
        ArrayList regnList          = null;
        try
        {
            if("franchisee".equals(type) || "all".equals(type) || type==null)
//				franList			= CacheDataUtil.getMessageUsers("franchisee");
                franList			= AdminMgr.newInstance().getUsersDAO().getUsers("1", false);
            if("regional".equals(type) || "all".equals(type) || type==null)
//				regnList			=CacheDataUtil.getMessageUsers("regional");	 
                regnList			=AdminMgr.newInstance().getUsersDAO().getUsers("2", false);


            if(regnList!=null && regnList.size()>0)
            {
                returnMap.put("R","-----Regional User-----");
                int size			= regnList.size();
                for(int i = 0 ; i < size; i++){
                    UserInfo userInfo		= (UserInfo)regnList.get(i);
                    if(areaID != null && userInfo.areaID.equals(areaID)){
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                    }else  if(areaID.equals("null") || areaID.equals("-1") || areaID.length()<=0 || areaID == null || (areaID != null && userInfo.areaID.trim().equals("")))
                    {
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                    }
                }
            }

            if(franList != null && franList.size() >0){
                returnMap.put("F","-----Franchise User-----");
                int size			= franList.size();
                UserInfo userInfo	= null;
                for(int i = 0 ; i < size; i++){
                    userInfo		= (UserInfo)franList.get(i);
                    if(areaID != null && userInfo.areaID.equals(areaID)){
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                    }else  if(areaID.equals("null") || areaID.equals("-1")|| areaID.length()<=0 || areaID == null || (areaID != null && userInfo.areaID.trim().equals("")))
                        returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                }
            }
        }catch(Exception e){
            logger.info("Exception in  cacheDataUtil getRegionsUser", e);
        }

        return returnMap;
    }
    //P_CM_BUG_32790 ends
    

    public static String convertTime(String dateTime)throws Exception
    {
        String sTime = dateTime.substring(0,2);
        String sMinute = dateTime.substring(3,5);

        if (sTime != null)
            sTime = sTime.trim();

        if (sMinute != null)
            sMinute = sMinute.trim();

        int scheduledTimeInt = Integer.parseInt(sTime);
        int scheduledMinuteInt = Integer.parseInt(sMinute);
        int apmInt = 0;

        if(scheduledTimeInt > 12)
        {
            scheduledTimeInt=scheduledTimeInt-12;
            apmInt=1;
        }

        if(scheduledTimeInt == 12)
        {
            apmInt=1;
        }

        StringBuffer displayTime = new StringBuffer();

        if(scheduledTimeInt < 10)
        {
            displayTime.append("0");
            displayTime.append(scheduledTimeInt);
        }else
            displayTime.append(scheduledTimeInt);

        displayTime.append(":");

        if(scheduledMinuteInt < 10)
        {
            displayTime.append("0");
            displayTime.append(scheduledMinuteInt);
        }else
            displayTime.append(scheduledMinuteInt);

        displayTime.append(" ");

        if(apmInt == 0)
        {
            displayTime.append("AM");
        }else
            displayTime.append("PM");

        return displayTime.toString();

    }

    /**
     * P_E_FDD_2881
     * @author Vivek Maurya
     */
    public static String searchUfocLeadsByName(String key,String sBaseUrl,String sortOrder,String privGranted,String ownerNo,HttpServletRequest request) {
    	return searchUfocLeadsByName(key, sBaseUrl, sortOrder, privGranted, ownerNo, request,false);
    }
    public static String searchUfocLeadsByName(String key,String sBaseUrl,String sortOrder,String privGranted,String ownerNo,HttpServletRequest request,boolean fromTopSearch) {
        String namesAndIds = null;
        String searchQuery = NewPortalUtils.getUfocSearchNames(key);
        SequenceMap ufocLeadSummaryMap = null;
        try
        {
            ufocLeadSummaryMap = CommonMgr.newInstance().getCommonFsDAO().getUfocLeadSMap(sBaseUrl,searchQuery,sortOrder,null,privGranted,ownerNo,request,null,fromTopSearch,key);
        }
        catch(Exception e)
        {
            logger.info("Exception in getting ufocleadsummarymap----------->>"+e);
        }
        if(ufocLeadSummaryMap!=null)
        {
            ufocLeadSummaryMap.remove("totalRecords");
            int size = ufocLeadSummaryMap.size();

            String name ="", leadids = "",scheduleIds = "";

            Info tempInfo = null;
            for(int i=0;i<size;i++)
            {
                String lastname ="";
                String firstname ="";
                tempInfo = new Info();
                tempInfo = (Info)ufocLeadSummaryMap.get(i);

                firstname = tempInfo.getString(FieldNames.FIRST_NAME);
                lastname = tempInfo.getString(FieldNames.LAST_NAME);

                if(firstname==null || firstname.equalsIgnoreCase("null")){firstname="";}
                if(lastname ==null || lastname.equalsIgnoreCase("null")){lastname ="";}

                if(lastname!= null) lastname = lastname.replaceAll("\"","\\\\\"");
                if(firstname!= null) firstname = firstname.replaceAll("\"","\\\\\"");

                name = name +"\""+firstname+" "+lastname+"\""+",";
                leadids = leadids +"\""+tempInfo.getString(FieldNames.LEAD_ID)+"\""+",";
                scheduleIds = scheduleIds +"\""+tempInfo.getString(FieldNames.SCHEDULE_ID)+"\""+",";
            }
            if(name != null & name.length()>1)
                name = name.substring(0, name.length()-1);

            if(leadids != null & leadids.length()>1)
                leadids = leadids.substring(0, leadids.length()-1);

            if(scheduleIds != null & scheduleIds.length()>1)
                scheduleIds = scheduleIds.substring(0, scheduleIds.length()-1);

            namesAndIds = name+"), new Array("+leadids+"),new Array("+scheduleIds+"));";
        }

        return namesAndIds;
    }
    public static SequenceMap getComboMap(String id, String value, String tablename, String [] wherefields, String wherevalues[],String orderBy) {
    	return getComboMap(id, value, tablename,  wherefields,  wherevalues, orderBy,false);
    }
    public static SequenceMap getComboMap(String id, String value, String tablename, String [] wherefields, String wherevalues[],String orderBy, boolean isValidValue) {//P_CM_B_80726
        SequenceMap sMap = null;
        ResultSet result = null;
        StringBuffer query = new StringBuffer("SELECT ");

        query.append(id);
        query.append(", ");
        query.append(value);
        query.append(" FROM "+tablename);

        StringBuffer whereQuery		= new StringBuffer();

        if(wherefields != null && wherefields.length > 0)
        {
            boolean whereNeeded = true;
            for(int i=0 ; i< wherefields.length ; i++)
            {
                if(!wherevalues[i].trim().equals("")){
                    whereQuery.append(whereNeeded? " WHERE " :" AND ");
                    whereNeeded = false;
                    whereQuery.append(wherefields[i]);
                    if(StringUtil.isValid(wherevalues[i]))
                    {
	                    if(wherevalues[i].indexOf(',')!=-1){
	                        whereQuery.append(" IN (");
	                        whereQuery.append(wherevalues[i]+" )");
	                    }else{
	                        whereQuery.append(" ='");
	                        whereQuery.append(wherevalues[i]+"'");
	                    }
                   }
                }
            }
        }
        if(isValidValue){
        	whereQuery.append(" AND ").append(value).append(" IS NOT NULL").append(" AND ").append(value).append(" <>''");
        }
        query					= query.append(whereQuery);
        query					= query.append(" ORDER BY ");
        query.append(orderBy);
        logger.info("getComboMap query :" + query.toString());

        try {

            result = QueryUtil.getResult(query.toString(), null);
            if(result!= null){
                sMap = new SequenceMap();
                while (result.next()) {
                    sMap.put(result.getString(1), result.getString(2));
                }
            }


        } catch (Exception e) {
            logger.error("Exception in AjaxDAO Class in getComboMap() Method :::" +e.getMessage());

        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return sMap;

    }

    public static SequenceMap getSource3Map(String source2ID,String franNo, boolean fromPPCSettings){
        SequenceMap combo		=	new SequenceMap();
        ResultSet result		= null;
        try{
            //String userLvl="";
            StringBuffer	query	= null;

            String sortAlpha = "";
            if(!StringUtil.isValidNew(franNo)){
                franNo="1";
            }
            //Deconet-20120917-709 starts
            //query	= new StringBuffer("SELECT CM_SOURCE_3_ID,CM_SOURCE_3_NAME,F.FRANCHISEE_NAME FROM CM_SOURCE_3 C LEFT JOIN FRANCHISEE F ON C.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE 1=1 ");
            query	= new StringBuffer("SELECT CM_SOURCE_3_ID,CM_SOURCE_3_NAME,C.FRANCHISEE_NO,F.FRANCHISEE_NAME FROM CM_SOURCE_3 C");
            query.append(" LEFT JOIN CM_SUB_CATAGORY_SORT_ID SS  ON C.CM_SOURCE_3_ID = SS.SUB_CATAGORY_ID");
            query.append(" LEFT JOIN FRANCHISEE F ON C.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE 1=1 ");
            //Deconet-20120917-709 ends

            query.append(" AND CATAGORY_ID ='").append(source2ID).append("'");
            //client Your Plumber starts
            if(!"1".equals(franNo)){
                query.append(" AND SS.USER_NO IN(").append(franNo).append(")");//ZCB-20141006-036
            }
            //client Your Plumber ends		
            //SMC-20140224-392 starts
            if(fromPPCSettings)
            {
                query.append(" AND SS.USER_NO IN(").append(franNo).append(")");//ZCB-20141006-036
            }
            //SMC-20140224-392 ends
            //Deconet-20120917-709 starts
            //query.append(" ORDER BY  CM_SOURCE_3_NAME ");
            sortAlpha = NewPortalUtils.getColumnFromTable("CM_SUB_CATAGORY_SORT_ID", "SORT_ALPHA", "USER_NO", franNo);
            query.append(" GROUP BY SS.SUB_CATAGORY_ID");
            if("Y".equals(sortAlpha)){
                query.append(" ORDER BY C.CM_SOURCE_3_NAME");
            }else{
                query.append(" ORDER BY ORDER_NO ");
            }
            //Deconet-20120917-709 ends

            result			= QueryUtil.getResult(query.toString(), null);
            while(result.next()){
                //Deconet-20120917-707 Nishant Added check for webrizon
                if(StringUtil.isRequestParamValid(result.getString("FRANCHISEE_NAME")) && !"1".equals(result.getString("FRANCHISEE_NO")))
                    combo.put(result.getString(1),result.getString("CM_SOURCE_3_NAME")+"("+result.getString("FRANCHISEE_NAME")+")");
                else
                    combo.put(result.getString(1),result.getString("CM_SOURCE_3_NAME"));
            }
        }
        catch(Exception e){
            logger.info("Exception at "+e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return combo;
    }

    public static SequenceMap getFranchiseeUserOnlyComboMap(String multiple, String franchiseeNo ){
        SequenceMap returnMap		= new SequenceMap();
        ArrayList franList			= null;
        try{

//			franList			= CacheDataUtil.getMessageUsers("franchisee");
            franList			= AdminMgr.newInstance().getUsersDAO().getUsers("1", false);

            if(franList != null && franList.size() >0){
                int size			= franList.size();
                UserInfo userInfo	= null;
                String fno="";
                if(franchiseeNo.contains(",")){
                    StringTokenizer tokenizer =new StringTokenizer(franchiseeNo,",");
                    while(tokenizer.hasMoreTokens()){
                        fno=(String)tokenizer.nextToken();
                        for(int i = 0 ; i < size; i++){
                            userInfo		= (UserInfo)franList.get(i);
                            if(fno != null && userInfo.franchiseNo.equals(fno)){
                                returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                            }else  if(fno.equals("null") || fno.length()<=0 || fno == null || (fno != null && userInfo.franchiseNo.trim().equals("")))
                            {
                                returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                            }
                        }
                    }
                }else{
                    for(int i = 0 ; i < size; i++){
                        userInfo		= (UserInfo)franList.get(i);
                        //added for P_B_CT_25415 by Prakriti starts
                        Info muFranUserInfo=null;
                        if(StringUtil.isValid(franchiseeNo)){
                            muFranUserInfo=AdminMgr.newInstance().getUsersDAO().getUserInfoForMUID(franchiseeNo);
                        }
                        Iterator it=null;
                        String key="",value="";
                        //ends here
                        if(franchiseeNo != null && userInfo.franchiseNo.equals(franchiseeNo)){
                            returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                        }else  if(franchiseeNo.equals("null") || franchiseeNo.length()<=0 || franchiseeNo == null || (franchiseeNo != null && userInfo.franchiseNo.trim().equals(""))) //if(franchiseeNo == null || (franchiseeNo != null && userInfo.franchiseNo.trim().equals("")))
                        {
                            returnMap.put(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName);
                        }
                        //added for P_B_CT_25415 by Prakriti starts
                        if(muFranUserInfo!=null && muFranUserInfo.size()>0){
                            it = muFranUserInfo.getKeySetIterator();
                            while(it.hasNext())
                            {
                                key = (String)it.next();
                                value = (String)muFranUserInfo.get(key);
                                returnMap.put(key , value);
                            }
                        }
                        //ends here
                    }
                }
            }

        }catch(Exception e){
            logger.info("Exception while getting data from cacheDataUtil:", e);
        }

        return returnMap;
    }

    public static SequenceMap  getForumGroupIdMap(String forumCategoryID) {
        StringBuffer query =new StringBuffer("SELECT CG.GroupID,FG.GroupName FROM mvnforumCategoryGroup CG ,mvnforumGroups FG WHERE CG.GroupID = FG.GroupID");
        if(forumCategoryID!=null && !"".equals(forumCategoryID)) {
            query.append(" AND CategoryID =");
            query.append(forumCategoryID);
        }
        query.append(" ORDER BY GroupName");

        return SQLUtil.getSequenceMapFromQuery("GroupID","GroupName",query.toString());
    }


    public static SequenceMap getTeamList(String id,String fran_no){
        SequenceMap teamMap = new SequenceMap();
        StringBuffer query = new StringBuffer("SELECT DISTINCT(T.TEAM_ID), T.TEAM_NAME, TM.USER_NO FROM TEAM_USER  T LEFT JOIN TEAM_USER_MAPPING TM ON T.TEAM_ID=TM.MAP_KEY WHERE T.FRANCHISEE_NO = "+fran_no);

        com.home.builderforms.sqlqueries.ResultSet result = QueryUtil.getResult(query.toString(), null);
        while(result.next())
        {
            String userNoStr = result.getString("USER_NO");
            if(userNoStr!=null && userNoStr.trim().length()>0)
            {
                StringBuffer queryUsers = new StringBuffer("SELECT SUM(CASE IS_SCHEDULER_USER WHEN 'Y' THEN 1 ELSE 0 END) AS CNT FROM USERS WHERE USER_NO IN (");
                queryUsers.append(userNoStr);
                queryUsers.append(")");
                com.home.builderforms.sqlqueries.ResultSet result1 = QueryUtil.getResult(queryUsers.toString(), new Object[]{});
                while(result1.next() && result1.getString("CNT")!=null)
                {
                    String cntStr = result1.getString("CNT");
                    int countUsers = Integer.parseInt(cntStr.substring(0,cntStr.indexOf(".")));
                    if(countUsers>0)
                    {
                        teamMap.put(result.getString(id), result.getString("TEAM_NAME"));
                    }
                }
            }
        }
        return teamMap;
    }

    /**
     * This method is used to get SequenceMap of franchise ID for generating combo.
     * It is used for Customer Transaction module. 
     */
    public static SequenceMap getAllFranchisees(String regionId) {	/*BB_FIN_E_27Aug08*/
        SequenceMap sMap = new SequenceMap();
        Info tempInfo = new Info();
        if (regionId != null && !"".equals(regionId) && !"-1".equals(regionId)){
            tempInfo = AdminMgr.newInstance().getStoreDAO().getAllFranchisees(regionId);
        }else{
            tempInfo = AdminMgr.newInstance().getStoreDAO().getAllFranchisees();
        }
        Iterator itr = tempInfo.getKeySetIterator();
        String ikey = null;
        while(itr.hasNext()){
            ikey = (String)itr.next();
            sMap.put(ikey, tempInfo.getObject(ikey));
        }
        return sMap;
    }

    /**
     * This method is used to get SequenceMap of area ID for generating combo.
     * It is used for Customer Transaction module. 
     */
    public static SequenceMap getAllAreas(String regionId) {
        SequenceMap sMap = new SequenceMap();

        if (regionId != null && !"".equals(regionId)){

            sMap =  CommonMgr.newInstance().getCommonFinancialsDAO().getAllAreaMapForFin(regionId);
        }else{

            sMap =  CommonMgr.newInstance().getCommonFinancialsDAO().getAllAreaMapForFin();
        }

        return sMap;
    }

    /**
     * Map for all area / region
     */
    public static SequenceMap getAllSuppAreas(String regionId) {
        SequenceMap sMap = new SequenceMap();
        if (regionId != null && !"".equals(regionId)){
            sMap =  RegionMgr.newInstance().getRegionsDAO().getAllAreaMapSupp(regionId);
        }else{

            sMap =  RegionMgr.newInstance().getRegionsDAO().getAllAreaMapSupp();
        }

        return sMap;
    }

    /**
     * This method is used to get SequenceMap of franchise ID for generating combo.
     * It is used for Financials module.
     */
    public static SequenceMap getAllFranchiseesForFin(String regionId) {	/*BB_FIN_E_01Sep08*/
        return getAllFranchiseesForFin(regionId,false);
    }
    
    public static SequenceMap getAllFranchiseesForFin(String regionId,boolean isOptGroup) {
    	return getAllFranchiseesForFin(regionId,isOptGroup,null);
    }
    
    public static SequenceMap getAllFranchiseesForFin(String regionId,boolean isOptGroup,String divisionIds) {
        SequenceMap sMap = new SequenceMap();
        Info tempInfo = new Info();
        if (regionId != null && !"".equals(regionId)){
            tempInfo = CommonMgr.newInstance().getCommonFinancialsDAO().getAllFranchiseesForFin(regionId,isOptGroup);
        }else if (StringUtil.isValid(divisionIds)){
        	tempInfo = CommonMgr.newInstance().getCommonFinancialsDAO().getAllFranchiseesForFin(null,isOptGroup,divisionIds);
        }else{
            tempInfo = CommonMgr.newInstance().getCommonFinancialsDAO().getAllFranchiseesForFin(null,isOptGroup);
        }
        Iterator itr = tempInfo.getKeySetIterator();
        String ikey = null;
        while(itr.hasNext()){
            ikey = (String)itr.next();
            sMap.put(ikey, tempInfo.getObject(ikey));
        }

        return sMap;
    }

    /**
     * This method is used to get SequenceMap of Store Type for generating combo.
     * It is used for Financials module.
     */
    public static SequenceMap getAllStoresForFin(String regionId) {	/*BB_FIN_E_03Sep08*/
        SequenceMap sMap = new SequenceMap();
        Info tempInfo = new Info();
        if (regionId != null && !"".equals(regionId)){
            tempInfo = PortalUtils.getAllStoresForFin(regionId);// METHOD NOT AVAILABLE
        }else{
            tempInfo = PortalUtils.getAllStoresForFin();
        }
        Iterator itr = tempInfo.getKeySetIterator();
        String ikey = null;
        while(itr.hasNext()){
            ikey = (String)itr.next();
            sMap.put(ikey, tempInfo.getObject(ikey));
        }
        return sMap;
    }

    /**
     * This will retrieve all area user of existing area /region  
     */
    public static SequenceMap getAllAreaUser(String key) {
        SequenceMap sMap = new SequenceMap();
        if (key != null && !"".equals(key)){
            sMap =  AdminMgr.newInstance().getUsersDAO().getAllAreaUser(key);
        }else{
            sMap =  AdminMgr.newInstance().getUsersDAO().getAllAreaUser(null);
        }

        return sMap;
    }

    /**
     * This will retrieve all franchise user of existing franchise(s)  
     */
    public static SequenceMap getAllFranchiseUser(String key) {
        SequenceMap sMap = new SequenceMap();
        if (key != null && !"".equals(key)){
            sMap =  AdminMgr.newInstance().getUsersDAO().getAllFranchiseUser(key);
        }else{
            sMap =  AdminMgr.newInstance().getUsersDAO().getAllFranchiseUser(null);
        }

        return sMap;
    }
    /**
     * Get all bill and shipp address
     */
    public static SequenceMap getAllFranchiseBillShipp(String key) {
        SequenceMap sMap = new SequenceMap();
        if (key != null && !"".equals(key) && !"-1".equals(key)){
            sMap =  LocationMgr.newInstance().getLocationsDAO().getAllFranchiseBillShippAdd(key);
        }//else{
         //   sMap =  LocationMgr.newInstance().getLocationsDAO().getAllFranchiseBillShippAdd(null);
        //}// BUG-82067

        return sMap;
    }

    /**
     * Get all bill and shipp address of Area / Region
     */
    public static SequenceMap getAllAreaBillShipp(String key) {
        SequenceMap sMap = new SequenceMap();
        if (key != null && !"".equals(key)  && !"-1".equals(key)){
            sMap =  LocationMgr.newInstance().getLocationsDAO().getAllAreaBillShipp(key);
        }//else{
         //   sMap =  LocationMgr.newInstance().getLocationsDAO().getAllAreaBillShipp(null);
       // }// BUG-82067

        return sMap;
    }

    public static String searchLeadsByName(String value) {

        value =  NewPortalUtils.getSearchNames(value);
        ResultSet result = null;
        String namesAndIds = null;
        try {

            StringBuffer sbQuery = new StringBuffer();
            sbQuery.append("SELECT LEAD_ID ,FIRST_NAME,LAST_NAME FROM FS_LEAD_DETAILS A WHERE 1=1 "+value+"  LIMIT 0,50");


            result = QueryUtil.getResult(sbQuery.toString(), null);

            String name ="";
            String leadids ="";
            String lastname ="";
            String firstname ="";


            while(result!=null && result.next()) {

                lastname = result.getString("LAST_NAME");
                firstname = result.getString("FIRST_NAME");

                if(lastname!= null) lastname = lastname.replaceAll("\"","\\\\\"");
                if(firstname!= null) firstname = firstname.replaceAll("\"","\\\\\"");


                name = name +"\""+lastname+", "+firstname+"\",";
                leadids = leadids +"\""+result.getString("LEAD_ID")+"\",";

            }
            logger.info("name before " + name  );
            if(name != null & name.length()>1)
                name = name.substring(0, name.length()-1);
            logger.info("name after " + name  );
            if(leadids != null & leadids.length()>1)
                leadids = leadids.substring(0, leadids.length()-1);

            namesAndIds = name+"), new Array("+leadids+"));";

            logger.info("namesAndIds after " + namesAndIds  );
        } catch (Exception e) {
            logger.error("Exception in AjaxDAO Class in searchLeadsByName() Method :::" +e.getMessage());

        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return namesAndIds;
    }

    public static String processMailTemplateForInfomercialEmail(String mailContentTemplate,String hostName)
    {
        return processMailTemplateForInfomercialEmail(mailContentTemplate, hostName, null);
    }

    public static String processMailTemplateForInfomercialEmail(String mailContentTemplate,String hostName,SequenceMap sMap)
    {
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        if(sMap==null)
        {
            sMap   =  CommonMgr.newInstance().getCommonFsDAO().getIdentifiers();
        }

        Iterator itInfo = sMap.values().iterator();
        String dbIdentifier=null;
        String imgWithVideoLink=null;
        Info currentInfo = null;
        String imgsrc=null;

        String returnTemplate = mailContentTemplate;//BB_FS_LM_PInfo_Bug_36784 //commented above line and rewritten.
        try{
            if(sMap!=null && sMap.size()>0)
            {
                for(int i = 0; i < sMap.size() ; i++)
                {
                    currentInfo = (Info)itInfo.next();
                    dbIdentifier=currentInfo.get(FieldNames.IDENTIFIER);
                    StringBuffer rootUrl		= new StringBuffer();
                    StringBuffer imgPath  = new StringBuffer();

                    rootUrl.append(_baseConstants.DOCUMENTS_DIRECTORY);
                    rootUrl.append("/Documents/fsInfomercial/");
                    rootUrl.append(currentInfo.get(FieldNames.FILE_NAME));
                    imgPath.append(_baseConstants.DOCUMENTS_DIRECTORY);
                    imgPath.append("/Documents/fsInfomercial");

                    String informercialName= currentInfo.get(FieldNames.INFORMERCIAL_NAME);

                    String imgName0=(String)currentInfo.get(FieldNames.IMAGE_NAME);
                    if(imgName0!=null && imgName0.length()>0 && !imgName0.equalsIgnoreCase("")){
                        String imageName = currentInfo.get(FieldNames.IMAGE_NAME);//jyotsna
                        FileUtil.copyImageFile(imgPath.toString(),_baseConstants.BASE_URL+"/src/temp" ,imageName,imageName);
                        String imagePath = hostName+"temp/"+imageName;
                        imgsrc="<img src=\""+imagePath+"\"  height=\"133\" width=\"133\"  border=\"0\" name=\"imageName\"></img>";
                    }else{
                        imgsrc=informercialName;
                    }
                    String urlPath=hostName+"infomercialWebVideos.jsp?format="+currentInfo.get(FieldNames.FORMAT)+"&fileURL="+ rootUrl.toString()+"&informercialName="+informercialName;
                    informercialName="<a href=\""+urlPath+"\"  >"+imgsrc+"</a>";
                    imgWithVideoLink=informercialName;
                    returnTemplate  = PortalUtils.replaceAll(returnTemplate , dbIdentifier, imgWithVideoLink);
                }
            }

        }catch(Exception e){
            logger.info("Exception in processMailTemplateForInfomercialEmail::::::::::"+e);
        }
        return returnTemplate ;
    }

    public static StringBuffer getFooter(){
        String footer = SQLUtil.getColumnValue("EMAILS_DEFAULT", "NEW_FOOTER", FieldNames.MINUS_ONE, null);
        if(!StringUtil.isValid(footer)) {
            footer = FieldNames.EMPTY_STRING;
        }
        return new StringBuffer(footer);
    }

    public static String getScheduleID(String taskID){
        return SQLUtil.getColumnValue("CAL_TASKS_MAPPING", "SCHEDULE_ID", "TASK_ID", taskID);
    }

    public static void deleteTaskFromCalSchedule(String scheduleID){
        SQLUtil.deleteRecord("CAL_SCHEDULES", "SCHEDULE_ID", scheduleID);
    }

    public static String getComboForContacts(String comboName, String selected ,String onChange){
        String comboClass="multiList"; //P_B_CM_42652
        String value = LanguageUtil.getString("Contact type");
        if(selected==null || selected.equals(""))selected="-1";
        return getComboForContacts(comboClass, comboName, value, selected,onChange);

    }

    public static String getComboForContacts(String comboClass ,String comboName,String value, String selected,String onChange){
        StringBuffer combo=new StringBuffer();
        Info sourceInfo = new Info();

        combo.append("<select name=\'"+comboName+"\' id=\'"+comboName+"\' class="+comboClass);
        if (onChange != null && !onChange.equals(""))
        {
            combo.append("  ONCHANGE=").append(onChange);
        }
        combo.append(">");
        if(selected.equals("-1"))
            combo.append("<option value=\"-1\" selected>"+value+"</option>");
        else
            combo.append("<option value=\"-1\">"+value+"</option>");
        //P_E_BASEBUILD_6.2 Starts added if condition whether contact type is configured from admin.
        if(!"0".equals(MultiTenancyUtil.getTenantConstants().contactTypeDisplay)){
            sourceInfo= CommonMgr.newInstance().getCommonCmDAO().getContactTypeInfo();
        }else{
            sourceInfo=CommonMgr.newInstance().getCommonCmDAO().getDefaultContactTypeInfo();
        }
        //P_E_BASEBUILD_6.2 Ends
        for(Iterator itInfo = sourceInfo.getKeySetIterator();itInfo.hasNext();){

            String key = (String)itInfo.next();
            combo.append("<option value="+key);
            if(key.equals(selected))
                combo.append(" selected");
            combo.append(" >"+LanguageUtil.getString((String)sourceInfo.getObject(key))+"</option>");
        }
        combo.append("</select>");

        return combo.toString();


    }

    /**
     * @author Vivek Maurya
     * @date 07Feb2013
     */
    public static HashMap<String,String> getValueMap(String tableName, String column1, String column2, String whereClause, boolean switchColumn,String orderBy) {
        HashMap<String,String> dataMap = new HashMap<String,String>();

        StringBuffer query = new StringBuffer("SELECT ").append(column1).append(",").append(column2);
        query.append(" FROM ").append(tableName);
        if(StringUtil.isValid(whereClause)) {
            query.append(" WHERE ").append(whereClause);
        }
        if(StringUtil.isValid(orderBy)) {
            query.append(" ORDER BY ").append(orderBy);
        }

        ResultSet result = null;
        try {
            result = QueryUtil.getResult(query.toString(), null);
            if(result!=null) {
                while(result.next()) {
                    if(switchColumn) {
                        dataMap.put(result.getString(2).trim(), result.getString(1));
                    } else {
                        dataMap.put(result.getString(1).trim(), result.getString(2));
                    }
                }
            }
        } catch(Exception e) {
            logger.error("Exception in getValueMap::", e);
        } finally {
            if(result!=null) {
                result.release();
                result = null;
            }
        }

        return dataMap;
    }

    /**
     ** This method find the duplicate enteries and updates them that is mark them as flagged
     **/
    //TastiDLite-20120427-520
    public static void updateDuplicate(Info contactInfo,Info addressInfo,Info companyInfo, boolean setFalse)
    {
        updateDuplicate(contactInfo,addressInfo,companyInfo, setFalse,null);
    }

    public static void updateDuplicate(Info contactInfo,Info addressInfo,Info companyInfo, boolean setFalse,String isIgnoreDuplicates)//TastiDLite-20120427-520 : method overloaded with isIgnoreDuplicates 
    {

        String strQuery = "";
        boolean addressFlag=false;
        String duplicateCriteriaOriginal = NewPortalUtils.getComSepCriteria("4");
        duplicateCriteriaOriginal = duplicateCriteriaOriginal.toUpperCase();
        StringBuffer duplicateCriteria = new StringBuffer();
        //StringBuffer duplicateAddress = new StringBuffer();
        //StringBuffer duplicateCompany = new StringBuffer();
        if(duplicateCriteriaOriginal==null){
            duplicateCriteriaOriginal="";
        }

        if(duplicateCriteriaOriginal.indexOf("FIRST_NAME")!=-1) {
            if(!duplicateCriteria.toString().endsWith("AND") && !duplicateCriteria.toString().equals(""))
            {
                duplicateCriteria.append("AND");
            }
            //--B_P_CM_14137
            String firstName ="" ;
            if (contactInfo != null && StringUtil.isValidNew(contactInfo.get("contactFirstName"))) {
                firstName = StringUtil.removeAppostrophi(contactInfo.get("contactFirstName")); //P_CM_BUG_29067
            }

            if( firstName != null && firstName.equals(""))
                firstName = "Not Available";

            duplicateCriteria.append(" C.CONTACT_FIRST_NAME LIKE \"").append(firstName).append("\" ");
        }

        if(duplicateCriteriaOriginal.indexOf("LAST_NAME")!=-1) {
            if(!duplicateCriteria.toString().endsWith("AND") && !duplicateCriteria.toString().equals(""))
            {
                duplicateCriteria.append("AND");
            }
            //--B_P_CM_14137
            String lastName ="" ;
            if (contactInfo != null && StringUtil.isValidNew(contactInfo.get("contactLastName"))) {
                lastName = StringUtil.removeAppostrophi(contactInfo.get("contactLastName"));//P_CM_BUG_29067
            }


            if( lastName != null && lastName.equals(""))
                lastName = "Not Available";

            duplicateCriteria.append("  C.CONTACT_LAST_NAME LIKE \"").append(lastName).append("\" ");
        }
        if(duplicateCriteriaOriginal.indexOf("PHONE")!=-1) {
            addressFlag=true;
            if(!duplicateCriteria.toString().endsWith("AND") && !duplicateCriteria.toString().equals(""))
            {
                duplicateCriteria.append("AND");
            }
            //--B_P_CM_14137
            String phone ="" ;
            if (addressInfo != null && StringUtil.isValidNew(addressInfo.get("phoneNumbers"))) {
                phone = addressInfo.get("phoneNumbers");
            }



            if(phone!=null && phone.equals(""))
                phone = "Not Available";

            duplicateCriteria.append(" (A.PHONE_NUMBERS LIKE '").append(phone).append("' )");//P_BUG_ID_12154
        }

        if(duplicateCriteriaOriginal.indexOf("EMAIL_IDS")!=-1 || duplicateCriteriaOriginal.indexOf("EMAIL")!=-1 ) {
            addressFlag=true;
            if(!duplicateCriteria.toString().endsWith("AND") && !duplicateCriteria.toString().equals(""))
            {
                duplicateCriteria.append("AND");
            }
            //--B_P_CM_14137
            String emailId ="" ;
            if (addressInfo != null && StringUtil.isValidNew(addressInfo.get("emailIds"))) {
                emailId = addressInfo.get("emailIds");
            }

            //String emailId = addressInfo.get("emailIds");
            if(emailId != null && emailId.equals(""))
                emailId = "Not Available";

            duplicateCriteria.append(" (A.EMAIL_IDS LIKE '").append(emailId).append("')");
        }

        if(duplicateCriteriaOriginal.indexOf("COMPANY_NAME")!=-1) {
            if(!duplicateCriteria.toString().endsWith("AND") && !duplicateCriteria.toString().equals(""))
            {
                duplicateCriteria.append("AND");
            }
            //--B_P_CM_14137
            String companyName ="" ;
            if (companyInfo != null && StringUtil.isValidNew(companyInfo.get("companyName"))) { // P_B_CM_14005
                companyName = companyInfo.get("companyName");
            }

            //String companyName = companyInfo.get("companyName");

            if(companyName != null && companyName.equals(""))
                companyName = "Not Available";

            duplicateCriteria.append(" (CCI.COMPANY_NAME LIKE '").append(companyName).append("')");
        }

        StringBuffer IDs = new StringBuffer();
        logger.info("valueof contactifo"+contactInfo+"addressinfo"+addressInfo+"infocompany"+companyInfo);
        if(contactInfo.get(FieldNames.CONTACT_ID)!=null && contactInfo.get(FieldNames.CONTACT_ID).length()>0)
        {
            //Modify Case
            duplicateCriteria.append(" AND C.CONTACT_ID!="+contactInfo.get(FieldNames.CONTACT_ID));
            if(addressFlag){
                duplicateCriteria.append(" AND C.CONTACT_ID=A.FOREIGN_ID  ");
            }
            if(duplicateCriteriaOriginal.indexOf("COMPANY_NAME")!=-1){
                duplicateCriteria.append(" AND  C.COMPANY_ID=CCI.COMPANY_ID");//TastiDLite-20120427-520
            }

        }

        // Getting IDs which needs to be updated
        //BB_76225  when addressFlag is false and duplicateCriteriaOriginal.indexOf("COMPANY_NAME")!=-1 there in no need to be ADDRESS,CM_COMPANY_INFO table in query
        strQuery = "SELECT DISTINCT C.CONTACT_ID FROM CM_CONTACT_DETAILS C ";
        if(addressFlag)
        {
            strQuery = strQuery+", ADDRESS A ";
        }
        if(duplicateCriteriaOriginal.indexOf("COMPANY_NAME")!=-1)
        {
            strQuery = strQuery+", CM_COMPANY_INFO CCI ";
        }
        strQuery = strQuery +"WHERE " + duplicateCriteria;
        // BB_76225
        ResultSet result = null;
        boolean flag = true;
        boolean flag1 = true;
        int count = 0;

        try
        {
            result	= QueryUtil.getResult(strQuery, null);

            while(result != null && result.next())
            {
                IDs.append("'").append(result.getString(1)).append("',");

                if(flag1 && contactInfo.get(FieldNames.CONTACT_ID)==null)
                {
                    contactInfo.set(FieldNames.DUPLICATE_EMAIL, "true");
                    flag1 = false;
                }
                else if(flag)
                {
                    IDs.append("'").append(contactInfo.get(FieldNames.CONTACT_ID)).append("',");
                    flag = false;
                }

                count++;
            }

            if(IDs.toString().length()>1)
            {
                IDs = new StringBuffer(IDs.toString().substring(0,IDs.toString().length()-1));
            }

            if( setFalse && count==1)
            {
                //Case when duplicate lead is going to be deleted and has one duplicate pair only
                // Updating IDs which are now non duplicate as Duplicate lead is deleted
                //String leadId = IDs.toString().substring(1,IDs.toString().indexOf(",")-1);



                strQuery	= "UPDATE CM_CONTACT_DETAILS SET DUPLICATE_EMAIL = 'false' WHERE CONTACT_ID IN ("+IDs.toString()+")";
                QueryUtil.update(strQuery, new String[]{});
            } else if(setFalse && count > 0)
            {
                //Its lead create or modify case

                if(!IDs.toString().trim().equals(""))
                {
                    // Updating IDs which are duplicate
                    strQuery	= "UPDATE CM_CONTACT_DETAILS SET DUPLICATE_EMAIL = 'true' WHERE CONTACT_ID  IN ("+IDs.toString()+")";
                    QueryUtil.update(strQuery, new String[]{});
                    //Added by Manoj
                    contactInfo.set(FieldNames.DUPLICATE_EMAIL,"true");
                }

            } else if(count > 0)
            {
                //Its lead create or modify case

                //TastiDLite-20120427-520 starts
                if("Yes".equals(isIgnoreDuplicates) && StringUtil.isValid(contactInfo.getString(FieldNames.CONTACT_ID)))
                {
                    strQuery = "DELETE FROM CM_CONTACT_DETAILS WHERE CONTACT_ID="+contactInfo.getString(FieldNames.CONTACT_ID);
                    QueryUtil.update(strQuery, new String[]{});

                    strQuery = "DELETE FROM ADDRESS WHERE FOREIGN_TYPE='cmContactDetails' AND FOREIGN_ID IN ("+contactInfo.getString(FieldNames.CONTACT_ID)+")";
                    QueryUtil.update(strQuery, new String[]{});

                    contactInfo.set("DELETE_DUPLICATE_CRITERIA","true");
                }
                else
                {
                    if(!IDs.toString().trim().equals(""))
                    {
                        // Updating IDs which are duplicate
                        strQuery	= "UPDATE CM_CONTACT_DETAILS SET DUPLICATE_EMAIL = 'true' WHERE CONTACT_ID  IN ("+IDs.toString()+")";
                        QueryUtil.update(strQuery, new String[]{});
                        //Added by Manoj
                        contactInfo.set(FieldNames.DUPLICATE_EMAIL,"true");
                    }
                }
                //TastiDLite-20120427-520 ends
            }
            else if(count==0)
            {
                strQuery	= "UPDATE CM_CONTACT_DETAILS SET DUPLICATE_EMAIL = 'false' WHERE CONTACT_ID  IN ("+(String)contactInfo.get(FieldNames.CONTACT_ID)+")";
                QueryUtil.update(strQuery, new String[]{});
                contactInfo.set(FieldNames.DUPLICATE_EMAIL, "false");
            }

            // When no duplicates are found

            if(IDs.toString()!=null && !IDs.toString().trim().equals(""))
            {
                String ownerId=null;
                String dupLeadId=null;

                if(IDs.toString().indexOf(",")!=-1)
                    dupLeadId = IDs.toString().substring(0,IDs.toString().indexOf(","));
                else
                    dupLeadId = IDs.toString();

                strQuery	= "SELECT CONTACT_OWNER_ID FROM CM_CONTACT_DETAILS WHERE CONTACT_ID IN ("+dupLeadId+")";
                result	= QueryUtil.getResult(strQuery, new Object[]{});

                if(result != null && result.next())
                {
                    ownerId = result.getString("CONTACT_OWNER_ID");
                }

                contactInfo.set("duplicateFlag","true");
                contactInfo.set(FieldNames.LEAD_OWNER_ID,ownerId);
            }
        } catch(Exception e)
        {
            logger.error("Exception : \n", e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
    }

    public static void printArrayToConsole(String[] myArray){
        printArrayToConsole(myArray, null);
    }
    public static void printArrayToConsole(String[] myArray, String prePrintText){
        if(prePrintText!=null){
            System.out.println(prePrintText);
        }
        if(myArray != null){
            for(int i=0;i<myArray.length;i++){
                System.out.println("myArray["+i+"]"+myArray[i]);
            }
        }
    }
    //For Product_Seperation_BL this method moved to BaseUtils By Amar Singh. 
    public static boolean getFilteredValue(String paramValue, String requiredValue, String trueloggerText, String falseloggerText){
        return BaseUtils.getFilteredValue(paramValue,requiredValue,trueloggerText,falseloggerText);
		/*boolean isPresent = false;
		if(StringUtil.isValidNew(paramValue) && paramValue.trim().equalsIgnoreCase(requiredValue)){
			isPresent = true;
		}
		if(isPresent){
			logger.info(trueloggerText);
		}else{
			logger.info(falseloggerText);
		}
		return isPresent;*/
    }

    // Added By ravindra Verma on 3/22/2007 for bug 23364

    public static String getContactName(String contactID, String forArchived)
    {
        Info info = CommonMgr.newInstance().getCommonCmDAO().getContactNameInfo(contactID, forArchived);
        String name = "";

        if(info !=null)
        {
            String fname = info.get(FieldNames.CONTACT_FIRST_NAME);
            String lname = info.get(FieldNames.CONTACT_LAST_NAME);
            name  =StringUtil.formatName(fname,lname);
        }
        return name;
    }

    public static boolean compareDates(String searchStartDateString, String searchEndDateString, String taskStartDateString, String taskEndDateString) {
        boolean isTaskInDates = false;
        boolean isStartCondition = false;
        boolean isEndCondition = false;

        Date searchStartDate = null;
        Date searchEndDate = null;
        Date taskStartDate = null;
        Date taskEndDate = null;


        searchStartDate = DateUtil.getDate(searchStartDateString);
        searchEndDate = DateUtil.getDate(searchEndDateString);
        taskStartDate = DateUtil.getDate(taskStartDateString);
        taskEndDate = DateUtil.getDate(taskEndDateString);

        logger.info("searchStartDate=" + searchStartDate);
        logger.info("searchEndDate=" + searchEndDate);
        logger.info("taskStartDate=" + taskStartDate);
        logger.info("taskEndDate=" + taskEndDate);

        if ((taskStartDate.after(searchStartDate) || taskStartDate.equals(searchStartDate)) && (taskStartDate.before(searchEndDate) || taskStartDate.equals(searchEndDate))) {
            isStartCondition = true;
        }
        if ((taskEndDate.after(searchStartDate) || taskEndDate.equals(searchStartDate)) && (taskEndDate.before(searchEndDate) || taskEndDate.equals(searchEndDate))) {
            isEndCondition = true;
        }

        isTaskInDates = isStartCondition || isEndCondition;
        logger.info("isStartCondition=" + isStartCondition);
        logger.info("isEndCondition=" + isEndCondition);
        logger.info("isTaskInDates=" + isTaskInDates);


        return isTaskInDates;
    }



    public static SequenceMap getNearestFranchiseeNoLocationsFromZipCode(String zipCode){
        return getNearestFranchiseeNoLocationsFromZipCode(zipCode, "50");
    }

    public static SequenceMap getNearestFranchiseeNoLocationsFromZipCode(String zipCode,String miles){
        return getNearestFranchiseeNoLocationsFromZipCode(zipCode, miles,null);
    }

    public static SequenceMap getNearestFranchiseeNoLocationsFromZipCode(String zipCode, String miles,String taskID){
        SequenceMap nearestFranchiseeLocations = null;
        Info infoDetails = null;
        String lat = null;
        String longt = null;
        double LatCenter = 0.0;
        double LongCenter = 0.0;
        String LatCenter1 = null;
        String LongCenter1 = null;
        RadiusAssistant calc = null;

        double Miles = 50;

        lat = "";
        longt = "";
        try{
            if(StringUtil.isValidNew(zipCode)){
                infoDetails = ZipcodeMgr.newInstance().getZipCodeDAO().getlatitude(zipCode);
                if(StringUtil.isValidNew(miles)){
                    Miles = Double.parseDouble(miles);

                }

                if(infoDetails!=null){
                    LatCenter1 = infoDetails.getString(FieldNames.LATITUDE);
                    LongCenter1 = infoDetails.getString(FieldNames.LONGITUDE);

                    if(!StringUtil.isValid(LatCenter1)){
                        LatCenter = 0.0;
                    }else{
                        LatCenter = Double.valueOf(infoDetails.getString(FieldNames.LATITUDE));
                    }
                    if(!StringUtil.isValid(LongCenter1)){
                        LongCenter = -0.0;
                    }else{
                        LongCenter = Double.valueOf(infoDetails.getString(FieldNames.LONGITUDE));
                    }
                    lat = LatCenter1;
                    longt = LongCenter1;
                }

                calc = new RadiusAssistant(LatCenter, LongCenter, Miles);
                double MaxLatitude = calc.MaxLatitude();
                double MinLatitude = calc.MinLatitude();
                double MaxLongitude = calc.MaxLongitude();
                double MinLongitude = calc.MinLongitude();

                logger.info("MaxLatitude="+MaxLatitude);
                logger.info("MinLatitude="+MinLatitude);
                logger.info("MaxLongitude="+MaxLongitude);
                logger.info("MinLongitude="+MinLongitude);


                //nearestFranchiseeLocations =  TmsMgr.newInstance().getCustomerDAO().getSearchFranLocationCoordinates(MaxLatitude, MinLatitude, MaxLongitude, MinLongitude, "FRANCHISEE_NO", "DESC", zipCode, lat, longt);
				/* DB_625_CT_MIG : moved same method from CustomerDAO to TheaterDAO */
                if(StringUtil.isValidNew(taskID) &&  taskID.equals(taskID)){
                    nearestFranchiseeLocations =  LocationMgr.newInstance().getLocationsDAO().getSearchFranLocationCoordinates(MaxLatitude, MinLatitude, MaxLongitude, MinLongitude, "FRANCHISEE_NO", "DESC", zipCode, lat, longt,Integer.parseInt(taskID));
                }else{
                    nearestFranchiseeLocations =  LocationMgr.newInstance().getLocationsDAO().getSearchFranLocationCoordinates(MaxLatitude, MinLatitude, MaxLongitude, MinLongitude, "FRANCHISEE_NO", "DESC", zipCode, lat, longt);
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        if(nearestFranchiseeLocations == null){
            nearestFranchiseeLocations = new SequenceMap();
        }
        return nearestFranchiseeLocations;
    }



    //****************************************************************************************************          
    //****************************FOR AUTOGENERATED MAIL TO CONTACTS AND ASSIGN_TO STARTS*****************        
    //****************************************************************************************************

    public static void sendMailforAssignedTask(String contactID, String assignTo, String taskSubject, String franchiseeNo, Info recurrInfo, String sDateTime, String duration, String userNo) {
        sendMailforAssignedTask( contactID, assignTo, taskSubject, franchiseeNo, recurrInfo, sDateTime, duration, userNo,false,null,null,null,null,true,true,null,null,null,null,null,null,null,null);
    }
    //USINSL-20120514-058 overloaded by Prakriti Sharma
    public static void sendMailforAssignedTask(String contactID, String assignTo, String taskSubject, String franchiseeNo, Info recurrInfo, String sDateTime, String duration, String userNo,boolean sendMailToContact,String lFirstName,String lLastName,String eDateTime,String recTask,boolean sendMailToOwnerOfTask,boolean sendMailToContactModify,String ownerType,SequenceMap productMap,SequenceMap multiMap,String prevSubject,String allContacts,Info otherAddressInfo,String taskCreatedBy,String event) {
        //Number of users mail need to be sent...?
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        boolean isEmailenabled = false;
        String taskMail = "";
        String assignByUserName = "";

        if(StringUtil.isValid(taskCreatedBy)){
            assignByUserName = AdminMgr.newInstance().getUsersDAO().getTaskCreatedBy(taskCreatedBy);
        }
        Info usersInfo = TaskMgr.newInstance().getTaskDAO().getUsersMailInfo(franchiseeNo);
        taskMail = usersInfo.getString("DO_NOT_SEND_EMAIL");
        String toEmail=NewPortalUtils.getUserEmailId(assignTo);
        String sendEmail=MasterDataMgr.newInstance().getMasterDataDAO().getValue(3037, "-1"); //USINSL-20120514-058 added by Prakriti Sharma
        if (taskMail == null || taskMail.trim().equals("") || taskMail.trim().equalsIgnoreCase("null")) {
            usersInfo = TaskMgr.newInstance().getTaskDAO().getUsersMailInfo("0");
        }
        taskMail = usersInfo.getString("DO_NOT_SEND_EMAIL");
        if (taskMail == null || taskMail.trim().equals("") || taskMail.trim().equalsIgnoreCase("null")) {
            taskMail = "N";
        }


        if (taskMail.trim().equalsIgnoreCase("N")) {
            String assignedToUser = usersInfo.getString("ASSIGN_TO");
            String contactUser = usersInfo.getString("CONTACT");
            String defaultmail = usersInfo.getString("DEFAULT_EMAIL");
            String defaultmaildata = usersInfo.getString("DEFAULT_EMAIL_DATA");
            String emailId = "";
            String smailId = "";
            String bmailId = "";
            String phone="";
            String fromWhere="fromSchUtil";
            String address = "";
            String country = "";
            String state = "";
            String nameOfOwner = "";
            String city = "";
            String[] To = new String[]{"", "", "", ""};
            String taskType = "" ;
            Info franLocInfo = new Info();
            //Info mailConfigInfo = new Info();
            Info mailIdInfo = new Info();
            String[] multipleOwners = null;
            String contactName = "" ;
            String taskSubjectMailLine = "";
            //Get Information about mail Configuration.
            //	Info mailInfo = TaskMgr.newInstance().getTaskDAO().getMailInfo();
            if(("delete".equals(event) || "updateStatus".equals(event)) && !"111111111".equals(assignTo))
                assignedToUser = "Y";

            contactName = CommonMgr.newInstance().getCommonCmDAO().getContactFirstLastName(contactID);
            if(!"reschedule".equals(event) && !"delete".equals(event) && !"updateStatus".equals(event) && !"taskCancelled".equals(event)){
                contactName = StringUtil.revertAppostrophi(contactName); //P_B_SCH_48956
                taskSubjectMailLine = taskSubject + " - "+ contactName;
            }
            if(("reschedule".equals(event))){
                taskSubjectMailLine = "Rescheduled" + " - "+ taskSubject + " - "+  contactName;
                taskSubject = taskSubject + "- Rescheduled";
            }else if("taskCancelled".equals(event) || "updateStatus".equals(event)){
                taskSubjectMailLine = "Cancelled" + " - "+ taskSubject + " - "+  contactName;
                taskSubject = taskSubject + "- Cancelled";
            } else if("delete".equals(event)){
                taskSubjectMailLine = "Cancelled" + " - "+ taskSubject + " - "+  contactName;
                taskSubject = taskSubject + "- Cancelled";
            }

            Info mailInfo = new Info() ;

            //USINSL-20120514-058 added by Prakriti Sharma
            //if (assignedToUser != null && !assignedToUser.trim().equals("null") && !assignedToUser.trim().equals("") && assignedToUser.trim().equalsIgnoreCase("Y")) {
            //Get All Three EmailIds of users Whome the Task has been assigned.
            if (assignTo.indexOf(",") != -1) {

                multipleOwners = assignTo.split(",");
            } else {
                multipleOwners = new String[1];
                multipleOwners[0] = assignTo;

            }
            //for (int i = 0; i <  multipleOwners.length; i++) {
            mailIdInfo = getMailIDInfo(multipleOwners[0]);
            isEmailenabled = AdminMgr.newInstance().getAdminConfigurDAO().getEmailFlagStatus(multipleOwners[0], "16");  //USINSL-20120514-058 added by Prakriti Sharma 
            //Getting Email Ids seperatly.
            //}
            nameOfOwner=mailIdInfo.getString("NAME");
            //USINSL-20120514-058 ended by Prakriti Sharma
            //if (isEmailenabled) {  //USINSL-20120514-058 
            franLocInfo = getMailIDInfo(multipleOwners[0],fromWhere,franchiseeNo,contactID,ownerType);//USINSL-20120514-058  addition starts
            address = franLocInfo.getString("ADDRESS");
            emailId = franLocInfo.getString("EMAIL_ID");
            country = franLocInfo.getString("COUNTRY");
            state = franLocInfo.getString("STATE");
            city = franLocInfo.getString("CITY");
            phone=franLocInfo.getString("PHONE"); //addition ends for USINSL-20120514-058 

            //	String emailContents = mailInfo.getString("OTHER_EMAIL_FIELDS");
            String emailContents = null;
            String bbEmailContents = null ;
            //	String from = mailInfo.getString("FROM_EMAIL");
            String from = null ;
            String From[]    = 	(String[])NewPortalUtils.getFromID();
            if(From!=null && From.length>0)
            {
                from = From[1] ;
            }
            if (from == null || from.trim().equals("") || from.trim().equalsIgnoreCase("null")) {
                from = _baseConstants.DEFAULT_FROM_EMAIL_ID;
            }
            //		String startMailText = mailInfo.getString("EMAIL_CONTENT");
            //		String bbStartMailText = mailInfo.getString("OTHER_EMAIL_CONTENT");
            String startMailText = null ;
            String bbStartMailText = null;
            String mailSubjectLine = null;
            //		String signature = mailInfo.getString("EMAIL_SIGNATURE");
            String signature = null ;
            StringBuffer signatureBuffer    = 	(StringBuffer)getFooter();
            if(signatureBuffer != null)
            {
                signature = signatureBuffer.toString() ;
                signature = "<p>"+signature+"</p>";
            }

            if (signature == null || signature.trim().equals("null")) {
                signature = "";
            }

            if (signature != null && !signature.trim().equals("null") && !signature.trim().equals("")) {
				/*if(!isEmailenabled){
					signature = signature.replaceAll("\\r", "<br>");
					signature = signature.replaceAll("\\n", "<br>");
				}*/
            }
            if(allContacts==null || allContacts.trim().equals("")){
                allContacts = contactID;
            }
            String mailText = "";
            //P_Admin_B_15151 : starts
            com.home.builderforms.mail.MailSender mailer = new com.home.builderforms.mail.MailSender();
            try{
                mailer.init();
                if(StringUtil.isValidNew(franchiseeNo) && !"1".equals(franchiseeNo)){
                    mailer.setFranchiseeNo(franchiseeNo);
                }else{
                    mailer.setFranchiseeNo("0");
                }
            }catch(Exception e){
                logger.error(e);
            }
            //P_Admin_B_15151 : ends
            String[] multipleContacts = null;

            if (contactID.indexOf(",") != -1) {
                multipleContacts = contactID.split(",");
            } else {
                multipleContacts = new String[1];
                multipleContacts[0] = contactID;

            }

            taskSubject = PortalUtils.reverseFilterValue(taskSubject);

            //USINSL-20120514-058 addition by Prakriti Sharma starts
            if(("Yes".equals(sendEmail)&& isEmailenabled)){
                if(sendMailToOwnerOfTask==true) {

                    if(StringUtil.isValidNew(recTask) && "yes".equals(recTask))
                        taskType = "multipleToOwner";
                    else
                        taskType = "singleToOwner" ;
                    mailInfo = getMailInfo(taskType);
                    emailContents = mailInfo.getString("EMAIL_FIELDS");
                    bbEmailContents = mailInfo.getString("OTHER_EMAIL_FIELDS");
                    startMailText = mailInfo.getString("EMAIL_CONTENT");
                    bbStartMailText = mailInfo.getString("OTHER_EMAIL_CONTENT");
                    if(StringUtil.isValidNew(mailInfo.getString("SUBJECT")) &&  !"reschedule".equals(event) && !"delete".equals(event) && !"updateStatus".equals(event) && !"taskCancelled".equals(event)){
                        //mailSubjectLine = PortalUtils.reverseFilterValue(mailInfo.getString("SUBJECT")); //modified for P_B_SCH_15639
                        //mailSubjectLine = taskSubject;
                        mailSubjectLine = taskSubjectMailLine;
                    } else{
                        //mailSubjectLine = taskSubject;  //modified for P_B_SCH_15639
                        mailSubjectLine = taskSubjectMailLine;
                    }

                    if(!"111111111".equals(multipleOwners[0]) ){
                        for (int i = 0; i < multipleContacts.length; i++) {
                            for (int k=0; k< multipleOwners.length;k++) {
                                Info info = getContactInfo(multipleContacts[i].replaceAll("'", "").trim(), multipleOwners[k]);
                                info.set("taskSubject", taskSubject);

                                if (assignedToUser != null && !assignedToUser.trim().equals("null") && !assignedToUser.trim().equals("") && assignedToUser.trim().equalsIgnoreCase("Y")) {
                                    To[0]=(getMailIDInfo(multipleOwners[k])).getString("EMAIL_ID");
                                    try{
                                        StringBuffer st =new StringBuffer();
                                        st.append("BEGIN:VCALENDAR\r\n").append("PRODID:-//Microsoft Corporation//Outlook 11.0 MIMEDIR//EN\r\n");
                                        st.append("VERSION:2.0\r\n");
                                        st.append("X-MS-OLK-FORCEINSPECTOROPEN:TRUE\r\n");
                                        st.append("METHOD:REQUEST\n").append("BEGIN:VEVENT\r\n");
                                        st.append("ATTENDEE;CN="+To[0]+":MAILTO:"+To[0]+"\r\n");
                                        st.append("CLASS:PUBLIC\r\n");
                                        st.append("DTSTART:"+DateTime.getRequiredFormat(sDateTime, _baseConstants.DISPLAY_FORMAT_HMS, "yyyy-MM-dd HH:mm:ss").replaceAll("-","").replaceAll(":","").replaceAll(" ","T")).append("\r\n");
                                        st.append("DTEND:"+DateTime.getRequiredFormat(eDateTime, _baseConstants.DISPLAY_FORMAT_HMS, "yyyy-MM-dd HH:mm:ss").replaceAll("-","").replaceAll(":","").replaceAll(" ","T")).append("\r\n");
                                        st.append("UID:").append(IDGenerator.getNextKey()+"\r\n");
                                        st.append("DESCRIPTION:");
                                        if(startMailText!=null && startMailText.length()>0)
                                            st.append(""+startMailText.replaceAll("\\<html dir=\"ltr\"\\>.*?\\<p\\>","").replaceAll("\\</p\\>.*?\\<p\\>", "\\\\n").replaceAll("\\</p\\>.*?\\</html\\>","").replaceAll("\\<.*?\\>","").replaceAll("&nbsp;"," ").replaceAll(",","\\\\,")).append("\\n\\n");    //modified for P_B_SCH_10903
                                        //st.append(""+startMailText.replaceAll("\\r\n","\\\\n").replaceAll(",","\\\\,")).append("\\n\\n");
                                        if(recTask!=null && !recTask.equals(""))//USINSL-20120514-058:ENH
                                            st.append("MultiDay: ").append("Yes").append("\\n");
                                        if(StringUtil.isValid(assignByUserName))
                                            st.append("Created By: ").append(assignByUserName).append("\\n");


                                        String sTokens="";
                                        StringTokenizer str=new StringTokenizer(emailContents,", ");
                                        while(str.hasMoreTokens()){
                                            sTokens=str.nextToken();
                                            if(sTokens.equals("NAME") && info.getString(FieldNames.FIRST_NAME)!=null && info.getString(FieldNames.LAST_NAME).length()>0)
                                                st.append("Name: "+PortalUtils.reverseFilterValue(info.getString(FieldNames.FIRST_NAME)).replaceAll(",","\\\\,")+" "+PortalUtils.reverseFilterValue(info.getString(FieldNames.LAST_NAME)).replaceAll(",","\\\\,")).append("\\n");
                                            //SC_Sch_B_16051 :starts
                                            if(otherAddressInfo!=null && otherAddressInfo.size()!=0)
                                            {
                                                if(sTokens.equals("ADDRESS") && otherAddressInfo.getString("ADDRESS")!=null && otherAddressInfo.getString("ADDRESS").length()>0)
                                                    st.append("Address: ").append(PortalUtils.reverseFilterValue(otherAddressInfo.getString("ADDRESS")).replaceAll(",","\\\\,")).append("\\n");
                                                if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.getString(FieldNames.BEST_TIME_TO_CONTACT)!=null && info.getString(FieldNames.BEST_TIME_TO_CONTACT).length()>0)
                                                    st.append("Best Time to Contact: ").append(info.getString(FieldNames.BEST_TIME_TO_CONTACT)).append("\\n");
                                                if(sTokens.equals("COMPANY_NAME") && info.getString(FieldNames.COMPANY_NAME)!=null && info.getString(FieldNames.COMPANY_NAME).length()>0)
                                                    st.append("Company Name: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.COMPANY_NAME))).append("\\n");
                                                if(sTokens.equals("ZIP_CODE") && otherAddressInfo.get("ZIPCODE")!=null && otherAddressInfo.get("ZIPCODE").length()>0)
                                                    st.append("Zip/ Postal Code: ").append(otherAddressInfo.get("ZIPCODE")).append("\\n");
                                                if(sTokens.equals("CITY") && otherAddressInfo.get("CITY")!=null && otherAddressInfo.get("CITY").length()>0)
                                                    st.append("City: ").append(PortalUtils.reverseFilterValue(otherAddressInfo.get("CITY"))).append("\\n");
                                                if(sTokens.equals("STATE") && otherAddressInfo.get("STATE")!=null && otherAddressInfo.get("STATE").length()>0 && !otherAddressInfo.get("STATE").equals("-1"))
                                                    st.append("State: ").append(RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))).append("\\n");
                                                if(sTokens.equals("COUNTRY") && otherAddressInfo.get("COUNTRY")!=null && otherAddressInfo.get("COUNTRY").length()>0 && !otherAddressInfo.get("COUNTRY").equals("-1"))
                                                    st.append("Country: ").append(NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))).append("\\n");
                                            }else{
                                                if(sTokens.equals("ADDRESS") && info.getString(FieldNames.ADDRESS)!=null && info.getString(FieldNames.ADDRESS).length()>0)
                                                    st.append("Address: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.ADDRESS)).replaceAll(",","\\\\,")).append("\\n");
                                                if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.getString(FieldNames.BEST_TIME_TO_CONTACT)!=null && info.getString(FieldNames.BEST_TIME_TO_CONTACT).length()>0)
                                                    st.append("Best Time to Contact: ").append(info.getString(FieldNames.BEST_TIME_TO_CONTACT)).append("\\n");
                                                if(sTokens.equals("COMPANY_NAME") && info.getString(FieldNames.COMPANY_NAME)!=null && info.getString(FieldNames.COMPANY_NAME).length()>0)
                                                    st.append("Company Name: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.COMPANY_NAME))).append("\\n");
                                                if(sTokens.equals("ZIP_CODE") && info.getString(FieldNames.ZIP_CODE)!=null && info.getString(FieldNames.ZIP_CODE).length()>0)
                                                    st.append("Zip/ Postal Code: ").append(info.getString(FieldNames.ZIP_CODE)).append("\\n");
                                                if(sTokens.equals("CITY") && info.getString(FieldNames.CITY)!=null && info.getString(FieldNames.CITY).length()>0)
                                                    st.append("City: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.CITY))).append("\\n");
                                                if(sTokens.equals("STATE") && info.getString(FieldNames.STATE)!=null && info.getString(FieldNames.STATE).length()>0 && !info.get(FieldNames.STATE).equals("-1"))
                                                    st.append("State: ").append(RegionMgr.newInstance().getRegionsDAO().getStateName(info.getString(FieldNames.STATE))).append("\\n");
                                                if(sTokens.equals("COUNTRY") && info.getString(FieldNames.COUNTRY)!=null && info.getString(FieldNames.COUNTRY).length()>0 && !info.get(FieldNames.COUNTRY).equals("-1"))
                                                    st.append("Country: ").append(NewPortalUtils.getCountryName(info.getString(FieldNames.COUNTRY))).append("\\n");

                                            }
                                            //SC_Sch_B_16051 : ends
                                            if(sTokens.equals("EMAIL_ID") && info.getString(FieldNames.EMAIL_IDS)!=null && info.getString(FieldNames.EMAIL_IDS).length()>0)
                                                st.append("Email id: ").append(info.getString(FieldNames.EMAIL_IDS)).append("\\n");
                                            if(sTokens.equals("FAX_NUMBERS") && info.getString(FieldNames.FAX_NUMBERS)!=null && info.getString(FieldNames.FAX_NUMBERS).length()>0)
                                                st.append("Fax: ").append(info.getString(FieldNames.FAX_NUMBERS)).append("\\n");
                                            if(sTokens.equals("MOBILE_NUMBERS") && info.getString(FieldNames.MOBILE_NUMBERS)!=null && info.getString(FieldNames.MOBILE_NUMBERS).length()>0)
                                                st.append("Mobile No: ").append(info.getString(FieldNames.MOBILE_NUMBERS)).append("\\n");
                                            if(sTokens.equals("PHONE_NUMBERS") && info.getString(FieldNames.PHONE_NUMBERS)!=null && info.getString(FieldNames.PHONE_NUMBERS).length()>0)
                                                st.append("Phone No: ").append(PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS))).append("\\n");
                                        }
                                        st.append("\\n");
                                        //st.append(signature.replaceAll("\r\n "," ").replaceAll("\\<html dir=\"ltr\"\\>.*?\\<p\\>","").replaceAll("\\</p\\>.*?\\<p\\>", "\\\\n").replaceAll("\\</p\\>.*?\\</html\\>","").replaceAll("\\<.*?\\>","").replaceAll("&nbsp;"," ").replaceAll(",","\\\\,").replaceAll(",\r\n","\\,\\\\n")).append("\\n");     //modified for P_B_SCH_10903
                                        //st.append("Login: ").append(_baseConstants.HOST_NAME);  .replaceAll("\\r","\\\\n").replaceAll("\r\n","\\\\n")  .replaceAll("\\<.*?\\>","")  \t
                                        st.append("\r\n").append("\r\n").append("SUMMARY:" + mailSubjectLine+"\r\n").append("PRIORITY:3\r\n").append("ORGANIZER;CN="+lFirstName+" "+lLastName+":MAILTO:"+from+"\r\n");
                                        st.append("X-ALT-DESC:").append("");
                                        st.append("X-MICROSOFT-CDO-BUSYSTATUS:TENTATIVE\r\n");
                                        st.append("X-MICROSOFT-CDO-IMPORTANCE:1\r\n");
                                        st.append("X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY\r\n");
                                        st.append("X-MICROSOFT-DISALLOW-COUNTER:FALSE\r\n");
                                        st.append("X-MS-OLK-ALLOWEXTERNCHECK:TRUE\r\n");
                                        st.append("X-MS-OLK-AUTOSTARTCHECK:FALSE\r\n");
                                        st.append("X-MS-OLK-CONFTYPE:0\r\n");
                                        st.append("X-MS-OLK-SENDER;CN="+lFirstName+" "+lLastName+":MAILTO:"+from+"\r\n");
                                        st.append("END:VEVENT\r\n").append("END:VCALENDAR\r\n");
                                        if(from!=null && from.equals(To[0])){
                                            mailer.setReturnPath(from);
                                            from=_baseConstants.DEFAULT_FROM_EMAIL_ID;
                                        }
                                        mailer.sendMail(from, new String[]{To[0]}, null, null,  mailSubjectLine, st.toString() ,"text/calendar; method=REQUEST; charset=\"utf-8\"");
                                        Info mailHistory = new Info();
                                        mailHistory.set("USER_NO",userNo);
                                        mailHistory.set("MAIL_SEND_DATE",DateUtil.getCurrentDateTimeDB());
                                        mailHistory.set("SUBJECT",taskSubject);
                                        mailHistory.set("MAILTEXT",st);
                                        mailHistory.set("MAIL_FOR","ICS mails (tasks)");
                                        mailHistory.set("MAIL_TO",toEmail);
                                        mailHistory.set("MODULE_NAME","Contact Manager");
                                        mailHistory.set("OWNER_ID",multipleOwners[k]);
                                        mailHistory.set("LEAD_ID", contactID);
                                        NewPortalUtils.updateOwnerMailHistory(mailHistory);
                                    }catch(Exception e){
                                        e.printStackTrace();
                                        logger.info("There are some errors in sending task mail in ICS Format."+e);
                                    }
                                    try {
                                        smailId=(getMailIDInfo(multipleOwners[k])).getString("SMS_EMAIL");
                                        if(smailId!=null && !smailId.equals("null") && !smailId.trim().equals(""))
                                        {
                                            if(!"updateStatus".equals(event) && !"delete".equals(event)){
                                                To[1]=smailId;
                                                MailSender sMail=new MailSender();
                                                //mailText=taskBean.GetMail(info,"","2",emailContents,null,recurrInfo,sDateTime,duration,eDateTime);// USINSL-20120514-058
                                                mailText=GetMail(info,"","2",emailContents,null,recurrInfo,sDateTime,duration,eDateTime,null,null,null,null,null,null,null,null,null,null,null,null,null,otherAddressInfo,assignByUserName,event);// SC_Sch_B_16051
                                                sMail.sendMail(from, new String[]{To[1]}, null, null, ""+mailSubjectLine+"", mailText + "</td></tr></table></DIV></DIV></body></html>", "text/html");
                                                //sMail.sendMail(from,new String[] {To[1]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table></DIV></DIV></body></html>","text/html");
                                            }
                                        }
                                    }catch(Exception e){
                                        e.printStackTrace();
                                        logger.info("There are some errors in sending sms task mail."+e);
                                    }
                                    try {
                                        bmailId=(getMailIDInfo(multipleOwners[k])).getString("BLACKBERRY_EMAIL");
                                        if(bmailId!=null && !bmailId.equals("null") && !bmailId.trim().equals(""))
                                        {
                                            if(!"updateStatus".equals(event) && !"delete".equals(event)){
                                                To[2]=bmailId;
                                                mailText = GetMail(info, bbStartMailText, "1", bbEmailContents, null, recurrInfo, sDateTime, duration,eDateTime,recTask,null,null,null,null,null,null,null,null,productMap,multiMap,prevSubject,null,otherAddressInfo,assignByUserName,event);   //USINSL-20120514-058 
                                                //MailSender bMail=new MailSender();
                                                mailer.sendMail(from, new String[]{To[2]}, null, null, ""+mailSubjectLine+"", mailText + "</td></tr></table></DIV></DIV></body></html>", "text/html");
                                                //bMail.sendMail(from,new String[] {To[2]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table></DIV></DIV></body></html>","text/html");
                                            }
                                        }
                                    }catch(Exception e){
                                        e.printStackTrace();
                                        logger.info("There are some errors in sending blackberry task mail."+e);
                                    }
                                }
                            }
                        }
                    }
                    if(defaultmail != null && !defaultmail.trim().equals("null") && !defaultmail.trim().equals("") && defaultmail.trim().equalsIgnoreCase("Y")) {
                        if (defaultmaildata != null && !defaultmaildata.equals("null") && !defaultmaildata.trim().equals("")) {
                            for (int i = 0; i < multipleContacts.length; i++) {
                                Info info = getContactInfo(multipleContacts[i].replaceAll("'", "").trim(), multipleOwners[0]);
                                info.set("taskSubject", taskSubject);
                                To[0] = defaultmaildata;
                                try{
                                    StringBuffer st =new StringBuffer();
                                    st.append("BEGIN:VCALENDAR\r\n").append("PRODID:-//Microsoft Corporation//Outlook 11.0 MIMEDIR//EN\r\n");
                                    st.append("VERSION:2.0\r\n");
                                    st.append("X-MS-OLK-FORCEINSPECTOROPEN:TRUE\r\n");
                                    st.append("METHOD:REQUEST\n").append("BEGIN:VEVENT\r\n");
                                    st.append("ATTENDEE;CN="+To[0]+":MAILTO:"+To[0]+"\r\n");
                                    st.append("CLASS:PUBLIC\r\n");
                                    st.append("DTSTART:"+DateTime.getRequiredFormat(sDateTime, _baseConstants.DISPLAY_FORMAT_HMS, "yyyy-MM-dd HH:mm:ss").replaceAll("-","").replaceAll(":","").replaceAll(" ","T")).append("\r\n");
                                    st.append("DTEND:"+DateTime.getRequiredFormat(eDateTime, _baseConstants.DISPLAY_FORMAT_HMS, "yyyy-MM-dd HH:mm:ss").replaceAll("-","").replaceAll(":","").replaceAll(" ","T")).append("\r\n");
                                    st.append("UID:").append(IDGenerator.getNextKey()+"\r\n");
                                    st.append("DESCRIPTION:");
                                    if(startMailText!=null && startMailText.length()>0)
                                        st.append(""+startMailText.replaceAll("\\<html dir=\"ltr\"\\>.*?\\<p\\>","").replaceAll("\\</p\\>.*?\\<p\\>", "\\\\n").replaceAll("\\</p\\>.*?\\</html\\>","").replaceAll("\\<.*?\\>","").replaceAll("&nbsp;"," ").replaceAll(",","\\\\,")).append("\\n\\n"); //modified for P_B_SCH_10903
                                    if(recTask!=null && !recTask.equals(""))//USINSL-20120514-058:ENH
                                        st.append("MultiDay: ").append("Yes").append("\\n");
                                    String sTokens="";
                                    StringTokenizer str=new StringTokenizer(emailContents,", ");
                                    while(str.hasMoreTokens()){
                                        sTokens=str.nextToken();
                                        //SC_Sch_B_16051 :starts
                                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0)
                                        {
                                            if(sTokens.equals("ADDRESS") && otherAddressInfo.getString("ADDRESS")!=null && otherAddressInfo.getString("ADDRESS").length()>0)
                                                st.append("Address: ").append(PortalUtils.reverseFilterValue(otherAddressInfo.getString("ADDRESS")).replaceAll(",","\\\\,")).append("\\n");
                                            if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.getString(FieldNames.BEST_TIME_TO_CONTACT)!=null && info.getString(FieldNames.BEST_TIME_TO_CONTACT).length()>0)
                                                st.append("Best Time to Contact: ").append(info.getString(FieldNames.BEST_TIME_TO_CONTACT)).append("\\n");
                                            if(sTokens.equals("COMPANY_NAME") && info.getString(FieldNames.COMPANY_NAME)!=null && info.getString(FieldNames.COMPANY_NAME).length()>0)
                                                st.append("Company Name: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.COMPANY_NAME))).append("\\n");
                                            if(sTokens.equals("ZIP_CODE") && otherAddressInfo.get("ZIPCODE")!=null && otherAddressInfo.get("ZIPCODE").length()>0)
                                                st.append("Zip/ Postal Code: ").append(otherAddressInfo.get("ZIPCODE")).append("\\n");
                                            if(sTokens.equals("CITY") && otherAddressInfo.get("CITY")!=null && otherAddressInfo.get("CITY").length()>0)
                                                st.append("City: ").append(PortalUtils.reverseFilterValue(otherAddressInfo.get("CITY"))).append("\\n");
                                            if(sTokens.equals("STATE") && otherAddressInfo.get("STATE")!=null && otherAddressInfo.get("STATE").length()>0 && !otherAddressInfo.get("STATE").equals("-1"))
                                                st.append("State: ").append(RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))).append("\\n");
                                            if(sTokens.equals("COUNTRY") && otherAddressInfo.get("COUNTRY")!=null && otherAddressInfo.get("COUNTRY").length()>0 && !otherAddressInfo.get("COUNTRY").equals("-1"))
                                                st.append("Country: ").append(NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))).append("\\n");
                                        }else{
                                            if(sTokens.equals("NAME") && info.getString(FieldNames.FIRST_NAME)!=null && info.getString(FieldNames.LAST_NAME).length()>0)
                                                st.append("Name: "+PortalUtils.reverseFilterValue(info.getString(FieldNames.FIRST_NAME)).replaceAll(",","\\\\,")+" "+PortalUtils.reverseFilterValue(info.getString(FieldNames.LAST_NAME)).replaceAll(",","\\\\,")).append("\\n");
                                            if(sTokens.equals("ADDRESS") && info.getString(FieldNames.ADDRESS)!=null && info.getString(FieldNames.ADDRESS).length()>0)
                                                st.append("Address: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.ADDRESS)).replaceAll(",","\\\\,")).append("\\n");
                                            if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.getString(FieldNames.BEST_TIME_TO_CONTACT)!=null && info.getString(FieldNames.BEST_TIME_TO_CONTACT).length()>0)
                                                st.append("Best Time to Contact: ").append(info.getString(FieldNames.BEST_TIME_TO_CONTACT)).append("\\n");
                                            if(sTokens.equals("COMPANY_NAME") && info.getString(FieldNames.COMPANY_NAME)!=null && info.getString(FieldNames.COMPANY_NAME).length()>0)
                                                st.append("Company Name: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.COMPANY_NAME))).append("\\n");
                                            if(sTokens.equals("ZIP_CODE") && info.getString(FieldNames.ZIP_CODE)!=null && info.getString(FieldNames.ZIP_CODE).length()>0)
                                                st.append("Zip/ Postal Code: ").append(info.getString(FieldNames.ZIP_CODE)).append("\\n");
                                            if(sTokens.equals("CITY") && info.getString(FieldNames.CITY)!=null && info.getString(FieldNames.CITY).length()>0)
                                                st.append("City: ").append(PortalUtils.reverseFilterValue(info.getString(FieldNames.CITY))).append("\\n");
                                            if(sTokens.equals("STATE") && info.getString(FieldNames.STATE)!=null && info.getString(FieldNames.STATE).length()>0 && !info.get(FieldNames.STATE).equals("-1"))
                                                st.append("State: ").append(RegionMgr.newInstance().getRegionsDAO().getStateName(info.getString(FieldNames.STATE))).append("\\n");
                                            if(sTokens.equals("COUNTRY") && info.getString(FieldNames.COUNTRY)!=null && info.getString(FieldNames.COUNTRY).length()>0 && !info.get(FieldNames.COUNTRY).equals("-1"))
                                                st.append("Country: ").append(NewPortalUtils.getCountryName(info.getString(FieldNames.COUNTRY))).append("\\n");

                                        }
                                        //SC_Sch_B_16051 : ends

                                        if(sTokens.equals("EMAIL_ID") && info.getString(FieldNames.EMAIL_IDS)!=null && info.getString(FieldNames.EMAIL_IDS).length()>0)
                                            st.append("Email id: ").append(info.getString(FieldNames.EMAIL_IDS)).append("\\n");
                                        if(sTokens.equals("FAX_NUMBERS") && info.getString(FieldNames.FAX_NUMBERS)!=null && info.getString(FieldNames.FAX_NUMBERS).length()>0)
                                            st.append("Fax: ").append(info.getString(FieldNames.FAX_NUMBERS)).append("\\n");
                                        if(sTokens.equals("MOBILE_NUMBERS") && info.getString(FieldNames.MOBILE_NUMBERS)!=null && info.getString(FieldNames.MOBILE_NUMBERS).length()>0)
                                            st.append("Mobile No: ").append(info.getString(FieldNames.MOBILE_NUMBERS)).append("\\n");
                                        if(sTokens.equals("PHONE_NUMBERS") && info.getString(FieldNames.PHONE_NUMBERS)!=null && info.getString(FieldNames.PHONE_NUMBERS).length()>0)
                                            st.append("Phone No: ").append(PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS))).append("\\n");
                                    }
                                    st.append("\\n");
                                    //st.append(signature.replaceAll("\r\n "," ").replaceAll("\\<html dir=\"ltr\"\\>.*?\\<p\\>","").replaceAll("\\</p\\>.*?\\<p\\>", "\\\\n").replaceAll("\\</p\\>.*?\\</html\\>","").replaceAll("\\<.*?\\>","").replaceAll("&nbsp;"," ").replaceAll(",","\\\\,").replaceAll(",\r\n","\\,\\\\n")).append("\\n");    //modified for P_B_SCH_10903
                                    //st.append("Login: ").append(_baseConstants.HOST_NAME);
                                    st.append("\r\n").append("\r\n").append("SUMMARY:" + mailSubjectLine+"\r\n").append("PRIORITY:3\r\n").append("ORGANIZER;CN="+lFirstName+" "+lLastName+":MAILTO:"+from+"\r\n");
                                    st.append("X-ALT-DESC:").append("");
                                    st.append("X-MICROSOFT-CDO-BUSYSTATUS:TENTATIVE\r\n");
                                    st.append("X-MICROSOFT-CDO-IMPORTANCE:1\r\n");
                                    st.append("X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY\r\n");
                                    st.append("X-MICROSOFT-DISALLOW-COUNTER:FALSE\r\n");
                                    st.append("X-MS-OLK-ALLOWEXTERNCHECK:TRUE\r\n");
                                    st.append("X-MS-OLK-AUTOSTARTCHECK:FALSE\r\n");
                                    st.append("X-MS-OLK-CONFTYPE:0\r\n");
                                    st.append("X-MS-OLK-SENDER;CN="+lFirstName+" "+lLastName+":MAILTO:"+from+"\r\n");
                                    st.append("END:VEVENT\r\n").append("END:VCALENDAR\r\n");
                                    if(from!=null && from.equals(To[0])){
                                        mailer.setReturnPath(from);
                                        from=_baseConstants.DEFAULT_FROM_EMAIL_ID;
                                    }
                                    mailer.sendMail(from, new String[]{To[0]}, null, null, mailSubjectLine,  st.toString(),"text/calendar; method=REQUEST; charset=\"utf-8\"");
                                    Info mailHistory = new Info();
                                    mailHistory.set("USER_NO",userNo);
                                    mailHistory.set("MAIL_SEND_DATE",DateUtil.getCurrentDateTimeDB());
                                    mailHistory.set("SUBJECT",taskSubject);
                                    mailHistory.set("MAILTEXT",st);
                                    mailHistory.set("MAIL_FOR","ICS mails (tasks)");
                                    mailHistory.set("MAIL_TO",toEmail);
                                    mailHistory.set("MODULE_NAME","Contact Manager");
                                    mailHistory.set("OWNER_ID", multipleOwners[0]);
                                    mailHistory.set("LEAD_ID", contactID);
                                    NewPortalUtils.updateOwnerMailHistory(mailHistory);
                                }catch(Exception e){
                                    e.printStackTrace();
                                    logger.info("There are some errors in sending task mail in ICS Format."+e);
                                }
                            }
                        }
                    }
                }
                if(sendMailToContact){
                    contactUser = "Y";
                }else{
                    contactUser = null;
                }
                if(sendMailToContactModify == true){

                    if(StringUtil.isValidNew(recTask) && "yes".equals(recTask))
                        taskType = "multipleToContact";
                    else
                        taskType = "singleToContact" ;
                    mailInfo = getMailInfo(taskType);
                    emailContents = mailInfo.getString("EMAIL_FIELDS");
                    bbEmailContents = mailInfo.getString("OTHER_EMAIL_FIELDS");
                    startMailText = mailInfo.getString("EMAIL_CONTENT");
                    bbStartMailText = mailInfo.getString("OTHER_EMAIL_CONTENT");
                    if(StringUtil.isValidNew(mailInfo.getString("SUBJECT")) &&  !"reschedule".equals(event) && !"delete".equals(event) && !"updateStatus".equals(event) && !"taskCancelled".equals(event)){
                        //mailSubjectLine = PortalUtils.reverseFilterValue(mailInfo.getString("SUBJECT")); //modified for P_B_SCH_15639
                        //mailSubjectLine = taskSubject;
                        mailSubjectLine = taskSubjectMailLine;
                    } else{
                        //mailSubjectLine = taskSubject; //modified for P_B_SCH_15639
                        mailSubjectLine = taskSubjectMailLine;
                    }

                    if (contactUser != null && !contactUser.trim().equals("null") && !contactUser.trim().equals("") && contactUser.trim().equalsIgnoreCase("Y")) {
                        Info info = getContactInfo(multipleContacts[0].replaceAll("'", "").trim(), multipleOwners[0]);
                        info.set("taskSubject", taskSubject);
                        //String clientName = MasterDataMgr.newInstance().getMasterDataDAO().getValueForScheduler(10009,"0");
                        //String subjectLine="Service  Delivery Confirmation Mail from "+clientName+": ";
                        //String subjectLine=clientName+" : Appointment details";
                        //MailSender ceMail = new MailSender();
                        String contactMail = "";
                        String name = "";
                        //if(allContacts!=null && !allContacts.trim().equals("") && allContacts.contains(",")){
                        String[] multContacts = null;
                        if (allContacts.indexOf(",") != -1) {
                            multContacts = allContacts.split(",");
                        } else {
                            multContacts = new String[1];
                            multContacts[0] = allContacts;
                        }
                        //multContacts = allContacts.split(",");
                        for (int x = 0; x < multContacts.length; x++) {
                            try {
                                contactMail = LocationMgr.newInstance().getLocationsDAO().getContactEmailID(multContacts[x].replaceAll("'", "").trim());
                                name = CommonMgr.newInstance().getCommonCmDAO().getContactFLName(multContacts[x].replaceAll("'", "").trim());
                            } catch (Exception e) {
                                logger.info("Exception Occured While getting Email for Contact in Task manipulator" + e.getMessage());
                            }
                            To[0] = contactMail;
                            info.set("NAME", name);
                            mailText = GetMail(info, startMailText, "1,A", emailContents, assignTo, recurrInfo, sDateTime, duration,eDateTime,recTask,"contactMail",emailId,phone,nameOfOwner,address,city,state,country,productMap,multiMap,null,null,otherAddressInfo,assignByUserName,event);  //USINSL-20120514-058 modified by Prakriti Sharma
                            mailer.sendMail(from, new String[]{To[0]}, null, null, mailSubjectLine, mailText + "</table></td></tr><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">" + "<br>" +signature + "</p></td></tr></tbody></table></DIV></body></html>", "text/html");
                            setmailHistoryInfo(userNo, multipleOwners[0], contactID, taskSubject, mailText + "</td></tr></table><p><strong>" + signature + "</strong></p></DIV></DIV></body></html>", "ICS mails (tasks)", To[0]);
                        }
                    }
                }
            }
            //USINSL-20120514-058 addition by Prakriti Sharma ends 
            else {


                //USINSL-20120514-058 modificartion starts
                if(sendMailToOwnerOfTask==true){

                    if(StringUtil.isValidNew(recTask) && "yes".equals(recTask))
                        taskType = "multipleToOwner";
                    else
                        taskType = "singleToOwner" ;
                    mailInfo = getMailInfo(taskType);
                    emailContents = mailInfo.getString("EMAIL_FIELDS");
                    bbEmailContents = mailInfo.getString("OTHER_EMAIL_FIELDS");
                    startMailText = mailInfo.getString("EMAIL_CONTENT");
                    bbStartMailText = mailInfo.getString("OTHER_EMAIL_CONTENT");
                    if(StringUtil.isValidNew(mailInfo.getString("SUBJECT")) &&  !"reschedule".equals(event) && !"delete".equals(event) && !"updateStatus".equals(event) && !"taskCancelled".equals(event)){
                        //mailSubjectLine = PortalUtils.reverseFilterValue(mailInfo.getString("SUBJECT")); //modified for P_B_SCH_15639
                        //mailSubjectLine = taskSubject;
                        mailSubjectLine = taskSubjectMailLine;
                    } else{
                        //mailSubjectLine = taskSubject; //modified for P_B_SCH_15639
                        mailSubjectLine = taskSubjectMailLine;
                    }

                    if(!"111111111".equals(multipleOwners[0]) ){ //condition added for P_B_13567 ,the task mail send to Owner shall not be send if the Owner is unassigned.
                        for (int i = 0; i < multipleContacts.length; i++) {
                            for (int k=0; k< multipleOwners.length;k++) {
                                Info info = getContactInfo(multipleContacts[i].replaceAll("'", "").trim(), multipleOwners[k]);
                                info.set("taskSubject", taskSubject);

                                if (assignedToUser != null && !assignedToUser.trim().equals("null") && !assignedToUser.trim().equals("") && assignedToUser.trim().equalsIgnoreCase("Y")) {
                                    emailId=(getMailIDInfo(multipleOwners[k])).getString("EMAIL_ID");

                                    //if (isEmail != null && !isEmail.equals("null") && !isEmail.trim().equals("") && isEmail.trim().equals("Y")) {
                                    if (emailId != null && !emailId.equals("null") && !emailId.trim().equals("")) {
                                        try{
                                            //MailSender eMail = new MailSender();
                                            To[0] = emailId;
                                            if(allContacts!=null && !allContacts.trim().equals("") && allContacts.contains(",")){
                                                SequenceMap contactMap = new SequenceMap();
                                                String[] multContacts = null;
                                                multContacts = allContacts.split(",");
                                                for (int x = 0; x < multContacts.length; x++) {
                                                    Info contactInfo = getContactInfo(multContacts[x].replaceAll("'", "").trim(), multipleOwners[0]);
                                                    contactMap.put(multContacts[x], contactInfo);
                                                }
                                                mailText = GetMail(info, startMailText, "multipleTasks", emailContents, assignTo, recurrInfo, sDateTime, duration,eDateTime,null,"multiTaskMail",null,null,null,null,null,null,null,null,null,null,contactMap,null,assignByUserName,null);  //USINSL-20120514-058 modified by Prakriti Sharma
                                                mailer.sendMail(from, new String[]{To[0]}, null, null, ""+/*info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+" - "+*/mailSubjectLine/*+" - "+DateUtil.formatDate(sDateTime,_baseConstants.DISPLAY_FORMAT_HMA)*/+"", mailText + "</table></td></tr><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">" + "<br>" + signature + "</p></td></tr></tbody></table></DIV></body></html>", "text/html");//SC_SCH_B_13102
                                                //eMail.sendMail(from, new String[]{To[0]}, null, null, "Task â€œ"+taskSubject.replaceAll("&#39;","\'").replaceAll("&quot;","\"")+"â€� assigned to you ", mailText + "</table></td></tr><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">" + signature + "</p></td></tr></tbody></table></DIV></body></html>", "text/html");
                                            } else {
                                                mailText = GetMail(info, startMailText, "1", emailContents, assignTo, recurrInfo, sDateTime, duration,eDateTime,recTask,null,null,null,null,null,null,null,null,productMap,multiMap,prevSubject,null,otherAddressInfo,assignByUserName,event);  //USINSL-20120514-058 modified by Prakriti Sharma
                                                mailer.sendMail(from, new String[]{To[0]}, null, null, ""+/*info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+" - "+*/mailSubjectLine+/*" - "+DateUtil.formatDate(sDateTime,_baseConstants.DISPLAY_FORMAT_HMA)+*/"", mailText + "</table></td></tr><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">" + "<br>" + signature + "</p></td></tr></tbody></table></DIV></body></html>", "text/html");//SC_SCH_B_13102
                                            }
                                            setmailHistoryInfo(userNo, multipleOwners[k], contactID, mailSubjectLine, mailText + "</td></tr></table><p><strong>" + signature + "</strong></p></DIV></DIV></body></html>", "ICS mails (tasks)", To[0]);
                                        } catch (Exception e) {
                                            logger.info("Exception Occured in sending mail to owner for email id" + e.getMessage());
                                            e.printStackTrace();
                                        }
                                    }

                                    //}
                                    //if (isSmail != null && !isSmail.equals("null") && !isSmail.trim().equals("") && isSmail.trim().equals("Y")) {
                                    smailId=(getMailIDInfo(multipleOwners[k])).getString("SMS_EMAIL");
                                    if (smailId != null && !smailId.equals("null") && !smailId.trim().equals("")) {
                                        try{

                                            //MailSender sMail = new MailSender();
                                            To[1] = smailId;
                                            mailText = GetMail(info, "", "2", emailContents, null, recurrInfo, sDateTime, duration,eDateTime,null,null,null,null,null,null,null,null,null,null,null,null,null,otherAddressInfo,assignByUserName,null);  //USINSL-20120514-058 modified by Prakriti Sharma
                                            mailer.sendMail(from, new String[]{To[1]}, null, null, ""/*+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+" - "*/+mailSubjectLine+/*" - "+DateUtil.formatDate(sDateTime,_baseConstants.DISPLAY_FORMAT_HMA)+*/"", mailText + "</td></tr></table></DIV></DIV></body></html>", "text/html");//SC_SCH_B_13102
                                            setmailHistoryInfo(userNo, multipleOwners[k], contactID, mailSubjectLine, mailText + "</td></tr></table><p><strong>" + signature + "</strong></p></DIV></DIV></body></html>", "ICS mails (tasks)", To[1]);

                                        } catch (Exception e) {
                                            logger.info("Exception Occured in sending sms mail to owner" + e.getMessage());
                                        }
                                    }
                                    //}
                                    //if (isBmail != null && !isBmail.equals("null") && !isBmail.trim().equals("") && isBmail.trim().equals("Y")) {
                                    bmailId=(getMailIDInfo(multipleOwners[k])).getString("BLACKBERRY_EMAIL");
                                    if (bmailId != null && !bmailId.equals("null") && !bmailId.trim().equals("")) {
                                        try{

                                            mailText = GetMail(info, bbStartMailText, "1", bbEmailContents, null, recurrInfo, sDateTime, duration,eDateTime,recTask,null,null,null,null,null,null,null,null,productMap,multiMap,prevSubject,null,otherAddressInfo,assignByUserName,event);  //USINSL-20120514-058 modified by Prakriti Sharma
                                            //MailSender bMail = new MailSender();
                                            To[2] = bmailId;
                                            mailer.sendMail(from, new String[]{To[2]}, null, null, ""/*+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+" - "*/+mailSubjectLine+/*" - "+DateUtil.formatDate(sDateTime,_baseConstants.DISPLAY_FORMAT_HMA)+*/"", mailText + "</td></tr></table></DIV></DIV></body></html>", "text/html");//SC_SCH_B_13102
                                            setmailHistoryInfo(userNo, multipleOwners[k], contactID, mailSubjectLine, mailText + "</td></tr></table><p><strong>" + signature + "</strong></p></DIV></DIV></body></html>", "ICS mails (tasks)", To[2]);

                                        } catch (Exception e) {
                                            logger.info("Exception Occured in sending blackberry mail to owner" + e.getMessage());
                                        }
                                    }
                                    //}
                                    //}
                                }
                            }
                        }
                    }
                    if (defaultmail != null && !defaultmail.trim().equals("null") && !defaultmail.trim().equals("") && defaultmail.trim().equalsIgnoreCase("Y")) {
                        try{
                            if (defaultmaildata != null && !defaultmaildata.equals("null") && !defaultmaildata.trim().equals("")) {
                                for (int i = 0; i < multipleContacts.length; i++) {
                                    Info info = getContactInfo(multipleContacts[i].replaceAll("'", "").trim(), multipleOwners[0]);
                                    info.set("taskSubject", taskSubject);
                                    To[0] = defaultmaildata;
                                    //MailSender cdeMail = new MailSender();
                                    info.set("NAME", "");
                                    mailText = GetMail(info, startMailText, "1", emailContents, null, recurrInfo, sDateTime, duration,eDateTime,recTask,null,null,null,null,null,null,null,null,productMap,multiMap,prevSubject,null,otherAddressInfo,assignByUserName,event);  //USINSL-20120514-058 modified by Prakriti Sharma


                                    mailer.sendMail(from, new String[]{To[0]}, null, null, ""+/*info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+" - "+*/mailSubjectLine+/*" - "+DateUtil.formatDate(sDateTime,_baseConstants.DISPLAY_FORMAT_HMA)+*/"", mailText + "</table></td></tr><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">" + "<br>" + signature + "</p></td></tr></tbody></table></DIV></body></html>", "text/html");//SC_SCH_B_13102
                                    setmailHistoryInfo(userNo, multipleOwners[0], contactID, mailSubjectLine, mailText + "</td></tr></table><p><strong>" + signature + "</strong></p></DIV></DIV></body></html>", "ICS mails (tasks)", To[0]);
                                }
                            }
                        } catch (Exception e) {
                            logger.info("Exception Occured in sending defaultmail to the id" + e.getMessage());
                            e.printStackTrace();
                        }
                    }
                }
                if(sendMailToContact){
                    contactUser = "Y";
                }else{
                    contactUser = null;
                }
                if(sendMailToContactModify == true){

                    if(StringUtil.isValidNew(recTask) && "yes".equals(recTask))
                        taskType = "multipleToContact";
                    else
                        taskType = "singleToContact" ;
                    mailInfo = getMailInfo(taskType);
                    emailContents = mailInfo.getString("EMAIL_FIELDS");
                    bbEmailContents = mailInfo.getString("OTHER_EMAIL_FIELDS");
                    startMailText = mailInfo.getString("EMAIL_CONTENT");
                    bbStartMailText = mailInfo.getString("OTHER_EMAIL_CONTENT");
                    if(StringUtil.isValidNew(mailInfo.getString("SUBJECT")) &&  !"reschedule".equals(event) && !"delete".equals(event) && !"updateStatus".equals(event) && !"taskCancelled".equals(event)){
                        //mailSubjectLine = PortalUtils.reverseFilterValue(mailInfo.getString("SUBJECT")); //modified for P_B_SCH_15639
                        //mailSubjectLine = taskSubject;
                        mailSubjectLine = taskSubjectMailLine;
                    } else{
                        //mailSubjectLine = taskSubject; //modified for P_B_SCH_15639
                        mailSubjectLine = taskSubjectMailLine;
                    }


                    if (contactUser != null && !contactUser.trim().equals("null") && !contactUser.trim().equals("") && contactUser.trim().equalsIgnoreCase("Y")) {
                        try{
                            Info info =getContactInfo(multipleContacts[0].replaceAll("'", "").trim(), multipleOwners[0]);
                            info.set("taskSubject", taskSubject);
                            //String clientName = MasterDataMgr.newInstance().getMasterDataDAO().getValueForScheduler(10009,"0");
                            //String subjectLine="Service  Delivery Confirmation Mail from "+clientName+": ";
                            //String subjectLine=clientName+" : Appointment details";
                            //MailSender ceMail = new MailSender();
                            String contactMail = "";
                            String name = "";
                            //if(allContacts!=null && !allContacts.trim().equals("") && allContacts.contains(",")){
                            String[] multContacts = null;
                            if (allContacts.indexOf(",") != -1) {
                                multContacts = allContacts.split(",");
                            } else {
                                multContacts = new String[1];
                                multContacts[0] = allContacts;
                            }
                            //multContacts = allContacts.split(",");
                            for (int x = 0; x < multContacts.length; x++) {
                                try {
                                    contactMail = LocationMgr.newInstance().getLocationsDAO().getContactEmailID(multContacts[x].replaceAll("'", "").trim());
                                    name = CommonMgr.newInstance().getCommonCmDAO().getContactFLName(multContacts[x].replaceAll("'", "").trim());
                                } catch (Exception e) {
                                    logger.info("Exception Occured While getting Email for Contact in Task manipulator" + e.getMessage());
                                }
                                To[0] = contactMail;
                                info.set("NAME", name);
                                mailText = GetMail(info, startMailText, "1,A", emailContents, assignTo, recurrInfo, sDateTime, duration,eDateTime,recTask,"contactMail",emailId,phone,nameOfOwner,address,city,state,country,productMap,multiMap,null,null,otherAddressInfo,assignByUserName,event);  //USINSL-20120514-058 modified by Prakriti Sharma


                                mailer.sendMail(from, new String[]{To[0]}, null, null, mailSubjectLine, mailText + "</table></td></tr><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">" + "<br>" + signature + "</p></td></tr></tbody></table></DIV></body></html>", "text/html");
                                setmailHistoryInfo(userNo, multipleOwners[0], contactID, mailSubjectLine, mailText + "</td></tr></table><p><strong>" + signature + "</strong></p></DIV></DIV></body></html>", "ICS mails (tasks)", To[0]);
                            }
                        } catch (Exception e) {
                            logger.info("Exception Occured in sending contact mail.." + e.getMessage());
                            e.printStackTrace();
                        }
                    }
                }
            }//USINSL-20120514-058 modifictaion ends.
        }
    }

    public static void setmailHistoryInfo(String userNo, String ownerId, String contactId, String subject, String message, String mailFor, String to) {
        try {
            Info mailHistory = new Info();
            mailHistory.set("USER_NO", userNo);
            mailHistory.set("OWNER_ID", ownerId);
            mailHistory.set("LEAD_ID", contactId);
            mailHistory.set("MAIL_SEND_DATE", DateUtil.getCurrentDateTimeDB());
            mailHistory.set("SUBJECT", subject);
            mailHistory.set("MAILTEXT", message);
            mailHistory.set("MAIL_FOR", mailFor);
            mailHistory.set("MODULE_NAME", "Contact Manager");
            mailHistory.set("MAIL_TO", to);
            NewPortalUtils.updateOwnerMailHistory(mailHistory);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }






    public static void sendMailforAssignedTask(String contactID,String assignTo,String taskSubject, String franchiseeNo,Info recurrInfo,String sDateTime,String duration)
    {


        //Number of users mail need to be sent...?
        boolean isEmailenabled=false;
        String taskMail="";
        Info usersInfo = TaskMgr.newInstance().getTaskDAO().getUsersMailInfo(franchiseeNo);
        taskMail=usersInfo.getString("DO_NOT_SEND_EMAIL");
        if(taskMail==null || taskMail.trim().equals("") || taskMail.trim().equalsIgnoreCase("null"))
            taskMail="N";

        if(taskMail.trim().equalsIgnoreCase("N"))
        {
            String assignedToUser=usersInfo.getString("ASSIGN_TO");
            String contactUser=usersInfo.getString("CONTACT");
            String defaultmail=usersInfo.getString("DEFAULT_EMAIL");
            String defaultmaildata=usersInfo.getString("DEFAULT_EMAIL_DATA");

            String emailId="";
            String smailId="";
            String bmailId="";

            String isEmail="";
            String isBmail="";
            String isSmail="";

            String [] To=new String[]{"","","",""};

            Info mailConfigInfo= new Info();
            Info mailIdInfo=new Info();

            //Get Information about mail Configuration.
            Info mailInfo=getMailInfo();
            if(assignedToUser!=null && !assignedToUser.trim().equals("null") && !assignedToUser.trim().equals("") && assignedToUser.trim().equalsIgnoreCase("Y"))
            {
                //Get All Three EmailIds of users Whome the Task has been assigned.
                mailIdInfo=getMailIDInfo(assignTo);
                //Getting Email Ids seperatly.
                isEmailenabled=AdminMgr.newInstance().getAdminConfigurDAO().getEmailFlagStatus(assignTo,"16");   //P_E_NOTIFY
                if(isEmailenabled)
                    emailId=mailIdInfo.getString("EMAIL_ID");
                smailId=mailIdInfo.getString("SMS_EMAIL");
                bmailId=mailIdInfo.getString("BLACKBERRY_EMAIL");
                if(isEmailenabled)                  //P_E_NOTIFY
                    To[0]=mailIdInfo.getString("EMAIL_ID");
                To[1]=mailIdInfo.getString("SMS_EMAIL");
                To[2]=mailIdInfo.getString("BLACKBERRY_EMAIL");



                //Know All the Places where Emails need to be sent (E.g: SMS,Email,Black Berry).
                mailConfigInfo= TaskMgr.newInstance().getTaskDAO().getMailConfigInfo(assignTo);
                //Which Email Ids have been Configured to receive Mail.
                isEmail=mailConfigInfo.getString("EMAIL_ID");
                isBmail=mailConfigInfo.getString("BLACKBERRY_EMAIL");
                isSmail=mailConfigInfo.getString("SMS_EMAIL");

            }



            String emailContents=mailInfo.getString("OTHER_EMAIL_FIELDS");
            String from=mailInfo.getString("FROM_EMAIL");
            if(from==null || from.trim().equals("") || from.trim().equalsIgnoreCase("null"))
            {
                from=MultiTenancyUtil.getTenantConstants().DEFAULT_FROM_EMAIL_ID;//P_CM_E_Default_From_Email_ID by devendra
            }
            String startMailText=mailInfo.getString("EMAIL_CONTENT");
            String bbStartMailText=mailInfo.getString("OTHER_EMAIL_CONTENT");

            String signature=mailInfo.getString("EMAIL_SIGNATURE");
            if(signature==null || signature.trim().equals("null"))
                signature="";
            if(signature!=null && !signature.trim().equals("null") && !signature.trim().equals(""))
            {
                signature=signature.replaceAll("\\r","<br>");
                signature=signature.replaceAll("\\n","<br>");
            }



            String mailText="";
            MailSender mailer=new MailSender();
            String [] multipleContacts=null;

            if(contactID.indexOf(",")!=-1)
                multipleContacts=contactID.split(",");
            else
            {
                multipleContacts=	new String[1];
                multipleContacts[0]=contactID;

            }

            //    	If MailIds are Configured (Yes in  TASK_MAIL_CONFIG) and That Mail ID is not Blank or null That Mail ID Should receive a mail.
            for(int i=0;i<multipleContacts.length;i++)
            {
                //    		Get All details Of Contacts for given Contact ID.
                Info info=getContactInfo(multipleContacts[i].replaceAll("'","").trim(),assignTo);
                info.set("taskSubject", taskSubject);
                if(assignedToUser!=null && !assignedToUser.trim().equals("null") && !assignedToUser.trim().equals("") && assignedToUser.trim().equalsIgnoreCase("Y"))
                {

                    if(mailConfigInfo.size()==0)
                    {


                        mailText=GetMail(info,startMailText,"1",emailContents,null,recurrInfo,sDateTime,duration,null);

                        mailer.sendMail(from,new String[] {To[0]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table><p><strong>"+signature+"</strong></p></DIV></DIV></body></html>","text/html");
                    }
                    else
                    {

                        if(isEmail!=null && !isEmail.equals("null") && !isEmail.trim().equals("") && isEmail.trim().equals("Y"))
                        {

                            if(emailId!=null && !emailId.equals("null") && !emailId.trim().equals(""))
                            {
                                MailSender eMail=new MailSender();



                                mailText=GetMail(info,startMailText,"1",emailContents,null,recurrInfo,sDateTime,duration,null);
                                eMail.sendMail(from,new String[] {To[0]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table><p><strong>"+signature+"</strong></p></DIV></DIV></body></html>","text/html");
                            }
                        }
                        if(isSmail!=null && !isSmail.equals("null") && !isSmail.trim().equals("") && isSmail.trim().equals("Y"))
                        {
                            if(smailId!=null && !smailId.equals("null") && !smailId.trim().equals(""))
                            {
                                MailSender sMail=new MailSender();
                                mailText=GetMail(info,"","2",emailContents,null,recurrInfo,sDateTime,duration,null);
                                sMail.sendMail(from,new String[] {To[1]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table></DIV></DIV></body></html>","text/html");
                            }
                        }
                        if(isBmail!=null && !isBmail.equals("null") && !isBmail.trim().equals("") && isBmail.trim().equals("Y"))
                        {
                            if(bmailId!=null && !bmailId.equals("null") && !bmailId.trim().equals(""))
                            {
                                mailText=GetMail(info,bbStartMailText,"1",emailContents,null,recurrInfo,sDateTime,duration,null);
                                MailSender bMail=new MailSender();
                                bMail.sendMail(from,new String[] {To[2]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table></DIV></DIV></body></html>","text/html");
                            }
                        }

                    }
                }

                if(contactUser!=null && !contactUser.trim().equals("null") && !contactUser.trim().equals("") && contactUser.trim().equalsIgnoreCase("Y"))
                {
                    String contactMail="";
                    String name="";
                    try
                    {

                        contactMail = LocationMgr.newInstance().getLocationsDAO().getContactEmailID(multipleContacts[i].replaceAll("'","").trim());
                        name=CommonMgr.newInstance().getCommonCmDAO().getContactFLName(multipleContacts[i].replaceAll("'","").trim());

                    }catch (Exception e)
                    {
                        logger.info("Exception Occured While getting Email for Contact in Task manipulator"+e.getMessage());
                    }
                    if(contactMail!=null && !contactMail.equals("null") && !contactMail.trim().equals(""))
                    {
                        To[0]=contactMail;
                        MailSender ceMail=new MailSender();
                        info.set("NAME",name);
                        mailText=GetMail(info,startMailText,"1,A",emailContents,assignTo,recurrInfo,sDateTime,duration,null);
                        ceMail.sendMail(from,new String[] {To[0]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table><p><strong>"+signature+"</strong></p></DIV></DIV></body></html>","text/html");

                    }
                }

                if(defaultmail!=null && !defaultmail.trim().equals("null") && !defaultmail.trim().equals("") && defaultmail.trim().equalsIgnoreCase("Y"))
                {
                    if(defaultmaildata!=null && !defaultmaildata.equals("null") && !defaultmaildata.trim().equals(""))
                    {
                        To[0]=defaultmaildata;
                        MailSender cdeMail=new MailSender();
                        info.set("NAME","");
                        mailText=GetMail(info,startMailText,"1",emailContents,null,recurrInfo,sDateTime,duration,null);
                        cdeMail.sendMail(from,new String[] {To[0]},null,null,"New Sales Task: "+taskSubject,mailText+"</td></tr></table><p><strong>"+signature+"</strong></p></DIV></DIV></body></html>","text/html");

                    }
                }

            }


        }
    }

    public static void updateDateAndTime(String taskId,String assignTo,String previousAssignTo){
        String assignToTimeZone = UserTimezoneMap.newInstance().getTimezone(assignTo);
        String prevAssignToTimeZone = UserTimezoneMap.newInstance().getTimezone(previousAssignTo);
        String startTime = "";
        String endTime = "";
        String scheduleId = "";
        ResultSet result = null;
        int year = 0;
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        try {
            if(StringUtil.isValid(assignToTimeZone) && StringUtil.isValid(prevAssignToTimeZone) &&
                    !assignToTimeZone.equals(prevAssignToTimeZone)) {

                String query  = "SELECT START_DATETIME,END_DATETIME,CS.SCHEDULE_ID FROM CAL_SCHEDULES CS , CAL_TASKS_MAPPING CTM WHERE CS.SCHEDULE_ID=CTM.SCHEDULE_ID AND CTM.TASK_ID = ?";
                result = QueryUtil.getResult(query, new String[]{taskId});
                if(result.next()) {


                    java.sql.Timestamp tStamp=result.getTimestamp("START_DATETIME");
                    if(tStamp!=null && !tStamp.toString().equals("")&&!tStamp.toString().equals("null")){
                        year=Integer.parseInt(tStamp.toString().substring(0,4));
                        if(year>0){
                            try{

                                startTime				= TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,prevAssignToTimeZone,
                                        DateTime.getDateTime(tStamp,TimeZoneUtils.DB_DATETIME),
                                        TimeZoneUtils.DB_DATETIME,
                                        TimeZoneUtils.DB_DATETIME );


                                startTime				= TimeZoneUtils.performUTCConversion(assignToTimeZone,_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,
                                        startTime,
                                        TimeZoneUtils.DB_DATETIME,
                                        TimeZoneUtils.DB_DATETIME );


                            }catch(Exception e){
                                logger.error("exception while converting into time zone",e);
                            }
                        }
                    }


                    tStamp=result.getTimestamp("END_DATETIME");
                    if(tStamp!=null && !tStamp.toString().equals("")&&!tStamp.toString().equals("null")){
                        year=Integer.parseInt(tStamp.toString().substring(0,4));
                        if(year>0){
                            try{
                                endTime				= TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,prevAssignToTimeZone,
                                        DateTime.getDateTime(tStamp,TimeZoneUtils.DB_DATETIME),
                                        TimeZoneUtils.DB_DATETIME,
                                        TimeZoneUtils.DB_DATETIME );

                                endTime				= TimeZoneUtils.performUTCConversion(assignToTimeZone,_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,
                                        endTime,
                                        TimeZoneUtils.DB_DATETIME,
                                        TimeZoneUtils.DB_DATETIME );


                            }catch(Exception e){
                                logger.error("exception while converting into time zone",e);
                            }
                        }
                    }

                    scheduleId = result.getString("SCHEDULE_ID");

                    if(StringUtil.isValid(endTime) && StringUtil.isValid(startTime)) {
                        query = "UPDATE CAL_SCHEDULES SET START_DATETIME =? ,END_DATETIME=? WHERE SCHEDULE_ID = ?";
                        QueryUtil.update(query, new String[]{startTime,endTime,scheduleId});

                        query = "UPDATE SERVICE314_TASKS SET DATE =? WHERE TASK_ID = ?";
                        QueryUtil.update(query, new String[]{startTime,taskId});
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            logger.error("exception while converting into time zone", e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
    }

    public static void updateDuration(String taskID, String timeDiff) {
        try {
            String dateFromQuery = "";
            String dateFromQueryForVan = "";
            String durationQuery = "";
            int result = 0;
            StringBuffer sbQuery=null;

            if(StringUtil.isValid(timeDiff)){
                //dateFromQuery = " , END_DATETIME = DATE_ADD(DATE_ADD(END_DATETIME, INTERVAL DATEDIFF('"+date+"',END_DATETIME) DAY) , INTERVAL '"+duration+"' HOUR_MINUTE)  ";
                dateFromQuery = " , CS.END_DATETIME = DATE_ADD(CS.END_DATETIME, INTERVAL '"+timeDiff+"' HOUR_MINUTE)  ";
                dateFromQueryForVan = " , ST.END_TIME = DATE_ADD(ST.END_TIME, INTERVAL '"+timeDiff+"' HOUR_MINUTE)  ";


                sbQuery = new StringBuffer(" UPDATE CAL_SCHEDULES CS , CAL_TASKS_MAPPING CTM SET SCHEDULE_TYPE=SCHEDULE_TYPE "+dateFromQuery+"  WHERE CS.SCHEDULE_ID=CTM.SCHEDULE_ID AND TASK_ID = '");
                sbQuery.append(taskID);
                sbQuery.append("'");

                result = QueryUtil.update(sbQuery.toString(), new String[]{});

                durationQuery = "SELECT TIMEDIFF(CS.END_DATETIME, CS.START_DATETIME ) AS DURATION FROM CAL_SCHEDULES CS,CAL_TASKS_MAPPING CTM WHERE CS.SCHEDULE_ID=CTM.SCHEDULE_ID AND CTM.TASK_ID = '"+taskID+"'";

                sbQuery = new StringBuffer(" UPDATE SERVICE314_TASKS ST SET ST.MODULE_ID=ST.MODULE_ID, ST.DURATION=("+durationQuery+")  WHERE ST.TASK_ID = '");
                sbQuery.append(taskID);
                sbQuery.append("'");

                result = QueryUtil.update(sbQuery.toString(), new String[]{});


                sbQuery = new StringBuffer(" UPDATE THEATERS_ACTIVITY ST SET ST.DURATION=("+durationQuery+") "+dateFromQueryForVan+"  WHERE ST.TASK_ID = '");
                sbQuery.append(taskID);
                sbQuery.append("'");

                result = QueryUtil.update(sbQuery.toString(), new String[]{});


            }

        }
        catch (Exception e) {
            logger.error("Exception in batch update " + e);
            e.printStackTrace();
        }
    }

    public static void executeUpdateQuery(String taskID,String assigToQuery,String dateQuery,String dateFromQuery,String dateToQuery, String durationQuery,String assignTo ,String currentDate,String previousAssignTo,boolean flag,String assigToQueryForVan,String dateFromQueryForVan , String dateToQueryForVan,String isUserView){
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        int totalUpdates = 0;
        StringBuffer sbQuery=null;
        ArrayList<String> batchQuery = new ArrayList<String>();
        try{
            sbQuery = new StringBuffer(" UPDATE SERVICE314_TASKS SET MODULE_ID=MODULE_ID "+assigToQuery+dateQuery+durationQuery+"  WHERE TASK_ID = '");
            sbQuery.append(taskID);
            sbQuery.append("'");

            batchQuery.add(sbQuery.toString());

            sbQuery = null;
            sbQuery = new StringBuffer(" UPDATE CAL_SCHEDULES CS , CAL_TASKS_MAPPING CTM SET SCHEDULE_TYPE=SCHEDULE_TYPE "+dateFromQuery+dateToQuery+"  WHERE CS.SCHEDULE_ID=CTM.SCHEDULE_ID AND TASK_ID = '");
            sbQuery.append(taskID);
            sbQuery.append("'");
            batchQuery.add(sbQuery.toString());

            sbQuery = new StringBuffer(" UPDATE THEATERS_ACTIVITY SET THEATER_ACTIVITY_ID = THEATER_ACTIVITY_ID "+assigToQueryForVan+dateFromQueryForVan+dateToQueryForVan+durationQuery+"  WHERE TASK_ID = '");
            sbQuery.append(taskID);
            sbQuery.append("'");

            batchQuery.add(sbQuery.toString());

            if(isUserView!=null && isUserView.equalsIgnoreCase("yes")){

                if(StringUtil.isValidNew(currentDate)){

                    String userTimezone = UserTimezoneMap.newInstance().getTimezone(TaskMgr.newInstance().getTaskDAO().getTaskOwner(taskID));

                    String startDate = TimeZoneUtils.performUTCConversion(userTimezone,
                            _baseConstants.DB_TIMEZONE_TIMEZONEUTILS, currentDate+" 00:00:00",
                            TimeZoneUtils.DB_DATETIME, TimeZoneUtils.DB_DATETIME);

                    String endDate = TimeZoneUtils.performUTCConversion(userTimezone,
                            _baseConstants.DB_TIMEZONE_TIMEZONEUTILS, currentDate+" 23:59:00",
                            TimeZoneUtils.DB_DATETIME, TimeZoneUtils.DB_DATETIME);

                    sbQuery = null;
                    sbQuery = new StringBuffer(" UPDATE MULTIPLE_SCHEDULE_MAPPING CS SET SCHEDULE_ID=SCHEDULE_ID "+dateFromQuery+dateToQuery+"  WHERE TASK_ID = '");
                    sbQuery.append(taskID);
                    sbQuery.append("' AND");
                    sbQuery.append(" START_DATETIME >= ");
                    sbQuery.append("'");
                    sbQuery.append(startDate);
                    sbQuery.append("'");
                    sbQuery.append(" AND");
                    sbQuery.append(" START_DATETIME <= ");
                    sbQuery.append("'");
                    sbQuery.append(endDate);
                    sbQuery.append("'");
                    batchQuery.add(sbQuery.toString());
                }

                sbQuery = null;
                if(StringUtil.isValidNew(assignTo)){
                    sbQuery = new StringBuffer(" UPDATE TASKS_USERS_ASSIGNMENT_MAPPING SET USER_NO='"+assignTo+"' WHERE TASK_ID = '");
                    sbQuery.append(taskID);
                    sbQuery.append("'");
                    sbQuery.append(" AND USER_NO = '");
                    sbQuery.append(previousAssignTo);
                    sbQuery.append("'");
                    batchQuery.add(sbQuery.toString());
                }

                if(flag){
                    sbQuery = null;
                    if(StringUtil.isValidNew(assignTo)){
                        sbQuery = new StringBuffer(" UPDATE SERVICE314_TASKS SET ASSIGN_TO_OTHERS = CONCAT(REPLACE( REPLACE( REPLACE(ASSIGN_TO_OTHERS,',"+previousAssignTo+"','') ,'"+previousAssignTo+",','') ,'"+previousAssignTo+"' ,''),',"+assignTo+"') WHERE TASK_ID= '");
                        sbQuery.append(taskID);
                        sbQuery.append("'");
                        batchQuery.add(sbQuery.toString());
                    }
                }

                sbQuery = null;
                if(StringUtil.isValidNew(assignTo)){
                    sbQuery = new StringBuffer(" UPDATE SERVICE314_TASKS ST , TASKS_USERS_ASSIGNMENT_MAPPING TM SET ST.ASSIGN_TO = TM.USER_NO WHERE TM.TASK_ID = '"+taskID+"' AND ST.TASK_ID = '"+taskID+"' AND IS_ASSIGN_TO_OTHER='N' ");
                    batchQuery.add(sbQuery.toString());
                }

            }
            logger.info("--------------batchQuery--------------"+batchQuery);
            totalUpdates = QueryUtil.batchUpdate(batchQuery, new String[]{});

            sbQuery = null;
        } catch (Exception e) {
            logger.error("Exception in batch update " + e);
            e.printStackTrace();
        }
    }

    public static String getFranchiseeComboForRegion1(String comboName,String regionId, String selected ,String onChange,String multiple,String defaultValue)
    {
        return getFranchiseeComboForRegion1(comboName,regionId, selected ,onChange, multiple, defaultValue, null);
    }

    public static String getFranchiseeComboForRegion1(String comboName,String regionId, String selected ,String onChange,String multiple,String defaultValue,String className )
    {

        if(!StringUtil.isValid(className)){
            className = "multiple".equals(multiple) ? "form-control" : "multiList";	//P_B_GUI_805
        }

        StringBuilder htmlCombo =new StringBuilder("<select name=\""+comboName+"\" id=\""+comboName+"\"  style=\"width:172px;\"");
        htmlCombo.append(multiple);
        htmlCombo.append(" class=\""+className+"\"");
        htmlCombo.append(" onchange=\""+onChange+"\"");
        htmlCombo.append(">");

        if(defaultValue != null){
            htmlCombo.append("<option value=\"-1\" >"+defaultValue+"</option>");
        }

        htmlCombo.append(getFranchiseComboOptions(getFranchiseeResultSet(regionId, "yes")));	//"yes" parameter to show FO Locations

        htmlCombo.append("</select>");	//P_B_GUI_805	This line was added as select tag was not closed
        //P_B_CT_41480 starts
        if(StringUtil.isValid(selected) && selected.contains(",")){
            htmlCombo.append("<script>").append("$(\"#").append(comboName).append("\").val('").append(selected).append("'.split(','));").append("</script>");
        }else if(StringUtil.isValid(selected)){
            htmlCombo.append("<script>").append("$(\"#").append(comboName).append("\").val(").append(selected).append(");").append("</script>");
        }
        //P_B_CT_41480 ends
        return htmlCombo.toString();
    }

    //SMC_PW_OPT
    public static ResultSet getFranchiseeResultSet(String areaIds) {
    	return getFranchiseeResultSet(areaIds, null);
    }
    public static ResultSet getFranchiseeResultSet(String areaIds, String isFOLocationIncluded)
    {   String divisionIds=(String)(StrutsUtil.getHttpSession()).getAttribute("divisionIds");
        String query = "SELECT F.FRANCHISEE_NO ,F.FRANCHISEE_NAME FROM FRANCHISEE F  WHERE F.STATUS IN (1,2,3) AND IS_ADMIN='N' ";
        if("yes".equals(isFOLocationIncluded)){
  			query = query+" AND ( (IS_FRANCHISEE = 'Y') OR (IS_FRANCHISEE='N' AND IS_STORE ='Y'  AND IS_STORE_ARCHIVED='N') ) ";
  		}else{
  			query=query+" AND IS_FRANCHISEE IN ('Y') ";
  		}
        if(StringUtil.isValidNew(areaIds)){
            query=query+"  AND  F.AREA_ID IN("+areaIds+ ") ";
        }else{
            query=query+"  AND  F.AREA_ID IN(SELECT AREA_ID FROM AREAS WHERE IS_DELETED='N') ";
        }
         
        if(StringUtil.isValidNew(divisionIds))
        	 query=query+"AND (F.FRANCHISEE_NO IN ("+DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)+"))";
        
        query=query+" ORDER BY F.FRANCHISEE_NAME";

        return QueryUtil.getResult(query,null);
    }
    //SMC_PW_OPT
    public static String getFranchiseComboOptions(ResultSet result)
    {
        StringBuffer combo=new StringBuffer();

        if(result!=null && result.size()>0)
        {
            try
            {
                while(result.next())
                {
                    combo.append("<option value='"+result.getString("FRANCHISEE_NO")+"' >"+result.getString("FRANCHISEE_NAME")+"</option>");
                }
            }
            catch(Exception ex)
            {
                return FieldNames.EMPTY_STRING;
            }
            finally
            {
                QueryUtil.releaseResultSet(result);
            }
        }
        return combo.toString();
    }
    

    public static String getAreaId(String franId){
        return SQLUtil.getColumnValue("FRANCHISEE", "AREA_ID", "FRANCHISEE_NO", franId);
    }

    public static SequenceMap getHolidayDetailsMap(SequenceMap holidayMap,String userNo,String vInterval)
    {
        SequenceMap holidayDetailsMap=new SequenceMap();

        float tempFlt = 0.0f;
        boolean allDay = false;
        //String userTimezone=UserTimezoneMap.newInstance().getTimezone(userNo);


        if (holidayMap != null) {

            int size = holidayMap.size();

            for (int i = 0; i < size; i++) {

                tempFlt = 0.0f;
                Info info = (Info) holidayMap.get(i);

                String sDateTime=info.getTimestamp(FieldNames.START_DATE)+"";
                String eDateTime=info.getTimestamp(FieldNames.END_DATE)+"";

                //sDateTime=TimeZoneUtils.performUTCConversion(com.appnetix.app.control.web.multitenancy.util.MultiTenancyUtil.getTenantConstants().DB_TIMEZONE_TIMEZONEUTILS,userTimezone,sDateTime,TimeZoneUtils.DB_DATETIME,TimeZoneUtils.DB_DATETIME);
                //eDateTime=TimeZoneUtils.performUTCConversion(com.appnetix.app.control.web.multitenancy.util.MultiTenancyUtil.getTenantConstants().DB_TIMEZONE_TIMEZONEUTILS,userTimezone,eDateTime,TimeZoneUtils.DB_DATETIME,TimeZoneUtils.DB_DATETIME);

                String hour=Integer.parseInt((sDateTime+"").substring(11, 13))+"";
                String min=Integer.parseInt((sDateTime+"").substring(14, 16))+"";

                if(min!=null && min.trim().equals("30"))
                    min=".5";
                else if(min!=null && min.trim().equals("15"))
                    min=".25";
                else if(min!=null && min.trim().equals("45"))
                    min=".75";
                else if(min!=null && min.trim().equals("0"))
                    min=".0";
                String sTime=hour+min;

                hour=Integer.parseInt((eDateTime+"").substring(11, 13))+"";
                min=Integer.parseInt((eDateTime+"").substring(14, 16))+"";
                if(min!=null && min.trim().equals("30"))
                    min=".5";
                else if(min!=null && min.trim().equals("15"))
                    min=".25";
                else if(min!=null && min.trim().equals("45"))
                    min=".75";
                else if(min!=null && min.trim().equals("0"))
                    min=".0";
                String eTime=hour+min;

                float sfTime=0.0f;
                float efTime=0.0f;
                sfTime = Float.parseFloat(sTime);
                efTime = Float.parseFloat(eTime);

                while(sfTime < efTime)
                {
                    if(tempFlt <= sfTime)
                    {
                        holidayDetailsMap.put(sfTime, info.getString(FieldNames.HOLIDAY_ID));
                    }
                    if(vInterval!=null && vInterval.trim().equals("fifteen"))
                    {
                        sfTime = sfTime + 0.25f;
                    }
                    else
                    {
                        sfTime = sfTime + 0.5f;
                    }
                }
                if(tempFlt <= efTime)
                {
                    tempFlt = efTime;
                }

                String wholeDay=info.getString(FieldNames.ALL_DAY);
                if(wholeDay!=null && !wholeDay.trim().equals("null") && !wholeDay.trim().equals("") && wholeDay.trim().equals("Y"))
                {

                    allDay = true;
                    holidayDetailsMap = new SequenceMap();
                    holidayDetailsMap.put(FieldNames.HOLIDAY_ID,info.getString(FieldNames.HOLIDAY_ID));
                    holidayDetailsMap.put(FieldNames.SUBJECT,info.getString(FieldNames.SUBJECT));
                    holidayDetailsMap.put(FieldNames.ALL_DAY,info.getString(FieldNames.ALL_DAY));

                    break;
                }
            }
            if(!allDay)
            {
                holidayDetailsMap.put(FieldNames.ALL_DAY,"N");
            }
        }
        return holidayDetailsMap;
    }

    public static Info getRateCardInfo(String rateCardID)
    {
        StringBuffer query = new StringBuffer("SELECT RATE_CARD_ID,ADD_DATE,RATE_CARD_NAME,ADDED_BY,FRANCHISEE_NO,DISCOUNT_TYPE,IFNULL(DISCOUNT,0) AS DISCOUNT,TAX_TYPE,IFNULL(TAX,0) AS TAX,COVER_LETTER,COVER_LETTER_CHOICE,DESCRIPTION,DEFAULT_LOAD FROM RATE_CARD WHERE RATE_CARD_ID =?");
        Info info=null;
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        String consolidatedDiscount ="";
        String discountType = "";
        String taxType = "";
        String taxDisplay="";
        String tax="";
        String discount = "";
        ResultSet result = null;
        try
        {
            result = QueryUtil.getResult(query.toString(), new String[]{rateCardID});

            if(result!=null&&result.next())
            {
                info=new Info();
                discountType = result.getInString("DISCOUNT_TYPE");
                taxType = result.getString("TAX_TYPE");
                tax = result.getString("TAX");
                discount = result.getString("DISCOUNT");
                if("flat".equals(taxType))
                    taxDisplay = NumberFormatUtils.formatCommaNumber(tax)+" ("+_baseConstants.USER_CURRENCY+")";//SC_CT_B_14658
                else
                    taxDisplay = NumberFormatUtils.formatCommaNumber(tax)+" (%)";

                if("none".equals(discountType))
                    consolidatedDiscount = "None";
                else if("flat".equals(discountType))
                    consolidatedDiscount = NumberFormatUtils.formatCommaNumber(discount)+" ("+_baseConstants.USER_CURRENCY+")";
                else
                    consolidatedDiscount = NumberFormatUtils.formatCommaNumber(discount)+" (%)";

                info.set(FieldNames.FRANCHISE_NO, result.getString("FRANCHISEE_NO"));
                info.set(FieldNames.RATE_CARD_ID, result.getString("RATE_CARD_ID"));
                info.set(FieldNames.RATE_CARD_NAME, result.getString("RATE_CARD_NAME"));
                info.set(FieldNames.DESCRIPTION, result.getString("DESCRIPTION"));
                info.set(FieldNames.DISCOUNT_TYPE, discountType);
                info.set(FieldNames.CONSOLIDATED_DISCOUNT,consolidatedDiscount);
                info.set(FieldNames.DISCOUNT, NumberFormatUtils.formatNumberField(discount));
                info.set(FieldNames.TAX_TYPE,taxType );
                info.set(FieldNames.TAX, NumberFormatUtils.formatNumberField(tax));
                info.set(FieldNames.ADDED_BY, result.getString("ADDED_BY"));
                info.set(FieldNames.COVER_LETTER, result.getString("COVER_LETTER"));
                info.set(FieldNames.COVER_LETTER_CHOICE, result.getString("COVER_LETTER_CHOICE"));
                info.set(FieldNames.ADD_DATE, result.getString("ADD_DATE"));
                info.set(FieldNames.DEFAULT_LOAD, result.getString("DEFAULT_LOAD"));
                info.set("taxDisplay", taxDisplay);
            }

        }catch(Exception e)
        {
            logger.error("Error in getRateCardInfo"+e.getMessage());
            e.printStackTrace();
        }finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return info;

    }

    public static boolean isRecur(String date , Info scheduleInfo){
        Info schInfo=new Info();
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        date=date.replaceAll("/","-");
        date=DateUtil.getDateFormatChanged(date, "MM-dd-yyyy","MM-dd-yyyy").replaceAll("/","-");
        String startDateTime1=scheduleInfo.get(FieldNames.START_DATETIME);
        startDateTime1=DateTime.getDateInDBFormat(startDateTime1);
        startDateTime1=DateUtil.formatDate(startDateTime1, _baseConstants.DISPLAY_FORMAT);//YP_RECMULTI_ISSUE
        startDateTime1=startDateTime1.replaceAll("/","-");
        schInfo.set(FieldNames.START_DATETIME, startDateTime1);
        String endDateTime1=scheduleInfo.getString(FieldNames.END_DATETIME);
        endDateTime1=DateTime.getDateInDBFormat(endDateTime1);
        endDateTime1=DateUtil.formatDate(endDateTime1, _baseConstants.DISPLAY_FORMAT);//YP_RECMULTI_ISSUE
        endDateTime1=endDateTime1.replaceAll("/","-");
        schInfo.set(FieldNames.END_DATETIME, endDateTime1);
        String recurEndDateTime=scheduleInfo.getString(FieldNames.RECURRENCE_END_DATETIME);
        recurEndDateTime=DateTime.getDateInDBFormat(recurEndDateTime);
        recurEndDateTime=DateUtil.formatDate(recurEndDateTime, _baseConstants.DISPLAY_FORMAT);//YP_RECMULTI_ISSUE
        recurEndDateTime=recurEndDateTime.replaceAll("/","-");
        schInfo.set(FieldNames.RECURRENCE_END_DATETIME, recurEndDateTime);
        boolean bReturn			= false; //returing value
        try{
            //get the recurring pattern with the schedule
            String recurringFlag	= scheduleInfo.getString(FieldNames.RECURRENCE_FLAG);
            //get the start date of the schedule
            String startDateTime	= schInfo.getString(FieldNames.START_DATETIME);

            //String startDate		= startDateTime.substring(0,10);

            String occurrence	= scheduleInfo.getString(FieldNames.OCCURRENCE);


            if(recurringFlag != null && recurringFlag.equalsIgnoreCase("Y")){
                //schedule is recurring if flag = Y
                String recurEndDate		=schInfo.getString(FieldNames.RECURRENCE_END_DATETIME);
                int cmpDate				=-1;

                if(recurEndDate!=null && !recurEndDate.equals("")){
                    int year = -1;

                    if(!_baseConstants.isUSDateFormat){//P_SCH_B_61366 Added By Ankush Tanwar For Correct working of reccurence
                        year=Integer.parseInt(recurEndDate.substring(3,5));
                    }else{
                        year=Integer.parseInt(recurEndDate.substring(0,2));
                    }

                    if(year>0){
                        String recDate=null;
                        if(recurEndDate.length()=="dd MMM yyyy".length()){
                            if(!_baseConstants.isUSDateFormat){//P_SCH_B_61366 Added By Ankush Tanwar For Correct working of reccurence
                                recDate=DateTime.getRequiredFormat(recurEndDate,"MMM dd yyyy", _baseConstants.DISPLAY_FORMAT_DASH);
                            }else{
                                recDate=DateTime.getRequiredFormat(recurEndDate,"dd MMM yyyy", _baseConstants.DISPLAY_FORMAT_DASH);
                            }
                        }else if(recurEndDate.length()>=19){
                            recDate=DateTime.getRequiredFormat(recurEndDate.substring(0,19),TimeZoneUtils.DB_DATETIME, _baseConstants.DISPLAY_FORMAT_DASH);
                        }
                        else
                        {
                            recDate	=recurEndDate;
                        }
                        if(date.indexOf("-")!=-1){//P_SCH_B_61366 Added By Ankush Tanwar For Correct working of reccurence
                            cmpDate=DateTime.compareDates(recDate,_baseConstants.DISPLAY_FORMAT_DASH, date, _baseConstants.DISPLAY_FORMAT_DASH);
                        }else{
                            cmpDate=DateTime.compareDates(recDate,_baseConstants.DISPLAY_FORMAT_DASH, date, _baseConstants.DISPLAY_FORMAT);
                        }

                    }
                }

                int cmpSDate				=-1;
                String sDate=null;

                if(startDateTime!=null && !startDateTime.equals("")){
                    int year = -1;

                    if(!_baseConstants.isUSDateFormat){//P_SCH_B_61366 Added By Ankush Tanwar For Correct working of reccurence
                        year=Integer.parseInt(startDateTime.substring(3,5));
                    }else{
                        year=Integer.parseInt(startDateTime.substring(0,2));
                    }

                    if(year>0){

                        if(startDateTime.length()=="dd MMM yyyy".length()){
                            if(!_baseConstants.isUSDateFormat){//P_SCH_B_61366 Added By Ankush Tanwar For Correct working of reccurence
                                sDate=DateTime.getRequiredFormat(startDateTime,"MMM dd yyyy", _baseConstants.DISPLAY_FORMAT_DASH);
                            }else{
                                sDate=DateTime.getRequiredFormat(startDateTime,"dd MMM yyyy", _baseConstants.DISPLAY_FORMAT_DASH);
                            }
                        }else if(startDateTime.length()>=19){
                            sDate=DateTime.getRequiredFormat(startDateTime.substring(0,19),TimeZoneUtils.DB_DATETIME, _baseConstants.DISPLAY_FORMAT_DASH);
                        }
                        else
                        {
                            sDate =startDateTime;

                        }

                        if(date.indexOf("-")!=-1){//P_SCH_B_61366 Added By Ankush Tanwar For Correct working of reccurence
                            cmpSDate=DateTime.compareDates(date,_baseConstants.DISPLAY_FORMAT_DASH,sDate, _baseConstants.DISPLAY_FORMAT_DASH);
                        }else{
                            cmpSDate=DateTime.compareDates(date,_baseConstants.DISPLAY_FORMAT,sDate, _baseConstants.DISPLAY_FORMAT_DASH);
                        }

                    }
                }


                //get the recurring pattern
                String pattern		= scheduleInfo.getString(FieldNames.RECURRENCE_PATTERN);

                if( pattern != null && pattern.equals("628")){//daily schedule
                    String interval		= scheduleInfo.getString(FieldNames.RECURRENCE_INTERVAL);

                    if(interval != null && interval.equals("-1")){
                        //recur on weekdays
                        boolean weekday		= DateTime.isWeekDay(date);//whether date is weekday
                        if(!_baseConstants.isUSDateFormat){  // to change date format in case of UK build
                            weekday	= DateTime.isWeekDay(DateTime.getRequiredFormat(date,_baseConstants.DISPLAY_FORMAT_DASH, "MM-dd-yyyy")) ;
                        }

                        if(weekday){
                            // date is weekday
                            //here start date is not in MM-dd-yyyy formate
                            //				int noOfWeekDays	= DateTime.getWeekDayNo(startDate,date);

                            if(recurEndDate != null && !recurEndDate.equals("")){
                                if(cmpDate >=  0 && cmpSDate>=0){
                                    //recur end date is in future and day is weekday hence return true;
                                    bReturn		= true;
                                }else{
                                    //recur end date is in past hence return false
                                    bReturn		= false;
                                }

                            }else if(occurrence != null && !occurrence.equals("")){
                                //sloprocessing in this part

                                //String tempSDate	 = DateTime.getRequiredFormat(sDate,"yyyy-MM-dd","MM-dd-yyyy");

                                int noOfWeekDays	= DateTime.getWeekDayNo(sDate,date);

                                if(Integer.parseInt(occurrence) >= noOfWeekDays && noOfWeekDays>=0){
                                    //can recur
                                    bReturn		= true;
                                }else{
                                    //no of occurence already recurred
                                    bReturn		= false;
                                }
                            }else{
                                logger.info("Both recur end date and occurence are null so returning false");
                                bReturn		= false;
                            }


                        }else{
                            //if date is not weekday the return false
                            bReturn			= false;
                        }

                    }else{
                        //recur every n days

                        //get no. of days between schedule start date and given date
                        //			int noOfDays		= (int)DateTime.getDaysBetweenDates(startDate , date) -1 ;
                        int noOfDays		= (int)DateTime.getDaysBetweenDates(sDate , date) -1 ;

                        int iInterval		= Integer.parseInt(scheduleInfo.getString(FieldNames.RECURRENCE_INTERVAL));

                        int mod				= noOfDays % iInterval;
                        //this should not be +1
                        //			int recurrence		= (int)(noOfDays / iInterval) + 1;
                        int recurrence		= (int)(noOfDays / iInterval);
                        if(mod == 0){
                            if(recurEndDate != null && !recurEndDate.equals("")){
                                if((cmpDate == 1 || cmpDate == 0)&& cmpSDate>=0){
                                    //recur end date is in future and day is weekday hence return true;
                                    bReturn		= true;
                                }else{
                                    //recur end date is in past hence return false
                                    bReturn		= false;
                                }

                            }else if(occurrence != null && !occurrence.equals("")){
                                if(Integer.parseInt(occurrence) > recurrence && recurrence>0){

                                    //can recur
                                    bReturn		= true;
                                }else{
                                    //no of occurence already recurred
                                    bReturn		= false;
                                }
                            }else{
                                logger.info("Both recur end date and occurence are null so returning false for recur every n days");
                                bReturn		= false;
                            }

                        }else{
                            //cannot recur as not after every n day
                            bReturn		= false;
                        }



                    }

                }else if(pattern != null && pattern.equals("629")){//weekly schedule
                    //              int noOfWeek		= DateTime.getNoOfWeeks(startDate , date);
                    int noOfWeek		= DateTime.getNoOfWeeks(sDate , date);

                    int interval		= Integer.parseInt(scheduleInfo.getString(FieldNames.RECURRENCE_INTERVAL));

                    int mod				= noOfWeek % interval;
                    String daysOfWeek	= scheduleInfo.getString(FieldNames.RECURRENCE_DAYOFWEEK);
                    //		int recurrence				= getWeeklyOccurence(startDate,date,interval,daysOfWeek);
                    int recurrence				= getWeeklyOccurence(sDate,date,interval,daysOfWeek,occurrence);


                    if(mod ==0){
                        //may recur
                        if(recurEndDate != null && !recurEndDate.equals("")){
                            if(cmpDate >= 0  && cmpSDate>=0){
                                //recur end date is in future and day is weekday hence return true;
                                String curDayOfWeek		= DateTime.getDayOfWeek(date);
                                if(!_baseConstants.isUSDateFormat){  // to change date format in case of UK build
                                    curDayOfWeek	= DateTime.getDayOfWeek(DateTime.getRequiredFormat(date,_baseConstants.DISPLAY_FORMAT_DASH, "MM-dd-yyyy")) ;
                                }

                                if(daysOfWeek.indexOf(curDayOfWeek) != -1 ){
                                    bReturn		= true;
                                }else{
                                    bReturn		= false;
                                }

                            }else{
                                //recur end date is in past hence return false
                                bReturn		= false;
                            }

                        }else if(occurrence != null && !occurrence.equals("")){
                            if(Integer.parseInt(occurrence) > recurrence && cmpSDate>=0 && recurrence!=0){
                                //                        if(Integer.parseInt(occurrence)-1 > recurrence && cmpSDate>=0){
                                //can recur
                                String curDayOfWeek		= DateTime.getDayOfWeek(date);
                                if(daysOfWeek.indexOf(curDayOfWeek) != -1){
                                    bReturn		= true;
                                }else{
                                    bReturn		= false;
                                }
                            }else{
                                //no of occurence already recurred
                                bReturn		= false;
                            }
                        }else{
                            logger.info("Both recur end date and occurence are null so returning false for recur every n days");
                            bReturn		= false;
                        }

                    }else{
                        //cannot recur as this is not the recurring week
                        bReturn		= false;
                    }


                }else if(pattern != null && pattern.equals("630")){//monthly schedule
                    String instance		= scheduleInfo.getString(FieldNames.RECURRENCE_INSTANCE);

                    if(instance != null &&(instance.equals("") || instance.equals("0") || instance.equals("-1"))){
                        //recur every n day of n month
                        String daysOfMonth		= scheduleInfo.getString(FieldNames.RECURRENCE_DAYOFMONTH);
                        int interval			= Integer.parseInt(scheduleInfo.getString(FieldNames.RECURRENCE_INTERVAL));

                        //			int noOfMonth			= DateTime.getNoOfMonth(startDate, date);
                        int noOfMonth			= DateTime.getNoOfMonth(sDate, date);

                        //			int mod					= (noOfMonth % interval) +1;
                        //should not be +1
                        int mod					= (noOfMonth % interval) ;
                        //			int recurrence		= (int)(noOfMonth / interval) + 1;
                        //should not be +1
                        int recurrence		= (int)(noOfMonth / interval) ;
                        if(mod == 0){
                            //recurring month
                            if(recurEndDate != null && !recurEndDate.equals("")){
                                if(cmpDate >= 0 && cmpSDate>=0){
                                    //recur end date is in future and day is weekday hence return true;
                                    String curDayOfMonth		= DateTime.getDayOfMonth(date);
                                    if(!_baseConstants.isUSDateFormat){  // to change date format in case of UK build
                                        curDayOfMonth	= DateTime.getDayOfMonth(DateTime.getRequiredFormat(date,_baseConstants.DISPLAY_FORMAT_DASH, "MM-dd-yyyy")) ;
                                    }
                                    if(Integer.parseInt(daysOfMonth)==Integer.parseInt(curDayOfMonth)){
                                        bReturn		= true;
                                    }else{
                                        bReturn		= false;
                                    }

                                }else{
                                    //recur end date is in past hence return false
                                    bReturn		= false;
                                }

                            }else if(occurrence != null && !occurrence.equals("")){

                                //					if(Integer.parseInt(occurrence) >= recurrence && recurrence>=0){
                                if(Integer.parseInt(occurrence) > recurrence && recurrence>=0){
                                    //can recur
                                    String curDayOfMonth		= DateTime.getDayOfMonth(date);
                                    if(Integer.parseInt(daysOfMonth)==Integer.parseInt(curDayOfMonth)){
                                        bReturn		= true;
                                    }else{
                                        bReturn		= false;
                                    }
                                }else{
                                    //no of occurence already recurred
                                    bReturn		= false;
                                }
                            }else{
                                logger.info("Both recur end date and occurence are null so returning false for recur every n days");
                                bReturn		= false;
                            }


                        }else{
                            // not a rucurring month
                            bReturn				= false;
                        }

                    }else{
                        //recur on nth weekday of evry n month

                        int interval			= Integer.parseInt(scheduleInfo.getString(FieldNames.RECURRENCE_INTERVAL));
                        String dayOfWeek		= scheduleInfo.getString(FieldNames.RECURRENCE_DAYOFWEEK);

                        //			int noOfMonth			= DateTime.getNoOfMonth(startDate, date);
                        int noOfMonth			= DateTime.getNoOfMonth(sDate, date);

                        //			int mod					= noOfMonth % interval + 1;
                        int mod					= noOfMonth % interval;
                        //			int recurrence			= (noOfMonth / interval) + 1;
                        int recurrence			= (noOfMonth / interval);
                        String sInstance="";
                        if(instance.equals("632")){
                            sInstance="1";
                        }else if(instance.equals("633")){
                            sInstance="2";
                        }else if(instance.equals("634")){
                            sInstance="3";
                        }else if(instance.equals("635")){
                            sInstance="4";
                        }else if(instance.equals("636")){
                            //                        sInstance=DateTime.getMaxWeekOfMonth(date);
                            sInstance=getLastRecOfMonth(date,dayOfWeek);
                        }

                        if(mod == 0){
                            //this is recurring month

                            if(recurEndDate != null && !recurEndDate.equals("")){
                                if(cmpDate >= 0 && cmpSDate>=0){
                                    //String whichWeek		= DateTime.getWeekOfMonth(date);

                                    String dateOfNthDay		= DateTime.getNthWeekDayOfMonth(date,sInstance,dayOfWeek);

                                    if(Integer.parseInt(dateOfNthDay)==Integer.parseInt((_baseConstants.isUSDateFormat?date.substring(3,5):date.substring(0,2)))){



                                        //	if(whichWeek.equals(sInstance)){
                                        //		String day			= DateTime.getDayOfWeek(date);

                                        //		if(day.equals(dayOfWeek)){
                                        //this is recurrence day
                                        bReturn		= true;
                                        //		}else{
                                        //this is not recurrence day
                                        //			bReturn		= false;
                                        //		}
                                        //}else{
                                        //this is not the correct instance
                                        //	bReturn		= false;
                                        //}

                                    }else{
                                        //recur end date is in past hence return false
                                        bReturn		= false;
                                    }
                                }else{
                                    //recur end date is in past hence return false
                                    bReturn		= false;
                                }

                            }else if(occurrence != null && !occurrence.equals("")){

                                //                            if(Integer.parseInt(occurrence) >= recurrence && recurrence>0){
                                if(Integer.parseInt(occurrence) > recurrence && recurrence>0){
                                    //can recur
                                    //String whichWeek		= DateTime.getWeekOfMonth(date);
                                    String dateOfNthDay		= DateTime.getNthWeekDayOfMonth(date,sInstance,dayOfWeek);

                                    if(Integer.parseInt(dateOfNthDay)==Integer.parseInt((_baseConstants.isUSDateFormat?date.substring(3,5):date.substring(0,2)))){
                                        //String day			= DateTime.getDayOfWeek(date);


                                        //	if(day.equals(dayOfWeek)){
                                        //this is recurrence day
                                        bReturn		= true;
                                        //	}else{
                                        //this is not recurrence day
                                        //		bReturn		= false;
                                        //	}
                                    }else{
                                        //this is not the correct instance
                                        bReturn		= false;
                                    }
                                }else{
                                    //no of occurence already recurred
                                    bReturn		= false;
                                }
                            }else{
                                logger.info("Both recur end date and occurence are null so returning false for recur every n days");
                                bReturn		= false;
                            }

                        }else{
                            //this is not a recurring month
                            bReturn		= false;
                        }
                    }

                }else if(pattern != null && pattern.equals("631")){//yearly schedule

                    String instance		= scheduleInfo.getString(FieldNames.RECURRENCE_INSTANCE);

                    if(instance != null &&(instance.equals("") || instance.equals("0") || instance.equals("-1"))){
                        //recur on nth date of nth month
                        String dayOfMonth	= scheduleInfo.getString(FieldNames.RECURRENCE_DAYOFMONTH);
                        String monthOfYear	= scheduleInfo.getString(FieldNames.RECURRENCE_MONTHOFYEAR);

                        String curMonth		= DateTime.getMonth(date);

                        String curDate		= DateTime.getDayOfMonth(date);
                        //			int noOfYears		= DateTime.getNoOfYear(startDate , date);
                        int noOfYears		= DateTime.getNoOfYear(sDate , date);

                        if(!_baseConstants.isUSDateFormat){  // to change date format in case of UK build
                            curMonth =  DateTime.getMonth(DateTime.getRequiredFormat(date,_baseConstants.DISPLAY_FORMAT_DASH, "MM-dd-yyyy")) ;
                            curDate	 =  DateTime.getDayOfMonth(DateTime.getRequiredFormat(date,_baseConstants.DISPLAY_FORMAT_DASH, "MM-dd-yyyy")) ;
                            noOfYears=  DateTime.getNoOfYear(sDate, DateTime.getRequiredFormat(date,_baseConstants.DISPLAY_FORMAT_DASH, "MM-dd-yyyy")) ;
                        }
                        //int recurrence		= noOfYears + 1;
                        int recurrence		= noOfYears;
                        if(Integer.parseInt(curMonth)==Integer.parseInt(monthOfYear)){
                            //curmonth is recurring month
                            if(Integer.parseInt(curDate)==Integer.parseInt(dayOfMonth)){
                                //curdate is recurring date

                                if(recurEndDate != null && !recurEndDate.equals("")){
                                    if(cmpDate >= 0 && cmpSDate >= 0){
                                        //recur end date is in future and day is weekday hence return true;
                                        bReturn		= true;
                                    }else{
                                        //recur end date is in past hence return false
                                        bReturn		= false;
                                    }

                                }else if(occurrence != null && !occurrence.equals("")){

                                    //						if(Integer.parseInt(occurrence) > recurrence + 1){
                                    //						if(Integer.parseInt(occurrence) >= recurrence && recurrence>0){
                                    if(Integer.parseInt(occurrence) > recurrence && recurrence>0){
                                        //can recur
                                        bReturn		= true;
                                    }else{
                                        //no of occurence already recurred
                                        bReturn		= false;
                                    }
                                }else{
                                    logger.info("Both recur end date and occurence are null so returning false for recur every n days");
                                    bReturn		= false;
                                }

                            }else{
                                //curdate is not recurring date
                                bReturn		= false;
                            }
                        }else{
                            //curmonth is not the recurring month
                            bReturn		= false;
                        }
                    }else{
                        //recur on nth week day of nth week in nth month
                        String monthOfYear		= scheduleInfo.getString(FieldNames.RECURRENCE_MONTHOFYEAR);
                        String dayOfWeek		= scheduleInfo.getString(FieldNames.RECURRENCE_DAYOFWEEK);

                        String curMonth			= DateTime.getMonth(date);
                        String curDayOfWeek		= DateTime.getDayOfWeek(date);


                        //						if(Integer.parseInt(dateOfNthDay)==Integer.parseInt(date.substring(3,5))){



                        //			int noOfYears		= DateTime.getNoOfYear(startDate , date);
                        int noOfYears		= DateTime.getNoOfYear(sDate , date);
                        //			int recurrence		= noOfYears + 1;
                        int recurrence		= noOfYears ;
                        String sInstance="";
                        if(instance.equals("632")){
                            sInstance="1";
                        }else if(instance.equals("633")){
                            sInstance="2";
                        }else if(instance.equals("634")){
                            sInstance="3";
                        }else if(instance.equals("635")){
                            sInstance="4";
                        }else if(instance.equals("636")){
                            //  sInstance=DateTime.getMaxWeekOfMonth(date);;
                            sInstance=getLastRecOfMonth(date,dayOfWeek);
                        }

                        String dateOfNthDay		= DateTime.getNthWeekDayOfMonth(date,sInstance,dayOfWeek);

                        if(Integer.parseInt(curMonth)==Integer.parseInt(monthOfYear)){

                            //month is recurring month
                            if(Integer.parseInt(curDayOfWeek)==Integer.parseInt(dayOfWeek)){

                                //week day is the recurring day of week

                                //String whichWeek	= DateTime.getWeekOfMonth(date);

                                if(Integer.parseInt(dateOfNthDay)==Integer.parseInt(date.substring(3,5))){

                                    //					if(Integer.parseInt(whichWeek)==Integer.parseInt(sInstance)){

                                    if(recurEndDate != null && !recurEndDate.equals("")){
                                        if(cmpDate >= 0 && cmpSDate >= 0){
                                            //recur end date is in future and day is weekday hence return true;
                                            bReturn		= true;
                                        }else{
                                            //recur end date is in past hence return false
                                            bReturn		= false;
                                        }

                                    }else if(occurrence != null && !occurrence.equals("")){
                                        //                                    if(Integer.parseInt(occurrence) >= recurrence && recurrence>0){
                                        if(Integer.parseInt(occurrence) > recurrence && recurrence>0){
                                            //can recur
                                            bReturn		= true;
                                        }else{
                                            //no of occurence already recurred
                                            bReturn		= false;
                                        }
                                    }else{
                                        logger.info("Both recur end date and occurence are null so returning false for recur every n days");
                                        bReturn		= false;
                                    }
                                }else{
                                    //not the recurring instance
                                    bReturn		= false;
                                }

                            }else{
                                //week day is not the recurring day of week
                            }

                        }else{
                            //month is not the recurring month
                            bReturn = false;
                        }

                    }

                }
                //***********MULIPLE DAY STARTS
                else if( pattern != null && pattern.equals("786")){

                    String dayOfMonth= DateUtil.formatDate(scheduleInfo.getTimestamp(FieldNames.MULTIPLE_TASK_START_TIME),_baseConstants.DISPLAY_FORMAT);

                    if(dayOfMonth.replaceAll("/","-").equals(date)){
                        bReturn	= true;
                        scheduleInfo.set(FieldNames.START_DATETIME, scheduleInfo.getTimestamp(FieldNames.MULTIPLE_TASK_START_TIME));
                        scheduleInfo.set(FieldNames.END_DATETIME, scheduleInfo.getTimestamp(FieldNames.MULTIPLE_TASK_END_TIME));
                    }



                }
                //***********MULIPLE DAY ENDS
                else{
                    //pattern is not a recognized pattern hence return false.
                    bReturn		= false;
                }

            }else{//recurring flag check
                //schedule is not a recurring schedule as the recurring flag is not set to Y
                bReturn				= false;
            }
        }catch(Exception e){
            logger.error("Exception occured in isRecur():" , e);
            e.printStackTrace();
            //e.printStackTrace();
        }

        return bReturn;
    }

    public static int getWeeklyOccurence(String startDate , String endDate, int interval ,String daysOfWeek,String occurrence){


        int iReturn = 0;

        iReturn=getWeeklyOccurenceNew(startDate,endDate,interval,daysOfWeek,occurrence);
        return iReturn;
    }

    public static int getWeeklyOccurenceNew(String startDate , String endDate, int interval ,String daysOfWeek,String occurrence){

        int iReturn = 0;
        int maxRec=0;
        if(occurrence!=null)
            maxRec=Integer.parseInt(occurrence);
        String curDayOfWeek		= DateTime.getDayOfWeek(endDate);
        if(daysOfWeek.indexOf(curDayOfWeek) == -1 ){
            return iReturn;
        }
        try{

            int loopInc=1;
            if(interval>1)loopInc=(interval-1)*8;
            Calendar startCal	= Calendar.getInstance();
            Calendar endCal		= Calendar.getInstance();
            if(startDate!=null && startDate.length()==10){
                startCal = DateUtil.getCalendarByDate(startDate);
            }
            if(endDate!=null && endDate.length()==10){
                endCal = DateUtil.getCalendarByDate(endDate);
            }
            //after start date
            startCal.add(Calendar.DAY_OF_MONTH , 1);
            if(!startCal.after(endCal)){
                while(!startCal.after(endCal) ){
                    int weekDay	= startCal.get(Calendar.DAY_OF_WEEK);
                    if((daysOfWeek).indexOf(weekDay+"") != -1)
                        iReturn++;
                    if(loopInc>1 && weekDay==Calendar.SATURDAY){
                        startCal.add(Calendar.DAY_OF_MONTH , loopInc);
                    }else{
                        startCal.add(Calendar.DAY_OF_MONTH , 1);
                    }
                    if(iReturn>maxRec){
                        break;
                    }
                }
            }

        }catch(Exception e){
            logger.error("exception while creating weekly recurrence",e);
        }
        if(iReturn>maxRec)iReturn=0;
        return iReturn;
    }
    public static String getLastRecOfMonth(String startDate,String  weekDay){
        String rec="";
        int intRec=0;
        int intWeekday=0;
        try{
            if(weekDay!=null)intWeekday=Integer.parseInt(weekDay);
            Calendar startCal	= Calendar.getInstance();
            if(startDate!=null && startDate.length()==10){
                String startMM = null;
                String startYY = null;
                if(MultiTenancyUtil.getTenantConstants().isUSDateFormat){
                    startMM		= startDate.substring(0,2);
                }else{
                    startMM		= startDate.substring(3,5);
                }
                startYY		= startDate.substring(6);
                startCal.set(Integer.parseInt(startYY) , Integer.parseInt(startMM)-1 , 1);
            }
            startCal.set(Calendar.DATE,startCal.getActualMaximum(Calendar.DATE));
            int curDate=startCal.get(Calendar.DATE);
            int curDay=0;
            while(curDate>=1){

                curDay=startCal.get(Calendar.DAY_OF_WEEK);
                if(curDay==intWeekday){
                    intRec++;
                    //					break;
                }
                curDate--;
                startCal.set(Calendar.DATE,curDate);

            }
            rec=intRec+"";
        }catch(Exception e){
            logger.error("exception while calculating lst recurrence",e);
        }
        return rec;
    }






    public static Info getAllTheatersInfo(String franchiseeNo){
        return getAllTheatersInfo(franchiseeNo, false);
    }
    public static Info getAllTheatersInfo(String franchiseeNo, boolean isDispatchBoard){

        Info theaterInfo = new Info();
        if(StringUtil.isValidNew(franchiseeNo) || !isDispatchBoard){
            String query = "SELECT T.* FROM THEATERS T ";
            if(StringUtil.isValidNew(franchiseeNo)){
                query += " WHERE T.FRANCHISEE_NO IN ("+franchiseeNo+") ";
            }
            query += " ORDER BY T.THEATER_NAME ";
            theaterInfo = SQLUtil.getInfoFromQuery("THEATER_ID","THEATER_NAME",query);
        }

        return theaterInfo;

    }
    public static SequenceMap getAllTheatersMap(String franchiseeNo){
        SequenceMap theaterMap = new SequenceMap();
        if(StringUtil.isValidNew(franchiseeNo)){
            String query = "SELECT T.* FROM THEATERS T WHERE T.FRANCHISEE_NO="+franchiseeNo;
            query += " ORDER BY T.THEATER_NAME ";
            theaterMap = SQLUtil.getSequenceMapFromQuery("THEATER_ID","THEATER_NAME",query);
        }

        return theaterMap;
    }

    public static SequenceMap getAllTheatersMap1(String franchiseeNo){
        Info dataInfo = null;
        SequenceMap dataMap = null;
        Iterator it = null;
        String key = null;

        dataInfo = getAllTheatersInfo(franchiseeNo);
        if(dataInfo != null){
            dataMap = new SequenceMap();
            it = dataInfo.getKeySetIterator();
            while(it.hasNext()){
                key = (String)it.next();
                dataMap.put(key, dataInfo.get(key));
            }
        }
        return dataMap;
    }

    public static Info getNewRateCardInfo(String userType,String contactId,String franchiseeNoforContacID,String isFranchisee){
        return getNewRateCardInfo( userType, contactId, franchiseeNoforContacID, isFranchisee,null);
    }
    public static Info getNewRateCardInfo(String userType,String contactId,String franchiseeNoforContacID,String isFranchisee,String regionId){
        StringBuilder query =new StringBuilder();
        query.append(" SELECT RATE_CARD_ID,RATE_CARD_NAME FROM RATE_CARD RC");

        if("Y".equals(isFranchisee)){
            query.append(" LEFT JOIN USERS U ON U.USER_NO=RC.ADDED_BY");
            if(StringUtil.isValidNew(franchiseeNoforContacID))
                query.append(" WHERE RC.FRANCHISEE_NO IN("+franchiseeNoforContacID+")");
        }
        else{
            query.append(" LEFT JOIN FRANCHISEE F ON F.FRANCHISEE_NO = RC.FRANCHISEE_NO");
            // Changes for P_B_SCH_34534 by Teena starts  
            if(regionId!=null){
                query.append(" WHERE F.AREA_ID='"+regionId+"'");
            }else
            {
                query.append(" WHERE F.IS_FRANCHISEE='N'");
            }
            // Changes for P_B_SCH_34534 by Teena ends 
        }

        return SQLUtil.getInfoFromQuery("RATE_CARD_ID", "RATE_CARD_NAME", query.toString());
    }


    /**
     * P_B_COMMON_8137
     * @param count
     * @param taskID
     * @param taskType
     * @param taskStatus
     * @param isDepositAttached
     * @param contactID
     * @param transactionID
     * @param tranType
     * @param privilegeFlag
     * @param fromPage
     * @param isCTImplemented
     * @param jobID
     * @return
     */
    public static String prepareActionMenuForTasks(int count , String taskID,String taskType, String taskStatus, boolean isDepositAttached, String contactID, String transactionID, String tranType ,Boolean privilegeFlag,String fromPage,boolean isCTImplemented,String jobID) {//SC_Start_Job
        return prepareActionMenuForTasks(count, taskID, taskType, taskStatus, isDepositAttached, contactID, transactionID, tranType, privilegeFlag, fromPage, isCTImplemented, jobID, null);
    }

    /**
     * P_B_COMMON_8137
     * @param count
     * @param taskID
     * @param taskType
     * @param taskStatus
     * @param isDepositAttached
     * @param contactID
     * @param transactionID
     * @param tranType
     * @param privilegeFlag
     * @param fromPage
     * @param isCTImplemented
     * @param jobID
     * @param privilegeMap
     * @return
     */
    public static String prepareActionMenuForTasks(int count , String taskID,String taskType, String taskStatus, boolean isDepositAttached, String contactID, String transactionID, String tranType ,Boolean privilegeFlag,String fromPage,boolean isCTImplemented,String jobID,Map <String,Boolean> privilegeMap) {//SC_Start_Job

        String actions = null;
        String links = null;
        String menuKey="";

        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        boolean isAppointment=(StringUtil.isValidNew(taskType) && "1".equals(taskType.trim()))?true:false;
        String estimateDisplayName=_baseConstants.TMS_FIRST_TAB_NAME;
        String invoiceDisplayName=_baseConstants.TMS_SECOND_TAB_NAME;
        String showEstimateParam = getShowEstimateParam();
        boolean canShowEstimate=(StringUtil.isValidNew(showEstimateParam) && "Y".equalsIgnoreCase(showEstimateParam.trim()))?true:false;
        boolean onlyInvoiced=(StringUtil.isValidNew(tranType) && "T".equalsIgnoreCase(tranType.trim()))?true:false;
        String franchiseNo="";
        try{
            franchiseNo= CommonMgr.newInstance().getCommonCmDAO().getFranchiseeNoForContact(contactID);
        }
        catch(Exception x)
        {
            logger.error(x);
        }
        //String isFranchise=AdminMgr.newInstance().getStoreDAO().isFranchise(franchiseNo,taskID);
        boolean isInvoiced=(StringUtil.isValidNew(taskStatus) &&
                ( "633".equals(taskStatus.trim()) //invoiced
                        || "634".equals(taskStatus.trim()) //invoiced (Partially Paid)
                )
        ) ? true : false;
        boolean isFullyPaidInvoice=(StringUtil.isValidNew(taskStatus) && "635".equals(taskStatus.trim()));//invoiced (Fully Paid)
        boolean isEstimated=(StringUtil.isValidNew(taskStatus) && "630".equals(taskStatus.trim()) )? true:false;

        try{
            if(isAppointment){
                //If the task type is appointment
                menuKey=Constants.APPOINTMENT;
            }else {
                menuKey=Constants.FOLLOWUP;
            } // Now we can create Estimate Invoice for Follow up task as well so no need to put below code in side appointment check //P_B_CT_11130

            //If the system cannot show estimates and there is no Invoice created against the task
            if (!canShowEstimate && !isInvoiced){
                menuKey=Constants.NON_ESTIMATED;
            }
            //If only invoice and no estimate is created against the task or the system cannot show estimates and there is any invoice created
            if ( onlyInvoiced || (!canShowEstimate && isInvoiced) ){
                menuKey=Constants.NON_ESTIMATED_INVOICED;
            }
            //If only fully Paid invoice and no estimate is created against the task or the system cannot show estimates and there is any fully paid invoice created
            if ( onlyInvoiced && isFullyPaidInvoice || (!canShowEstimate && isFullyPaidInvoice) ){
                menuKey=Constants.NON_ESTIMATED_FULLY_PAID_INVOICED;
            }
            //If the system can show estimates and there is any Estimate created against the task
            if (canShowEstimate && isEstimated){
                menuKey=Constants.ESTIMATED;
            }
            //If any Estimate and Invoice/Partially Paid Invoice is created against the task
            if(canShowEstimate && isInvoiced && !onlyInvoiced){
                menuKey=Constants.INVOICED;
            }

            //If any Estimate and Fully Paid Invoice is created against the task
            if (canShowEstimate && isFullyPaidInvoice && !onlyInvoiced){
                menuKey=Constants.INVOICED_FULLY_PAID;
            }

            if(!isCTImplemented)
            {
                menuKey=Constants.NON_CT;
            }

            logger.info("==========menuKey========"+menuKey);
            MenuHelper menuHelper = new MenuHelper(menuKey);


            if (menuKey.trim().equals(Constants.APPOINTMENT) || menuKey.trim().equals(Constants.FOLLOWUP)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));

                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));


                if(privilegeMap != null && privilegeMap.get("canAddModifyEstimate")){
                    menuHelper.addAction(LanguageUtil.getString("Generate "+ estimateDisplayName));
                }
                if(privilegeMap != null && privilegeMap.get("canAddModifyInvoice")){
                    menuHelper.addAction(LanguageUtil.getString("Generate "+ invoiceDisplayName));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }


                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }else if (menuKey.trim().equals(Constants.NON_ESTIMATED)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                if(privilegeMap != null && privilegeMap.get("canAddModifyInvoice")){
                    menuHelper.addAction(LanguageUtil.getString("Generate "+ invoiceDisplayName));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyPayment")){
                    menuHelper.addAction(LanguageUtil.getString("Apply Payment"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }else if (menuKey.trim().equals(Constants.NON_ESTIMATED_INVOICED)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                menuHelper.addAction(LanguageUtil.getString("View "+ invoiceDisplayName));
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyPayment")){
                    menuHelper.addAction(LanguageUtil.getString("Apply Payment"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }else if (menuKey.trim().equals(Constants.NON_ESTIMATED_FULLY_PAID_INVOICED)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                menuHelper.addAction(LanguageUtil.getString("View "+ invoiceDisplayName));
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }else if (menuKey.trim().equals(Constants.ESTIMATED)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));

                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                menuHelper.addAction(LanguageUtil.getString("View "+ estimateDisplayName));
                if(privilegeMap != null && privilegeMap.get("canAddModifyInvoice")){
                    menuHelper.addAction(LanguageUtil.getString("Generate "+ invoiceDisplayName));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }else if (menuKey.trim().equals(Constants.INVOICED)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                menuHelper.addAction(LanguageUtil.getString("View "+ estimateDisplayName));
                menuHelper.addAction(LanguageUtil.getString("View "+ invoiceDisplayName));
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyPayment")){
                    menuHelper.addAction(LanguageUtil.getString("Apply Payment"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }else if (menuKey.trim().equals(Constants.INVOICED_FULLY_PAID)) {
                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                menuHelper.addAction(LanguageUtil.getString("View "+ estimateDisplayName));
                menuHelper.addAction(LanguageUtil.getString("View "+ invoiceDisplayName));
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115

            }
            else if(menuKey.trim().equals(Constants.NON_CT)) {

                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));




                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115
            }

            else{
                menuHelper.addAction(LanguageUtil.getString("Modify"));
                if(!isAppointment && ModuleUtil.schedulerImplemented() && (CommonUtil.getJobsCheck()) && !"632".equals(taskStatus) && "7777".equals(jobID))//SC_Start_Job
                    menuHelper.addAction(LanguageUtil.getString("Start Job"));
                menuHelper.addAction(LanguageUtil.getString("View Task"));
                menuHelper.addAction(LanguageUtil.getString("Delete Task"));
                menuHelper.addAction(LanguageUtil.getString("Change Status"));
                if(privilegeMap != null && privilegeMap.get("canAddModifyEstimate")){
                    menuHelper.addAction(LanguageUtil.getString("Generate "+ estimateDisplayName));
                }
                if(privilegeMap != null && privilegeMap.get("canAddModifyInvoice")){
                    menuHelper.addAction(LanguageUtil.getString("Generate "+ invoiceDisplayName));
                }
                if(privilegeMap != null && privilegeMap.get("canApplyDeposit")){
                    menuHelper.addAction(LanguageUtil.getString("Receive Deposit"));
                }
                if(fromPage!=null && "schedule".equalsIgnoreCase(fromPage)){
                    //menuHelper.addAction(LanguageUtil.getString("Copy Task"));
                }
                menuHelper.addAction(LanguageUtil.getString("Print Task"));
                if(fromPage==null || (fromPage!=null && !"schedule".equalsIgnoreCase(fromPage))){
                    menuHelper.addAction(LanguageUtil.getString("View in Map"));
                }
                menuHelper.addAction(LanguageUtil.getString("Status Change History"));//YP-20130211-115
            }

            actions = menuHelper.getActionNames();

            links = menuHelper.getActionKeys();

        }catch(Exception e)
        {
            logger.error("Exception in prepareActionMenuForTasks:::"+e);
        }
        return actions+"###"+links;
    }


    public static String GetMail(Info info, String mailText,String messageOption,String emailContents,String assignTo,Info recurrInfo,String sDateTime,String duration,String eDateTime){
        return GetMail(info,mailText,messageOption,emailContents,assignTo,recurrInfo,sDateTime,duration,eDateTime,null);
    }
    public static String GetMail(Info info, String mailText,String messageOption,String emailContents,String assignTo,Info recurrInfo,String sDateTime,String duration,String eDateTime,String recTask){
        return GetMail(info,mailText,messageOption,emailContents,assignTo,recurrInfo,sDateTime,duration,eDateTime,recTask,null,null,null);
    } //USINSL-20120514-058 overloaded by Prakriti Sharma
    public static String GetMail(Info info, String mailText,String messageOption,String emailContents,String assignTo,Info recurrInfo,String sDateTime,String duration,String eDateTime,String recTask,String mailType,String emailId,String ownerPhone){
        return GetMail(info,mailText,messageOption,emailContents,assignTo,recurrInfo,sDateTime,duration,eDateTime,recTask,mailType,emailId,ownerPhone,null,null,null,null,null,null,null,null,null,null,null,null);
    }

    /**
     * SCH_CM_E_151020081003, adding two parameters sDateTime and duration
     */
    public static String GetMail(Info info, String mailText,String messageOption,String emailContents,String assignTo,Info recurrInfo,String sDateTime,String duration,String eDateTime,String recTask,String mailType,String emailId,String ownerPhone,String nameOfOwner,String address,String city,String state,String country,SequenceMap productMap,SequenceMap multiMap,String prevSubject,SequenceMap contactMap,Info otherAddressInfo,String assignByUserName,String event)    //USINSL-20120514-058 modified by Prakriti Sharma
    {
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        String mailContent="";
        try{


            String sName=info.get("NAME");
            sName = StringUtil.revertAppostrophi(sName); //P_B_SCH_48956

            String [] option=new String[2];
            String fromAssigned=null;
            Info nameA=new Info();

            String recYesRadio=FieldNames.EMPTY_STRING;
            String recPattern=FieldNames.EMPTY_STRING;
            String recDayOfWeek=FieldNames.EMPTY_STRING;
            String recDayOfMonth=FieldNames.EMPTY_STRING;
            String recMonthOfYear=FieldNames.EMPTY_STRING;
            String recInterval=FieldNames.EMPTY_STRING;
            String recInstance=FieldNames.EMPTY_STRING;
            String recEndDateTime=FieldNames.EMPTY_STRING;
            String recOccurrence=FieldNames.EMPTY_STRING;
            String leadSourceCategoryId= FieldNames.EMPTY_STRING;
            String leadSourceCategory= FieldNames.EMPTY_STRING;
            String leadSourceDetailsId= FieldNames.EMPTY_STRING;
            String leadSourceDetails= FieldNames.EMPTY_STRING;
            String additionalLeadSourceInfo=FieldNames.EMPTY_STRING;
            String assignToUserNames=FieldNames.EMPTY_STRING;
            String eventHeader = FieldNames.EMPTY_STRING;


            if( StringUtil.isValid(info.getString("leadSourceCategory"))){

                leadSourceCategory = SQLUtil.getColumnValue("CM_SOURCE_2", "CM_SOURCE_2_NAME", "CM_SOURCE_2_ID", info.getString("leadSourceCategory"));
            }

            if(info!=null && StringUtil.isValid(info.getString("leadSource"))){
                leadSourceDetails = SQLUtil.getColumnValue("CM_SOURCE_3", "CM_SOURCE_3_NAME", "CM_SOURCE_3_ID", info.getString("leadSource"));
            }

            if(info!=null && StringUtil.isValid(info.getString("additionalLeadSourceInfo"))){
                additionalLeadSourceInfo = info.getString("additionalLeadSourceInfo");
            }


            if(StringUtil.isValid(assignTo)){
                assignToUserNames = AdminMgr.newInstance().getUsersDAO().getUserNameWithCommaSeprt(assignTo);
                assignToUserNames = assignToUserNames.replaceAll(",", ", ");
            }

            if(recurrInfo!=null)
            {
                recYesRadio=recurrInfo.get("recYesRadio");
                recPattern=recurrInfo.get("recPattern");
                recDayOfWeek=recurrInfo.get("recDayOfWeek");
                recDayOfMonth=recurrInfo.get("recDayOfMonth");
                recMonthOfYear=recurrInfo.get("recMonthOfYear");
                recInterval=recurrInfo.get("recInterval");
                recInstance=recurrInfo.get("recInstance");
                recEndDateTime=recurrInfo.get("recEndDateTime");
                recOccurrence=recurrInfo.get("recOccurrence");
            }
            String [] dayArray=null;
            String dayNames="";
            String dayMNames="";
            String qName="";
            String monthName="";
            if(StringUtil.isValidNew(recMonthOfYear))
            {
                monthName=_baseConstants.months[Integer.parseInt(recMonthOfYear)-1];
            }

            if(recInstance!=null && !recInstance.trim().equals("null") && recInstance.trim().equals("632"))
            {
                qName="First";
            }
            else if(recInstance!=null && !recInstance.trim().equals("null") && recInstance.trim().equals("633"))
            {
                qName="Second";
            }
            else if(recInstance!=null && !recInstance.trim().equals("null") && recInstance.trim().equals("634"))
            {
                qName="Third";
            }
            else if(recInstance!=null && !recInstance.trim().equals("null") && recInstance.trim().equals("635"))
            {
                qName="Fourth";
            }
            else if(recInstance!=null && !recInstance.trim().equals("null") && recInstance.trim().equals("636"))
            {
                qName="Last";
            }



            if(recDayOfWeek!=null && !recDayOfWeek.trim().equals(""))
            {
                if(recDayOfWeek.indexOf(",")!=-1)
                {
                    dayArray=recDayOfWeek.split(",");
                    for(int i=0;i<dayArray.length;i++)
                    {
                        if(i!=0)
                        {
                            dayNames=dayNames+", ";
                        }
                        String index=dayArray[i];
                        int ind=Integer.parseInt(index);
                        dayNames=dayNames+_baseConstants.dayNamesArray[ind-1];

                    }
                }
                else
                {
                    dayMNames=_baseConstants.dayNamesArray[Integer.parseInt(recDayOfWeek)-1];
                    dayNames=_baseConstants.dayNamesArray[Integer.parseInt(recDayOfWeek)-1];
                }
            }


            if(messageOption.indexOf(",")!=-1)
            {
                option=messageOption.split(",");
                messageOption=option[0];
                fromAssigned=option[1];
            }
            if(fromAssigned!=null && fromAssigned.trim().equalsIgnoreCase("A"))
            {
                try{
                    nameA=PortalUtils.getUserNameInfo(assignTo);
                }catch(Exception e)
                {

                }

            }
            //P_E_CONTACT_MAIL added by neeti starts
            //USINSL-20120514-058:ENH STARTS
            if(!StringUtil.isValidNew(mailText)) {
                if(StringUtil.isValid(mailType) && mailType.equals("contactMail")){

                    if("reschedule".equals(event)){
                        mailText="Appointment with below details scheduled at your address has been rescheduled.";
                        eventHeader = "RESCHEDULED";
                    }else if("updateStatus".equals(event) || "taskCancelled".equals(event)){
                        mailText="Appointment with below details scheduled at your address has been cancelled.";
                        eventHeader = "CANCELLED";
                    }else if ("delete".equals(event)){
                        mailText="Appointment with below details scheduled at your address has been deleted.";
                        eventHeader = "CANCELLED";
                    }else{
                        mailText="Please find the appointment details scheduled at your below mentioned address.";
                    }

                } else{
                    if(StringUtil.isValid(prevSubject)){

                        if("reschedule".equals(event)){
                            mailText="Task â€œ"+prevSubject+"â€� has been rescheduled. Following are the task details.";
                            eventHeader = "RESCHEDULED";
                        }else if ("delete".equals(event)){
                            mailText="Task â€œ"+prevSubject+"â€� has been deleted. Following are the task details.";
                            eventHeader = "CANCELLED";
                        }else if("updateStatus".equals(event) || "taskCancelled".equals(event)){
                            mailText="Task â€œ"+prevSubject+"â€� has been cancelled. Following are the task details.";
                            eventHeader = "CANCELLED";
                        }else{
                            mailText="Task â€œ"+prevSubject+"â€� has been modified. Following are the task details.";
                        }
                    }
                    else if(StringUtil.isValid(mailType) && mailType.equals("multiTaskMail")){
                        mailText="Following tasks has been assigned to you:";
                    }
                    else{
                        mailText="A new task has been assigned to you. Following are the task details.";
                    }
                }
            }

            else{
                if(StringUtil.isValid(mailType) && mailType.equals("contactMail")){

                    if("reschedule".equals(event)){
                        mailText="Appointment with below details scheduled at your address has been rescheduled.";
                        eventHeader = "RESCHEDULED";
                    }else if("updateStatus".equals(event) || "taskCancelled".equals(event)){
                        mailText="Appointment with below details scheduled at your address has been cancelled.";
                        eventHeader = "CANCELLED";
                    }else if ("delete".equals(event)){
                        mailText="Appointment with below details scheduled at your address has been deleted.";
                        eventHeader = "CANCELLED";
                    }

                }else{
                    if(StringUtil.isValid(prevSubject)){

                        if("reschedule".equals(event)){
                            mailText="Task â€œ"+prevSubject+"â€� has been rescheduled. Following are the task details.";
                            eventHeader = "RESCHEDULED";
                        }else if ("delete".equals(event)){
                            mailText="Task â€œ"+prevSubject+"â€� has been deleted. Following are the task details.";
                            eventHeader = "CANCELLED";
                        }else if("updateStatus".equals(event) || "taskCancelled".equals(event)){
                            mailText="Task â€œ"+prevSubject+"â€� has been cancelled. Following are the task details.";
                            eventHeader = "CANCELLED";
                        }
                    }
                }


            }

//	        System.out.println("************event************"+event);

            if(StringUtil.isValid(event)){
                if("reschedule".equals(event)){
                    eventHeader = "RESCHEDULED";
                }else if ("delete".equals(event)){
                    eventHeader = "CANCELLED";
                }else if("updateStatus".equals(event) || "taskCancelled".equals(event)){
                    eventHeader = "CANCELLED";
                }
            }
            //USINSL-20120514-058:ENH ENDS
            //P_E_CONTACT_MAIL added by neeti ends
            mailContent="<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><STYLE>  "+"\n"+
                    "#intro {CLEAR: both; BORDER-RIGHT: #bbb 1px dashed; PADDING-RIGHT: 180px; BORDER-TOP: #bbb 1px dashed; PADDING-LEFT: 12px; BACKGROUND: #FFFFFF; PADDING-BOTTOM: 0px; MARGIN: 0px 0px 10pt; BORDER-LEFT: #bbb 1px dashed; PADDING-TOP:0px; BORDER-BOTTOM: #bbb 1px dashed; POSITION: relative}\n"
                    +"#outro {CLEAR: both; BORDER-RIGHT: #bbb 1px dashed; PADDING-RIGHT: 12px; BORDER-TOP: #bbb 1px dashed; PADDING-LEFT: 12px; BACKGROUND: #FFFFFF; PADDING-BOTTOM: 0px; MARGIN: 0px 0px 10pt; BORDER-LEFT: #bbb 1px dashed; PADDING-TOP:0px; BORDER-BOTTOM: #bbb 1px dashed; POSITION: relative}\n"
                    +"#intro A {TEXT-DECORATION: underline}\n"
                    +"#outro A {TEXT-DECORATION: underline}\n";
            //P_E_CONTACT_MAIL added by neeti starts
            if(StringUtil.isValid(mailType) && mailType.equals("contactMail")){
                mailContent=mailContent+"#intro P {	FONT-SIZE: 12pt; MARGIN: 10px 0px; LINE-HEIGHT: 18px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif; TEXT-ALIGN: justify}\n";
            }else{
                mailContent=mailContent+"#intro P {	FONT-SIZE: 10pt; MARGIN: 10px 0px; LINE-HEIGHT: 18px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif; TEXT-ALIGN: justify}\n";
            }//P_E_CONTACT_MAIL added by neeti ends

            mailContent=mailContent+"#outro P {	FONT-SIZE: 11px; MARGIN: 10px 0px; LINE-HEIGHT: 18px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif; TEXT-ALIGN: justify}\n"
                    +".bold {	FONT-WEIGHT: bold} \n"
                    +".underline {	TEXT-DECORATION: underline}\n"
                    +"DIV.content P {	MARGIN: 8px 31px 10px; LINE-HEIGHT: 21px; FONT-FAMILY: Tahoma, Verdana, Arial, Helvetica, sans-serif} \n"
                    +"#printContent .content P {	MARGIN: 8px 31px 10px; LINE-HEIGHT: 21px; FONT-FAMILY: Tahoma, Verdana, Arial, Helvetica, sans-serif } \n"

                    +"P A {	TEXT-DECORATION: underline} \n "
                    +"UL.introlist A {	TEXT-DECORATION: underline}  \n "
                    +"DIV.content OL {CLEAR: both; MARGIN: 0px 0px 10px 30px}\n             UL.introlist {	CLEAR: both; MARGIN: 0px 0px 10px 30px} \n "
                    +"DIV.content OL LI {FONT-SIZE: 10pt; LINE-HEIGHT: 18px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif}\n "
                    +"UL.introlist LI {FONT-SIZE: 10pt; LINE-HEIGHT: 18px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif} </STYLE>\n<META content=\"MSHTML 6.00.2800.1106\" name=GENERATOR></head> \n"
                    +"<body bgcolor=\"#FFFFFF\" text=\"#000000\">\n"
                    +"<DIV class=content> \n";
            //P_E_CONTACT_MAIL added by neeti starts
            if(StringUtil.isValid(mailType) && mailType.equals("contactMail"))
            {      //USINSL-20120514-058:ENH STARTS
                mailContent=mailContent+"<table id=\"intro\" style=\"border: 4px solid rgb(197, 216, 229); padding: 10pt; width: 730px;\">"
                        +"<tbody><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">Dear \n"
                        + sName+ ",</p>\n" //SCH_CM_E_07102008.
                        +"<p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">"+mailText+"</p></td></tr>\n"
                        +"<tr><td><table border=\"0\" cellspacing=\"1\" cellpadding=\"2\" width=\"100%\">\n";

            }else{

                if("1".equals(messageOption)){
                    if(StringUtil.isValid(mailType) && "Default".equals(mailType)){
                        //advanta_google_rev_118 by SHraddha starts
                        mailContent=mailContent+"<table id=\"intro\" style=\"border: 4px solid rgb(197, 216, 229); padding: 10pt; width: 730px;\">\n"
                                +"<tbody><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">\n"
                                +"</p>\n"
                                +"<p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; color :red; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">&nbsp;<b>"+eventHeader+"</b></p></td></tr>\n"     //P_B_JOBS_50277
                                +"<tr><td><table border=\"0\" cellspacing=\"1\" cellpadding=\"2\" width=\"100%\">\n";
                        //+"<tr><td><table style=\"border-collapse: collapse;\" border=\"1\" cellpadding=\"2\" cellspacing=\"1\" >\n";
                        // +"<table style=\"border-collapse: collapse;\" border=\"1\" cellpadding=\"2\" cellspacing=\"1\" width=\"700\">\n"
                        //+"<tr valign=\"top\">\n";	
                    }
                    else{
                        mailContent=mailContent+"<table id=\"intro\" style=\"border: 4px solid rgb(197, 216, 229); padding: 10pt; width: 730px;\">\n"
			    		/*+"<tbody><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">Dear \n"
			            + sName+ ",</p>\n"*/
                                +"<tbody><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">\n"
                                + "</p>\n"
                                +"<p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; color :red; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">&nbsp;<b>"+eventHeader+"</b></p></td></tr>\n"	   //P_B_JOBS_50277
                                +"<tr><td><table border=\"0\" cellspacing=\"1\" cellpadding=\"2\" width=\"100%\">\n";
                        //+"<tr><td><table style=\"border-collapse: collapse;\" border=\"1\" cellpadding=\"2\" cellspacing=\"1\" >\n";
                        // +"<table style=\"border-collapse: collapse;\" border=\"1\" cellpadding=\"2\" cellspacing=\"1\" width=\"700\">\n"
                        //+"<tr valign=\"top\">\n";
                    }
                    //advanta_google_rev_118 by SHraddha ends
                }
                else if(StringUtil.isValid(mailType) && mailType.equals("multiTaskMail")){
                    mailContent=mailContent+"<table id=\"intro\" style=\"border: 4px solid rgb(197, 216, 229); padding: 10pt; width: 100%;\">\n"
                            +"<tbody><tr><td><p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">Dear \n"
                            + sName+ ",</p>\n"
                            +"<p style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\">"+mailText+"</p></td></tr>\n"
                            +"<tr><td><table border=\"1\" style=\"border-collapse: collapse;\" cellspacing=\"1\" cellpadding=\"4\" >\n";
                }
                //else {}

            }//USINSL-20120514-058:ENH ENDS
            //P_E_CONTACT_MAIL added by neeti ends

            //P_E_CONTACT_MAIL added by neeti starts
            if(StringUtil.isValid(mailType) && mailType.equals("contactMail"))
            {     //USINSL-20120514-058:ENH STARTS
                mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Service Scheduled : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get("taskSubject")+"</td></tr>\n";//modified for P_B_SCH_15639  //P_B_JOB_50201

                if((multiMap.size() == 0 || multiMap==null) && sDateTime!=null)
                {
                    String[] dateAndTime=sDateTime.split(" ");
                    String[] endTime=eDateTime.split(" ");
                    mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Date : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+dateAndTime[0]+"</td></tr>\n";//P_B_JOB_50201
                    mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Time : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+dateAndTime[1].substring(0,5)+" - "+endTime[1].substring(0,5)+"</td></tr>\n";//P_B_JOB_50201
                }

                //for the address other than the contact address
                if(emailContents.contains("ADDRESS") || emailContents.contains("CITY") || emailContents.contains("COUNTRY") || emailContents.contains("STATE") || emailContents.contains("ZIP_CODE")){
                    mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Service Address : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";
                    //for the address other than the contact address   
                    if(otherAddressInfo!=null && otherAddressInfo.size()!=0)
                    {
                        if((emailContents.contains("ADDRESS") && StringUtil.isValid(otherAddressInfo.get("ADDRESS"))) || (emailContents.contains("CITY") && StringUtil.isValid(otherAddressInfo.get("CITY"))) || (emailContents.contains("STATE") && StringUtil.isValidNew(otherAddressInfo.get("STATE"))) || (emailContents.contains("COUNTRY") && StringUtil.isValidNew(otherAddressInfo.get("COUNTRY"))) || (emailContents.contains("ZIP_CODE") && StringUtil.isValid(otherAddressInfo.get("ZIPCODE")))){

                            if((emailContents.contains("ADDRESS") && StringUtil.isValid(otherAddressInfo.get("ADDRESS"))) && (emailContents.contains("CITY") && StringUtil.isValid(otherAddressInfo.get("CITY"))) || (emailContents.contains("STATE") && StringUtil.isValidNew(otherAddressInfo.get("STATE"))) || (emailContents.contains("COUNTRY") && StringUtil.isValidNew(otherAddressInfo.get("COUNTRY"))))
                                mailContent+=otherAddressInfo.get("ADDRESS").replaceAll("\n", "<br/>")+"</td></tr>\n"+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";  //P_B_JOBS_50276
                            else if(emailContents.contains("ADDRESS") && StringUtil.isValid(otherAddressInfo.get("ADDRESS")))
                                mailContent+=otherAddressInfo.get("ADDRESS");

                            if(emailContents.contains("CITY") && StringUtil.isValid(otherAddressInfo.get("CITY")))
                                mailContent=mailContent+otherAddressInfo.get("CITY")+"";
                            if((emailContents.contains("CITY") && StringUtil.isValid(otherAddressInfo.get("CITY"))) && (emailContents.contains("STATE") && StringUtil.isValidNew(otherAddressInfo.get("STATE"))))
                                mailContent=mailContent+", "+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))+"";
                            else {
                                if(emailContents.contains("STATE") && StringUtil.isValidNew(otherAddressInfo.get("STATE")))
                                    mailContent=mailContent+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))+"";
                            }

                            if(((emailContents.contains("CITY") && StringUtil.isValid(otherAddressInfo.get("CITY"))) || (emailContents.contains("STATE") && StringUtil.isValidNew(otherAddressInfo.get("STATE")))) && (emailContents.contains("COUNTRY") && StringUtil.isValidNew(otherAddressInfo.get("COUNTRY"))))
                                mailContent=mailContent+", "+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))+"";
                            else{
                                if(emailContents.contains("COUNTRY") && StringUtil.isValidNew(otherAddressInfo.get("COUNTRY")))
                                    mailContent=mailContent+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))+"";
                            }

                            if((emailContents.contains("ZIP_CODE") && StringUtil.isValid(otherAddressInfo.get("ZIPCODE"))) && ((emailContents.contains("ADDRESS") && StringUtil.isValid(otherAddressInfo.get("ADDRESS"))) || (emailContents.contains("CITY") && StringUtil.isValid(otherAddressInfo.get("CITY"))) || (emailContents.contains("STATE") && StringUtil.isValidNew(otherAddressInfo.get("STATE"))) || (emailContents.contains("COUNTRY") && StringUtil.isValidNew(otherAddressInfo.get("COUNTRY")))))
                                mailContent+="</td></tr>\n"+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+otherAddressInfo.get("ZIPCODE");
                            else if (emailContents.contains("ZIP_CODE") && StringUtil.isValid(otherAddressInfo.get("ZIPCODE")))
                                mailContent+=otherAddressInfo.get("ZIPCODE");
                        }

                    } else {

                        if((emailContents.contains("ADDRESS") && StringUtil.isValid(info.get(FieldNames.ADDRESS))) || (emailContents.contains("CITY") && StringUtil.isValid(info.get(FieldNames.CITY))) || (emailContents.contains("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE))) || (emailContents.contains("COUNTRY") && StringUtil.isValidNew(info.get(FieldNames.COUNTRY))) || (emailContents.contains("ZIP_CODE") && StringUtil.isValid(info.get(FieldNames.ZIPCODE)))){

                            if((emailContents.contains("ADDRESS") && StringUtil.isValid(info.get(FieldNames.ADDRESS))) && (emailContents.contains("CITY") && StringUtil.isValid(info.get(FieldNames.CITY))) || (emailContents.contains("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE))) || (emailContents.contains("COUNTRY") && StringUtil.isValidNew(info.get(FieldNames.COUNTRY))))
                                mailContent+=info.get(FieldNames.ADDRESS).replaceAll("\n", "<br/>")+"</td></tr>\n"+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";			//P_B_JOBS_50276
                            else if(emailContents.contains("ADDRESS") && StringUtil.isValid(info.get(FieldNames.ADDRESS)))
                                mailContent+=info.get(FieldNames.ADDRESS);

                            if(emailContents.contains("CITY") && StringUtil.isValid(info.get(FieldNames.CITY)))
                                mailContent=mailContent+info.get(FieldNames.CITY)+"";
                            if((emailContents.contains("CITY") && StringUtil.isValid(info.get(FieldNames.CITY))) && (emailContents.contains("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE))))
                                mailContent=mailContent+", "+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"";
                            else {
                                if(emailContents.contains("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE)))
                                    mailContent=mailContent+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"";
                            }

                            if(((emailContents.contains("CITY") && StringUtil.isValid(info.get(FieldNames.CITY))) || (emailContents.contains("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE)))) && (emailContents.contains("COUNTRY") && StringUtil.isValidNew(info.get(FieldNames.COUNTRY))))
                                mailContent=mailContent+", "+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"";
                            else{
                                if(emailContents.contains("COUNTRY") && StringUtil.isValidNew(info.get(FieldNames.COUNTRY)))
                                    mailContent=mailContent+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"";
                            }

                            if((emailContents.contains("ZIP_CODE") && StringUtil.isValid(info.get(FieldNames.ZIPCODE))) && ((emailContents.contains("ADDRESS") && StringUtil.isValid(info.get(FieldNames.ADDRESS))) || (emailContents.contains("CITY") && StringUtil.isValid(info.get(FieldNames.CITY))) || (emailContents.contains("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE))) || (emailContents.contains("COUNTRY") && StringUtil.isValidNew(info.get(FieldNames.COUNTRY)))))
                                mailContent+="</td></tr>\n"+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ZIPCODE);
                            else if (emailContents.contains("ZIP_CODE") && StringUtil.isValid(info.get(FieldNames.ZIPCODE)))
                                mailContent+=info.get(FieldNames.ZIPCODE);
                        }
                    }
                    mailContent+="</td></tr>\n";
                }
                if(emailContents.contains("PHONE_NUMBERS"))
                {
                    if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("PHONE_NUMBERS")))
                        mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Contact Number : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get("PHONE_NUMBERS"))+"</td></tr>\n";		//P_B_JOBS_50276
                    else if(StringUtil.isValid(info.get(FieldNames.PHONE_NUMBERS)))
                        mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Contact Number : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS))+"</td></tr>\n";		//P_B_JOBS_50276
                }

                /**************                          Task Owner Mail Format starts                   *********************/
            }
            else if("1".equals(messageOption))
            {
                if(emailContents.contains("CONTACT_NAME") && StringUtil.isValid(info.get(FieldNames.FIRST_NAME)) && StringUtil.isValid(info.get(FieldNames.LAST_NAME)))
                {
                    if(fromAssigned!=null && fromAssigned.trim().equalsIgnoreCase("A"))
                    {
                        if(!StringUtil.isValid(nameA.get("FIRST_NAME")) && !StringUtil.isValid(nameA.get("LAST_NAME"))){
                            mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To222: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Unassigned</td></tr>\n";
                        }else{
                            mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To333: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";   // P_B_SCH_5072 modified by Prabhat
                        }
                        //mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+nameA.get("LAST_NAME")+", "+nameA.get("FIRST_NAME")+"</td></tr>\n";
                    }
                    else
                        mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Contact Name: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";
                }
                ////////////////////////////////////////////////


                String mapAddress = "";
                //boolean mapFlag = false;
                if(info.get(FieldNames.ADDRESS)!=null && !info.get(FieldNames.ADDRESS).equals("")){
                    mapAddress = info.get(FieldNames.ADDRESS);
                }
                StringBuffer viewMapAndroid = new StringBuffer("<a href=\"http://maps.google.com/maps?q=");
                StringBuffer viewMapIphone= new StringBuffer("<a href=\"maps://maps.google.com/maps?q=");

                if(StringUtil.isValid(info.get(FieldNames.ADDRESS))){
                    viewMapAndroid.append(info.get(FieldNames.ADDRESS));
                    viewMapIphone.append(info.get(FieldNames.ADDRESS));
                }

                if(StringUtil.isValid(info.get(FieldNames.CITY))){
                    viewMapAndroid.append(",+"+info.get(FieldNames.CITY));
                    viewMapIphone.append(",+"+info.get(FieldNames.CITY));
                }

                if(StringUtil.isValid(info.get(FieldNames.STATE))){
                    viewMapAndroid.append(",+"+RegionMgr.newInstance().getRegionsDAO().getStateAbbrevName(info.get(FieldNames.STATE)));
                    viewMapIphone.append(",+"+RegionMgr.newInstance().getRegionsDAO().getStateAbbrevName(info.get(FieldNames.STATE)));
                }

                viewMapAndroid.append("\">Google Map</a>");
                viewMapIphone.append("\">Apple Map</a>");

                //String viewMapAndroid1 = "<a href=\"http://maps.google.com/maps?q="+URLDecoder.decode(mapAddress, "UTF-8")+",+"+info.get(FieldNames.CITY)+",+"+RegionMgr.newInstance().getRegionsDAO().getStateAbbrevName(info.get(FieldNames.STATE))+",+"+info.get(FieldNames.ZIPCODE)+"\">View map on Android</a>";

                String sTokens="";
                StringTokenizer st=new StringTokenizer(emailContents,", ");
                while(st.hasMoreTokens())
                {
                    sTokens=st.nextToken();
                    if(sTokens.equals("NAME") && info.get(FieldNames.FIRST_NAME)!=null && info.get(FieldNames.LAST_NAME)!=null)
                    {
                        if(fromAssigned!=null && fromAssigned.trim().equalsIgnoreCase("A"))
                        {
                            if("".equals(nameA.get("FIRST_NAME")) && "".equals(nameA.get("LAST_NAME"))){
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To222: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Unassigned</td></tr>\n";
                            }else{
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To333: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";   // P_B_SCH_5072 modified by Prabhat
                            }
                            //mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+nameA.get("LAST_NAME")+", "+nameA.get("FIRST_NAME")+"</td></tr>\n";


                        }
                        else
                            mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Contact Name: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"&nbsp;&nbsp;"+""+"</td></tr>\n";


                    } //commented for USINSL-20120514-058
                    if(sTokens.equals("ADDRESS")){
                        //for the address other than the contact address   
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0)
                        {
                            mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Service Address: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+otherAddressInfo.getString("ADDRESS")+"</td></tr>\n";
                            if((otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals("")) || (otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1")) || (otherAddressInfo.get("COUNTRY")!=null && !otherAddressInfo.get("COUNTRY").trim().equals("")  && !otherAddressInfo.get("COUNTRY").equals("-1"))){
                                mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";
                                if(otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals(""))
                                    mailContent=mailContent+otherAddressInfo.get("CITY")+"";
                                if((otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals("")) && (otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1")))
                                    mailContent=mailContent+", "+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))+"";
                                else {
                                    if(otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1"))
                                        mailContent=mailContent+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))+"";
                                }
                                if(((otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals("")) || (otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1"))) && (otherAddressInfo.get("COUNTRY")!=null && !otherAddressInfo.get("COUNTRY").trim().equals("")  && !otherAddressInfo.get("COUNTRY").equals("-1")))
                                    mailContent=mailContent+", "+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))+"";
                                else{
                                    if(otherAddressInfo.get("COUNTRY")!=null && !otherAddressInfo.get("COUNTRY").trim().equals("")  && !otherAddressInfo.get("COUNTRY").equals("-1"))
                                        mailContent=mailContent+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))+"";
                                }
                                mailContent=mailContent+"</td></tr>\n";
                            }
                            if(otherAddressInfo.get("ZIPCODE")!=null && !otherAddressInfo.get("ZIPCODE").trim().equals(""))
                                mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+otherAddressInfo.get("ZIPCODE")+"</td></tr>\n";
                        } else {
                            if(info.get(FieldNames.ADDRESS)!=null && !info.get(FieldNames.ADDRESS).equals(""))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Service Address: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ADDRESS)+"</td></tr>\n";

                                if((info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals("")) || (info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1")) || (info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).trim().equals("")  && !info.get(FieldNames.COUNTRY).equals("-1"))){
                                    mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";
                                    if(info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals(""))
                                        mailContent=mailContent+info.get(FieldNames.CITY)+"";
                                    if((info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals("")) && (info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1")))
                                        mailContent=mailContent+", "+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"";
                                    else {
                                        if(info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1"))
                                            mailContent=mailContent+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"";
                                    }
                                    if(((info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals("")) || (info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1"))) && (info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).trim().equals("")  && !info.get(FieldNames.COUNTRY).equals("-1")))
                                        mailContent=mailContent+", "+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"";
                                    else{
                                        if(info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).trim().equals("")  && !info.get(FieldNames.COUNTRY).equals("-1"))
                                            mailContent=mailContent+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"";
                                    }
                                    mailContent=mailContent+"</td></tr>\n";
                                }
                                if(info.get(FieldNames.ZIPCODE)!=null && !info.get(FieldNames.ZIPCODE).trim().equals(""))
                                    mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ZIPCODE)+"</td></tr>\n";

                                if(StringUtil.isValid(viewMapAndroid.toString()))
                                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"2%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD colspan = \"2 \" style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+URLDecoder.decode(viewMapAndroid.toString(), "UTF-8")+"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"+URLDecoder.decode(viewMapIphone.toString(), "UTF-8")+"</td></tr>";

                                mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top></td></tr>\n";
                            }
                        }

                    }
					
					/*else if(info.get(FieldNames.ADDRESS)!=null && !info.get(FieldNames.ADDRESS).equals("") && StringUtil.isValid(viewMapAndroid.toString()) && mapFlag == false)
					{
						mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+URLDecoder.decode(viewMapAndroid.toString(), "UTF-8")+"</td></tr>\n";
						mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+URLDecoder.decode(viewMapIphone.toString(), "UTF-8")+"</td></tr>\n";
						mapFlag = true;
						
					}*/

                    else if(sTokens.equals("PHONE_NUMBERS") && info.get(FieldNames.PHONE_NUMBERS)!=null && !info.get(FieldNames.PHONE_NUMBERS).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Phone: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS))+"</td></tr>\n";
                    }
                    else if(sTokens.equals("EMAIL_ID") && info.get(FieldNames.EMAIL_IDS)!=null && !info.get(FieldNames.EMAIL_IDS).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Email: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get(FieldNames.EMAIL_IDS)+"</td></tr>\n";
                    }

                }

                mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top></td></tr>\n";

                if(StringUtil.isValid(leadSourceCategory))
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Contact Source: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+leadSourceCategory+"</td></tr>\n";   //P_B_JOBS_50157 //ZCUB-20150417-141

                if(StringUtil.isValid(leadSourceDetails))
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Contact Source Details: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+leadSourceDetails+"</td></tr>\n";  //P_B_JOBS_50157 //ZCUB-20150417-141

                if(StringUtil.isValid(additionalLeadSourceInfo))
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Additional Detail: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+additionalLeadSourceInfo+"</td></tr>\n";


                mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top></td></tr>\n";

                if(StringUtil.isValid(assignToUserNames))
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Assigned to : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+assignToUserNames+"</td></tr>\n";//P_B_JOB_50201



                if(StringUtil.isValid(mailType) && "Default".equals(mailType)){
                    //advanta_google_rev_118 by SHraddha starts	
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Task Owner: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get("taskOwner")+"</td></tr>\n";
                    //advanta_google_rev_118 ends
                }
                //mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Task Subject: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get("taskSubject")+"</td></tr>\n";

                if((multiMap.size() == 0 || multiMap==null) && sDateTime!=null)
                {
                    String[] dateAndTime=sDateTime.split(" ");
                    String[] endTime=eDateTime.split(" ");
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Date : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+dateAndTime[0]+"</td></tr>\n";//P_B_JOB_50201
                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Time : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+DateTime.convertTime(dateAndTime[1].substring(0,5))+" - "+DateTime.convertTime(endTime[1].substring(0,5))+"</td></tr>\n";//P_B_JOB_50201

                    // Add Job Type & Description in Franchise Task Mail Starts
	        	/*if(StringUtil.isValid(jobcategoryName))
	        		mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Job Type: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+jobcategoryName+"</td></tr>\n";*/

                    if(StringUtil.isValid(assignByUserName))
                        mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Created by : </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+assignByUserName+"</td></tr>\n";//P_B_JOB_50201

                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top></td></tr>\n";





                }



            }
            //USINSL-20120514-058:ENH ENDS
            /******************                          For sms Mail starts           ********************/
            if("0".equals(messageOption))
            {
                String sTokens="";
                StringTokenizer st=new StringTokenizer(emailContents,", ");

                while(st.hasMoreTokens())
                {
                    sTokens=st.nextToken();
                    if(sTokens.equals("CONTACT_NAME") && info.get(FieldNames.FIRST_NAME)!=null && info.get(FieldNames.LAST_NAME)!=null)
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Contact Name: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";   // P_B_SCH_5072 modified by Prabhat
                    }

                    else if(sTokens.equals("ADDRESS") && StringUtil.isValid(info.get(FieldNames.ADDRESS)))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Address: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ADDRESS)+"</td></tr>\n";
                    } else if(sTokens.equals("ADDRESS2") && info.get(FieldNames.ADDRESS2)!=null && !info.get(FieldNames.ADDRESS2).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Address2: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ADDRESS2)+"</td></tr>\n";
                    } else if(sTokens.equals("CITY") && StringUtil.isValid(info.get(FieldNames.CITY)))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">City: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.CITY)+"</td></tr>\n";
                    } else if(sTokens.equals("STATE") && StringUtil.isValidNew(info.get(FieldNames.STATE)))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">State: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"</td></tr>\n";
                    } else if(sTokens.equals("ZIP_CODE") && StringUtil.isValid(info.get(FieldNames.ZIPCODE)))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Zip/ Postal Code: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ZIPCODE)+"</td></tr>\n";
                    } else if(sTokens.equals("COUNTRY") && StringUtil.isValidNew(info.get(FieldNames.COUNTRY)))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Country: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"</td></tr>\n";
                    } else if(sTokens.equals("PHONE_NUMBERS") && StringUtil.isValid(info.get(FieldNames.PHONE_NUMBERS)))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Phone No: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS))+"</td></tr>\n";
                    }
                    else if(sTokens.equals("HOME_PHONE") && info.get(FieldNames.HOME_PHONE)!=null && !info.get(FieldNames.HOME_PHONE).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Home Phone No : </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get(FieldNames.HOME_PHONE))+"</td></tr>\n";
                    } else if(sTokens.equals("MOBILE") && info.get(FieldNames.MOBILE)!=null && !info.get(FieldNames.MOBILE).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Mobile No: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get(FieldNames.MOBILE))+"</td></tr>\n";
                    } else if(sTokens.equals("FAX") && info.get(FieldNames.FAX)!=null && !info.get(FieldNames.FAX).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Fax: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FAX)+"</td></tr>\n";
                    } //niraj,18-sep-2007,new check added for checking -1 in (Best time to contact),bugid=27637
                    else if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.get(FieldNames.BEST_TIME_TO_CONTACT)!=null &&  !info.get(FieldNames.BEST_TIME_TO_CONTACT).equals("") && !info.get(FieldNames.BEST_TIME_TO_CONTACT).equals("-1")  )
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Best Time To Contact: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.BEST_TIME_TO_CONTACT)+"</td></tr>\n";
                    } else if(sTokens.equals("EMAIL_ID") && info.get(FieldNames.EMAIL_ID)!=null && !info.get(FieldNames.EMAIL_ID).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Email: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.EMAIL_ID)+"</td></tr>\n";
                    } else if(sTokens.equals("LEAD_SOURCE2_ID") && info.get(FieldNames.LEAD_SOURCE2_ID)!=null && !info.get(FieldNames.LEAD_SOURCE2_ID).equals("") && !info.get(FieldNames.LEAD_SOURCE2_ID).equals("-1"))
                    {  // Niraj sachan Bug_id 27771- 14Sep2007
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Lead Source Category: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+AdminMgr.newInstance().getFsLeadSource2DAO().getCaegoryName(info.get(FieldNames.LEAD_SOURCE2_ID))+"</td></tr>\n";
                    } else if(sTokens.equals("LEAD_SOURCE3_ID") && info.get(FieldNames.LEAD_SOURCE3_ID)!=null && !info.get(FieldNames.LEAD_SOURCE3_ID).equals("") && !info.get(FieldNames.LEAD_SOURCE3_ID).equals("-1"))
                    {  // Niraj sachan Bug_id 27771- 14Sep2007
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Lead Source Details: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+AdminMgr.newInstance().getFsLeadSource3DAO().getCaegoryDetailsName(info.get(FieldNames.LEAD_SOURCE3_ID))+"</td></tr>\n";
                    } else if(sTokens.equals("LIQUID_CAPITAL_MIN") && info.get(FieldNames.LIQUID_CAPITAL_MIN)!=null && !info.get(FieldNames.LIQUID_CAPITAL_MIN).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Current Net Worth: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.LIQUID_CAPITAL_MIN)+"</td></tr>\n";
                    } else if(sTokens.equals("LIQUID_CAPITAL_MAX") && info.get(FieldNames.LIQUID_CAPITAL_MAX)!=null && !info.get(FieldNames.LIQUID_CAPITAL_MAX).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Cash Available for Investment: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.LIQUID_CAPITAL_MAX)+"</td></tr>\n";
                    } else if(sTokens.equals("INVEST_TIMEFRAME") && info.get(FieldNames.INVEST_TIMEFRAME)!=null && !info.get(FieldNames.INVEST_TIMEFRAME).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Investment Timeframe: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.INVEST_TIMEFRAME)+"</td></tr>\n";
                    }
                }
            }
			/* 
			Added by Niraj Sachan on 10-Sep-07 configure Email Content in franchise sales module  End
			 */
            else if(messageOption != null && messageOption.equals("preview"))
            {

				/*if(info.get("taskSubject")!=null) 
				{
					mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Subject: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get("taskSubject")+"</td></tr>\n";
				}*/

                String sTokens="";
                StringTokenizer st=new StringTokenizer(emailContents,", ");

                while(st.hasMoreTokens())
                {
                    sTokens=st.nextToken();
                    if(sTokens.equals("NAME") && info.get(FieldNames.FIRST_NAME)!=null && info.get(FieldNames.LAST_NAME)!=null)
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Contact Name: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";  // P_B_SCH_5072 modified by Prabhat
                    } else if(sTokens.equals("ADDRESS") && info.get(FieldNames.ADDRESS)!=null && !info.get(FieldNames.ADDRESS).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Address: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ADDRESS)+"</td></tr>\n";
                    } else if(sTokens.equals("ADDRESS2") && info.get(FieldNames.ADDRESS2)!=null && !info.get(FieldNames.ADDRESS2).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Address2: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ADDRESS2)+"</td></tr>\n";
                    } else if(sTokens.equals("CITY") && info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">City: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.CITY)+"</td></tr>\n";
                    } else if(sTokens.equals("STATE") && info.get(FieldNames.STATE_ID)!=null && !info.get(FieldNames.STATE_ID).equals("") && !info.get(FieldNames.STATE_ID).equals("-1"))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">State: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.STATE_ID)+"</td></tr>\n";
                    } else if(sTokens.equals("ZIP") && info.get(FieldNames.ZIP)!=null && !info.get(FieldNames.ZIP).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Zip/ Postal Code: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ZIP)+"</td></tr>\n";
                    } else if(sTokens.equals("COUNTRY") && info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).equals("") && !info.get(FieldNames.COUNTRY).equals("-1"))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Country: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.COUNTRY)+"</td></tr>\n";
                    } else if(sTokens.equals("PHONE") && info.get(FieldNames.PHONE)!=null && !info.get(FieldNames.PHONE).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Phone No: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.PHONE)+"</td></tr>\n";
                    } else if(sTokens.equals("HOME_PHONE") && info.get(FieldNames.HOME_PHONE)!=null && !info.get(FieldNames.HOME_PHONE).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Home Phone: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.HOME_PHONE)+"</td></tr>\n";
                    } else if(sTokens.equals("MOBILE") && info.get(FieldNames.MOBILE)!=null && !info.get(FieldNames.MOBILE).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Mobile No: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.MOBILE)+"</td></tr>\n";
                    } else if(sTokens.equals("FAX") && info.get(FieldNames.FAX)!=null && !info.get(FieldNames.FAX).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Fax: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FAX)+"</td></tr>\n";
                    } else if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.get(FieldNames.BEST_TIME_TO_CONTACT)!=null && !info.get(FieldNames.BEST_TIME_TO_CONTACT).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Best Time To Contact: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.BEST_TIME_TO_CONTACT)+"</td></tr>\n";
                    } else if(sTokens.equals("EMAIL_ID") && info.get(FieldNames.EMAIL_ID)!=null && !info.get(FieldNames.EMAIL_ID).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Email: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.EMAIL_ID)+"</td></tr>\n";
                    } else if(sTokens.equals("LEAD_SOURCE2_ID") && info.get(FieldNames.LEAD_SOURCE2_ID)!=null && !info.get(FieldNames.LEAD_SOURCE2_ID).equals("") && !info.get(FieldNames.LEAD_SOURCE2_ID).equals("-1"))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Lead Source Category: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.LEAD_SOURCE2_ID)+"</td></tr>\n";
                    } else if(sTokens.equals("LEAD_SOURCE3_ID") && info.get(FieldNames.LEAD_SOURCE3_ID)!=null && !info.get(FieldNames.LEAD_SOURCE3_ID).equals("") && !info.get(FieldNames.LEAD_SOURCE3_ID).equals("-1"))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Lead Source Details: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.LEAD_SOURCE3_ID)+"</td></tr>\n";
                    } else if(sTokens.equals("LIQUID_CAPITAL_MIN") && info.get(FieldNames.LIQUID_CAPITAL_MIN)!=null && !info.get(FieldNames.LIQUID_CAPITAL_MIN).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Current Net Worth: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.LIQUID_CAPITAL_MIN)+"</td></tr>\n";
                    } else if(sTokens.equals("LIQUID_CAPITAL_MAX") && info.get(FieldNames.LIQUID_CAPITAL_MAX)!=null && !info.get(FieldNames.LIQUID_CAPITAL_MAX).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Cash Available for Investment: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.LIQUID_CAPITAL_MAX)+"</td></tr>\n";
                    } else if(sTokens.equals("INVEST_TIMEFRAME") && info.get(FieldNames.INVEST_TIMEFRAME)!=null && !info.get(FieldNames.INVEST_TIMEFRAME).equals(""))
                    {
                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Investment Timeframe: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.INVEST_TIMEFRAME)+"</td></tr>\n";
                    }
                }

            }
            else if("2".equals(messageOption)) {


                String sTokens="";
                StringTokenizer st=new StringTokenizer(emailContents,", ");
                ///////////////////////////////////////////////////// P_B_SCH_5072 modified by Prabhat

                mailContent="<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"><META content=\"MSHTML 6.00.2800.1106\" name=GENERATOR></head> \n"
                        +"<body bgcolor=\"#FFFFFF\" text=\"#000000\">";

				/*if(info.get("taskSubject")!=null) 
			{
				mailContent=mailContent+": "+info.get("taskSubject")+") ";
			}else{
				mailContent=mailContent+") ";
			}*/

                String mailContentTemp = "";
                while(st.hasMoreTokens())
                {
                    sTokens=st.nextToken();
                    if(sTokens.equals("CONTACT_NAME") && info.get(FieldNames.FIRST_NAME)!=null && info.get(FieldNames.LAST_NAME)!=null)
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME);
                    }

                    else if(sTokens.equals("ADDRESS"))
                    {
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("ADDRESS")))
                            mailContentTemp = mailContentTemp+" / "+otherAddressInfo.get("ADDRESS");
                        else if(StringUtil.isValid(info.get(FieldNames.ADDRESS)))
                            mailContentTemp = mailContentTemp+" / "+info.get(FieldNames.ADDRESS);
                    }
                    else if(sTokens.equals("ADDRESS2") && StringUtil.isValid(info.get(FieldNames.ADDRESS2)))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.ADDRESS2);
                    }
                    else if(sTokens.equals("CITY"))
                    {
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("CITY")))
                            mailContentTemp=mailContentTemp+" / "+otherAddressInfo.get("CITY");
                        else if(StringUtil.isValid(info.get(FieldNames.CITY)))
                            mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.CITY);
                    } else if(sTokens.equals("STATE"))
                    {
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("STATE")))
                            mailContentTemp=mailContentTemp+" / "+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"));
                        else if(StringUtil.isValidNew(info.get(FieldNames.STATE)))
                            mailContentTemp=mailContentTemp+" / "+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE));
                    } else if(sTokens.equals("ZIP_CODE"))
                    {
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("ZIPCODE")))
                            mailContentTemp=mailContentTemp+" / "+otherAddressInfo.get("ZIPCODE");
                        else if(StringUtil.isValid(info.get(FieldNames.ZIPCODE)))
                            mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.ZIPCODE);
                    } else if(sTokens.equals("COUNTRY"))
                    {
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("COUNTRY")))
                            mailContentTemp=mailContentTemp+" / "+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"));
                        else if(StringUtil.isValidNew(info.get(FieldNames.COUNTRY)))
                            mailContentTemp=mailContentTemp+" / "+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY));
                    } else if(sTokens.equals("PHONE_NUMBERS"))
                    {
                        if(otherAddressInfo!=null && otherAddressInfo.size()!=0 && StringUtil.isValid(otherAddressInfo.get("PHONE_NUMBERS")))
                            mailContentTemp=mailContentTemp+" / "+PortalUtils.formatPhoneNo(otherAddressInfo.get("PHONE_NUMBERS"));
                        else if(StringUtil.isValid(info.get(FieldNames.PHONE_NUMBERS)))
                            mailContentTemp=mailContentTemp+" / "+PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS));
                    }
                    else if(sTokens.equals("HOME_PHONE") && info.get(FieldNames.HOME_PHONE)!=null && !info.get(FieldNames.HOME_PHONE).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+PortalUtils.formatPhoneNo(info.get(FieldNames.HOME_PHONE));
                    }
                    else if(sTokens.equals("MOBILE_NUMBERS") && info.get(FieldNames.MOBILE_NUMBERS)!=null && !info.get(FieldNames.MOBILE_NUMBERS).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+PortalUtils.formatPhoneNo(info.get(FieldNames.MOBILE_NUMBERS));
                    }
                    else if(sTokens.equals("FAX_NUMBERS") && info.get(FieldNames.FAX_NUMBERS)!=null && !info.get(FieldNames.FAX_NUMBERS).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.FAX_NUMBERS);
                    }
                    else if(sTokens.equals("BEST_TIME_TO_CONTACT") && info.get(FieldNames.BEST_TIME_TO_CONTACT)!=null && !info.get(FieldNames.BEST_TIME_TO_CONTACT).equals("") && !info.get(FieldNames.BEST_TIME_TO_CONTACT).equals("-1"))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.BEST_TIME_TO_CONTACT);
                    }
                    else if(sTokens.equals("EMAIL_ID") && info.get(FieldNames.EMAIL_IDS)!=null && !info.get(FieldNames.EMAIL_IDS).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.EMAIL_IDS);
                    }

                    else if(sTokens.equals("LEAD_SOURCE2_ID") && info.get(FieldNames.LEAD_SOURCE2_ID)!=null && !info.get(FieldNames.LEAD_SOURCE2_ID).equals("") && !info.get(FieldNames.LEAD_SOURCE2_ID).equals("-1"))
                    {
                        mailContentTemp=mailContentTemp+" / "+AdminMgr.newInstance().getFsLeadSource2DAO().getCaegoryName(info.get(FieldNames.LEAD_SOURCE2_ID));
                    }
                    else if(sTokens.equals("LEAD_SOURCE3_ID") && info.get(FieldNames.LEAD_SOURCE3_ID)!=null && !info.get(FieldNames.LEAD_SOURCE3_ID).equals("") && !info.get(FieldNames.LEAD_SOURCE3_ID).equals("-1"))
                    {
                        mailContentTemp=mailContentTemp+" / "+AdminMgr.newInstance().getFsLeadSource3DAO().getCaegoryDetailsName(info.get(FieldNames.LEAD_SOURCE3_ID));
                    }
                    else if(sTokens.equals("COMPANY_NAME") && info.get(FieldNames.COMPANY_NAME)!=null && !info.get(FieldNames.COMPANY_NAME).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.COMPANY_NAME);
                    }
                    else if(sTokens.equals("LIQUID_CAPITAL_MAX") && info.get(FieldNames.LIQUID_CAPITAL_MAX)!=null && !info.get(FieldNames.LIQUID_CAPITAL_MAX).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.LIQUID_CAPITAL_MAX);
                    }
                    else if(sTokens.equals("INVEST_TIMEFRAME") && info.get(FieldNames.INVEST_TIMEFRAME)!=null && !info.get(FieldNames.INVEST_TIMEFRAME).equals(""))
                    {
                        mailContentTemp=mailContentTemp+" / "+info.get(FieldNames.INVEST_TIMEFRAME);
                    }

                }
                if(recYesRadio!=null && !recYesRadio.trim().equals("") && !recYesRadio.trim().equalsIgnoreCase("null") && recYesRadio.trim().equalsIgnoreCase("Y"))
                {
                    mailContentTemp=mailContentTemp+" / Yes";
                }
                else
                {
                    mailContentTemp=mailContentTemp+" / No";
                }

                if(mailContentTemp!=null && mailContentTemp.trim().startsWith("/")){
                    mailContentTemp = mailContentTemp.replaceFirst("/", "");
                }
                mailContent = mailContent + mailContentTemp.trim();

            }

            else
            {
                //USINSL-20120514-058:ENH STARTS FOR MULTIDAY TASKS
                if(StringUtil.isValid(mailType) && mailType.equals("contactMail")){
                    if(multiMap.size() != 0 && recTask!=null && !recTask.equals("")){
                        mailContent=mailContent+"</table><br><br><table width=\"30%\" style=\"border:1px solid rgb(197, 216, 229); background-color:rgb(197, 216, 229);\" border=\"0\" cellpadding=\"5\" cellspacing=\"1\">"
                                +"<tr style=\"background-color: rgb(232, 240, 250); font-size: 10pt; text-align: center;\">"
                                +"<td colspan=\"2\" align=\"left\" valign=\"top\" s style=\"border-color: rgb(197, 216, 229); background-color:#f7f7f7; font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">Scheduled Dates/Time</td></tr>"
                                +"<tr style=\"background-color: rgb(232, 240, 250); font-size: 10pt; text-align: center;\">"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" valign=\"top\">Date</td>"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" valign=\"top\">Time</td>"
                                +"</tr>";
                        //if(multiMap.size() != 0) {
                        int size=multiMap.size();
                        Info multiInfo=null;
                        String startDateTime="";
                        String endDateTime="";
                        for(int i=0;i<size;i++)
                        {
                            mailContent=mailContent+"<tr style=\"background-color: rgb(255, 255, 255);\" valign=\"top\">";
                            multiInfo=(Info)multiMap.get(i);
                            startDateTime=multiInfo.getString(FieldNames.START_DATETIME);
                            endDateTime=multiInfo.getString(FieldNames.END_DATETIME);
                            String[] startDateAndTime=startDateTime.split(" ");
                            String[] endDateAndTime=endDateTime.split(" ");
                            String formattedTime = startDateAndTime[1].substring(0,5)+"-"+endDateAndTime[1].substring(0,5);
                            mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" valign=\"top\">"+DateUtil.formatDate(startDateAndTime[0], "MM-dd-yyyy")+"</td>";//P_B_SCH_35929
                            mailContent=mailContent+"<td align=\"left\" valign=\"top\" nowrap style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+formattedTime+"</td></tr>";
                        }
                    }

                }
                //USINSL-20120514-058:ENH starts for the task mail send to The Owner when Multiple Tasks are created for that Owner.
                else if(StringUtil.isValid(mailType) && mailType.equals("multiTaskMail")){
                    mailContent=mailContent+"<tbody><tr style=\"background-color: rgb(232, 240, 250); font-size: 9pt; text-align: center;\">"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Task Subject </th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Task Start Date Time</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Task Duration</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Contact Name</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Best Time To Contact</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Company Name</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Country</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Email</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Fax</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Mobile No</th>"
                            +"<th style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" >Phone No</th></tr>";

                    int size=contactMap.size();
                    Info contactInfo=null;
                    for(int i=0;i<size;i++)
                    {
                        mailContent=mailContent+"<tr style=\"background-color: rgb(255, 255, 255);\" valign=\"top\">";
                        contactInfo=(Info)contactMap.get(i);
                        mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 12px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\"  valign=\"top\">"+info.get("taskSubject")+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+sDateTime+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+duration+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.FIRST_NAME)+" "+contactInfo.getString(FieldNames.LAST_NAME)+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.BEST_TIME_TO_CONTACT)+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.COMPANY_NAME)+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+NewPortalUtils.getCountryName(contactInfo.getString(FieldNames.COUNTRY))+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.EMAIL_IDS)+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.FAX_NUMBERS)+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.MOBILE_NUMBERS)+"</td>"
                                +"<td align=\"left\" valign=\"top\"  style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+contactInfo.getString(FieldNames.PHONE_NUMBERS)+"</td></tr>";
                    }
                    mailContent=mailContent+"</tbody>";

                }
                //USINSL-20120514-058:ENH ends for the task mail send to The Owner when Multiple Tasks are created for that Owner.
                else{
                    /************************             Task Mail to Owner starts       ******************************************/
                    //USINSL-20120514-058:ENH STARTS FOR THE THE MAIL SEND TO THE TASK OWNERS

                    if(!"1".equals(messageOption))
                    {
                        String sTokens="";
                        StringTokenizer st=new StringTokenizer(emailContents,", ");
                        while(st.hasMoreTokens())
                        {
                            sTokens=st.nextToken();
                            if(sTokens.equals("NAME") && info.get(FieldNames.FIRST_NAME)!=null && info.get(FieldNames.LAST_NAME)!=null)
                            {
                                if(fromAssigned!=null && fromAssigned.trim().equalsIgnoreCase("A"))
                                {
                                    if("".equals(nameA.get("FIRST_NAME")) && "".equals(nameA.get("LAST_NAME"))){
                                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To222: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Unassigned</td></tr>\n";
                                    }else{
                                        mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To333: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";   // P_B_SCH_5072 modified by Prabhat
                                    }
                                    //mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Assigned To: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+nameA.get("LAST_NAME")+", "+nameA.get("FIRST_NAME")+"</td></tr>\n";


                                }
                                else
                                    mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Contact Name: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get(FieldNames.FIRST_NAME)+" "+info.get(FieldNames.LAST_NAME)+"</td></tr>\n";


                            } //commented for USINSL-20120514-058
                            if(sTokens.equals("ADDRESS")){
                                //for the address other than the contact address   
                                if(otherAddressInfo!=null && otherAddressInfo.size()!=0)
                                {
                                    mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Service Address: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+otherAddressInfo.getString("ADDRESS")+"</td></tr>\n";
                                    if((otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals("")) || (otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1")) || (otherAddressInfo.get("COUNTRY")!=null && !otherAddressInfo.get("COUNTRY").trim().equals("")  && !otherAddressInfo.get("COUNTRY").equals("-1"))){
                                        mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";
                                        if(otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals(""))
                                            mailContent=mailContent+otherAddressInfo.get("CITY")+"";
                                        if((otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals("")) && (otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1")))
                                            mailContent=mailContent+", "+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))+"";
                                        else {
                                            if(otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1"))
                                                mailContent=mailContent+RegionMgr.newInstance().getRegionsDAO().getStateName(otherAddressInfo.get("STATE"))+"";
                                        }
                                        if(((otherAddressInfo.get("CITY")!=null && !otherAddressInfo.get("CITY").trim().equals("")) || (otherAddressInfo.get("STATE")!=null && !otherAddressInfo.get("STATE").trim().equals("") && !otherAddressInfo.get("STATE").equals("-1"))) && (otherAddressInfo.get("COUNTRY")!=null && !otherAddressInfo.get("COUNTRY").trim().equals("")  && !otherAddressInfo.get("COUNTRY").equals("-1")))
                                            mailContent=mailContent+", "+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))+"";
                                        else{
                                            if(otherAddressInfo.get("COUNTRY")!=null && !otherAddressInfo.get("COUNTRY").trim().equals("")  && !otherAddressInfo.get("COUNTRY").equals("-1"))
                                                mailContent=mailContent+NewPortalUtils.getCountryName(otherAddressInfo.get("COUNTRY"))+"";
                                        }
                                        mailContent=mailContent+"</td></tr>\n";
                                    }
                                    if(otherAddressInfo.get("ZIPCODE")!=null && !otherAddressInfo.get("ZIPCODE").trim().equals(""))
                                        mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+otherAddressInfo.get("ZIPCODE")+"</td></tr>\n";
                                } else {
                                    if(info.get(FieldNames.ADDRESS)!=null && !info.get(FieldNames.ADDRESS).equals(""))
                                    {
                                        mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">Service Address: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ADDRESS)+"</td></tr>\n";

                                        if((info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals("")) || (info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1")) || (info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).trim().equals("")  && !info.get(FieldNames.COUNTRY).equals("-1"))){
                                            mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>";
                                            if(info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals(""))
                                                mailContent=mailContent+info.get(FieldNames.CITY)+"";
                                            if((info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals("")) && (info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1")))
                                                mailContent=mailContent+", "+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"";
                                            else {
                                                if(info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1"))
                                                    mailContent=mailContent+RegionMgr.newInstance().getRegionsDAO().getStateName(info.get(FieldNames.STATE))+"";
                                            }
                                            if(((info.get(FieldNames.CITY)!=null && !info.get(FieldNames.CITY).trim().equals("")) || (info.get(FieldNames.STATE)!=null && !info.get(FieldNames.STATE).trim().equals("") && !info.get(FieldNames.STATE).equals("-1"))) && (info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).trim().equals("")  && !info.get(FieldNames.COUNTRY).equals("-1")))
                                                mailContent=mailContent+", "+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"";
                                            else{
                                                if(info.get(FieldNames.COUNTRY)!=null && !info.get(FieldNames.COUNTRY).trim().equals("")  && !info.get(FieldNames.COUNTRY).equals("-1"))
                                                    mailContent=mailContent+NewPortalUtils.getCountryName(info.get(FieldNames.COUNTRY))+"";
                                            }
                                            mailContent=mailContent+"</td></tr>\n";
                                        }
                                        if(info.get(FieldNames.ZIPCODE)!=null && !info.get(FieldNames.ZIPCODE).trim().equals(""))
                                            mailContent=mailContent+"<tr valign=\"top\"><TD nowrap style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\">&nbsp;</td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>"+info.get(FieldNames.ZIPCODE)+"</td></tr>\n";
                                    }
                                }}
						
						/*else if(sTokens.equals("PHONE_NUMBERS") && info.get(FieldNames.PHONE_NUMBERS)!=null && !info.get(FieldNames.PHONE_NUMBERS).equals("")) 
						{  
							mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Phone Number: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+PortalUtils.formatPhoneNo(info.get(FieldNames.PHONE_NUMBERS))+"</td></tr>\n";
						}*/
                            else if(sTokens.equals("EMAIL_ID") && info.get(FieldNames.EMAIL_IDS)!=null && !info.get(FieldNames.EMAIL_IDS).equals(""))
                            {
                                mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Contact Email Id: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+info.get(FieldNames.EMAIL_IDS)+"</td></tr>\n";
                            }

                        }
                    }


                    if(multiMap.size() != 0 && recTask!=null && !recTask.equals("")){
                        if(StringUtil.isValid(assignByUserName))
                            mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\">Created by: </td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top>"+assignByUserName+"</td></tr>\n";

                        mailContent=mailContent+"<tr valign=\"top\" style=\"background-color:#ffffff;\"><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"8%\" align=\"right\" valign=\"top\" nowrap=\"nowrap\"></td><TD style=\"FONT-SIZE: 10pt; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" vAlign=top></td></tr>\n";


                    }
                    if(multiMap.size() != 0 && recTask!=null && !recTask.equals("")){
                        mailContent=mailContent+"</table><br><br><table width=\"30%\" style=\"border:1px solid rgb(197, 216, 229); background-color:rgb(197, 216, 229);\" border=\"0\" cellpadding=\"5\" cellspacing=\"1\">"
                                +"<tr style=\"background-color: rgb(232, 240, 250); font-size: 10pt; text-align: center;\">"
                                +"<td colspan=\"2\" align=\"left\" valign=\"top\" s style=\"border-color: rgb(197, 216, 229); background-color:#f7f7f7; font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">Scheduled Dates/Time</td></tr>"
                                +"<tr style=\"background-color: rgb(232, 240, 250); font-size: 10pt; text-align: center;\">"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" valign=\"top\">Date</td>"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" valign=\"top\">Time</td>"
                                +"</tr>";
                        //if(multiMap.size() != 0) {
                        int size=multiMap.size();
                        Info multiInfo=null;
                        String startDateTime="";
                        String endDateTime="";
                        for(int i=0;i<size;i++)
                        {
                            mailContent=mailContent+"<tr style=\"background-color: rgb(255, 255, 255);\" valign=\"top\">";
                            multiInfo=(Info)multiMap.get(i);
                            startDateTime=multiInfo.getString(FieldNames.START_DATETIME);
                            endDateTime=multiInfo.getString(FieldNames.END_DATETIME);
                            String[] startDateAndTime=startDateTime.split(" ");
                            String[] endDateAndTime=endDateTime.split(" ");
                            String formattedTime = startDateAndTime[1].substring(0,5)+"-"+endDateAndTime[1].substring(0,5);
                            mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" align=\"left\" valign=\"top\">"+DateUtil.formatDate(startDateAndTime[0], "MM-dd-yyyy")+"</td>";
                            mailContent=mailContent+"<td align=\"left\" valign=\"top\" nowrap style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\">"+formattedTime+"</td></tr>";
                        }
                    }
                    //USINSL-20120514-058:ENH FOR THE TASKS ESTIMATES/INVOICED.
                    //P_B_JOBS_50144 starts
                    if(productMap.size() != 0){ mailContent=mailContent+"</table><br><br><table border=\"0\" cellpadding=5 cellspacing=1 width=\"800\" >"
                            +"<tbody><tr><td  align=\"left\" width=\"100%\" nowrap=\"nowrap\" height=\"25\" style=\"border-color: rgb(197, 216, 229); background-color:#f7f7f7; font-weight: bold; font-size: 13px; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif;\" colspan=\"4\">"
                            +_baseConstants.LBL_INV_PRODUCT_SERVICE+"</td></tr>"	//P_B_JOBS_50277
                            +"<tr style=\"background: -moz-linear-gradient(center top , #E4E5E5, #F8F8F8) repeat scroll 0 0 transparent; font-size: 10pt; text-align: center;\">"
                            +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\"><b>"+_baseConstants.LBL_INV_PRODUCT_SERVICE+" Name</b></td>"
                            +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\"><b>"+_baseConstants.LBL_INV_PRODUCT_SERVICE+" Description</b></td>"
                            +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\"><b>Quantity </b></td>"
                            +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\"><b>"+_baseConstants.LBL_INV_PRODUCT_SERVICE+" Price("+_baseConstants.USER_CURRENCY+")</b></td>" //P_B_JOBS_50277
                            +"</tr>";
                        int size=productMap.size();
                        Info productInfo=null;
                        int quantity=0;
                        double price=00.00;
                        for(int i=0;i<size;i++)
                        {
                            mailContent=mailContent+"<tr style=\"background-color: rgb(255, 255, 255);\" valign=\"top\">";
                            productInfo=(Info)productMap.get(i);
                            mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" nowrap=\"nowrap\" width=\"25%\">"+productInfo.getString(FieldNames.PRODUCT_NAME)+"</td>";
                            mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" nowrap=\"nowrap\" width=\"25%\">"+productInfo.getString(FieldNames.DESCRIPTION)+"</td>";
                            mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\">"+productInfo.getString(FieldNames.QUANTITY)+"</td>";
                            mailContent=mailContent+"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\">"+productInfo.getString(FieldNames.AMOUNT)+"</td></tr>";
                            quantity = quantity + Integer.parseInt(productInfo.getString(FieldNames.QUANTITY));
                            price =price + Double.parseDouble(NumberFormatUtils.formatCommaNumberModify(productInfo.getString(FieldNames.AMOUNT)));
                        }
                        mailContent=mailContent+"<tr style=\"background: -moz-linear-gradient(center top , #E4E5E5, #F8F8F8) repeat scroll 0 0 transparent; font-size: 10pt; text-align: center;\">"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-weight: bold; font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\"><b>Total</b></td>"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\">&nbsp;</td>"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\">"+quantity+"</td>"
                                +"<td style=\"border-color: rgb(197, 216, 229); font-size: 10pt; line-height: 16px; font-family: Tahoma,Arial,Helvetica,sans-serif; border-bottom: 1px solid #E9E7E7;\" align=\"left\" valign=\"top\" width=\"25%\">"+NumberFormatUtils.formatNumberWithDecimal(price)+"</td>"  //P_B_JOBS_50277
                                +"</tr></tbody>";

                        //P_B_JOBS_50144 ends
                        //+"</table><br></div>";
                    }
                    //USINSL-20120514-058:ENH ENDS
                }
                //USINSL-20120514-058:ENH ENDS FOR THE TASK MAILS SENT TO THE OWNER.

                //Setting recurrence Message in Mail Text

                if(recYesRadio!=null && !recYesRadio.trim().equals("") && !recYesRadio.trim().equalsIgnoreCase("null") && recYesRadio.trim().equalsIgnoreCase("Yes"))
                {

                    if (recPattern!=null && recPattern.trim().equalsIgnoreCase("628"))
                    {
                        if(recInterval!=null && !recInterval.trim().equalsIgnoreCase("-1"))
                        {
                            if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Daily, Every "+recInterval+" Day(s), End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                            }
                            else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Daily, Every "+recInterval+" Day(s), End by "+recEndDateTime+"</td></tr>\n";
                            }
                        }
                        else
                        {
                            if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Daily, Every weekday, End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                            }
                            else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Daily, Every weekday, End by "+recEndDateTime+"</td></tr>\n";
                            }

                        }
                    }

                    else if(recPattern!=null && recPattern.trim().equalsIgnoreCase("629"))
                    {
                        if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                        {
                            mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Weekly, Recur Every "+recInterval+" week(s) on "+dayNames+", End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                        }
                        else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                        {
                            mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Weekly, Recur Every "+recInterval+" week(s) on "+dayNames+", End by "+recEndDateTime+"</td></tr>\n";
                        }
                    }

                    else if(recPattern!=null && recPattern.trim().equalsIgnoreCase("630"))
                    {

                        if(recInstance==null || recInstance.trim().equals("") || recInstance.trim().equals("null"))
                        {
                            if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Monthly, Day "+recDayOfMonth+" of every "+recInterval+" months(s), End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                            }
                            else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Monthly, Day "+recDayOfMonth+" of every "+recInterval+" months(s), End by "+recEndDateTime+"</td></tr>\n";
                            }

                        }
                        else
                        {
                            if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Monthly, "+qName+" "+dayMNames+"of every "+recInterval+" of every "+recInterval+" months(s), End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                            }
                            else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Monthly, "+qName+" "+dayMNames+"of every "+recInterval+" of every "+recInterval+" months(s), End by "+recEndDateTime+"</td></tr>\n";
                            }

                        }


                    }

                    else if(recPattern!=null && recPattern.trim().equalsIgnoreCase("631"))
                    {
                        if(recInstance==null || recInstance.trim().equals("") || recInstance.trim().equals("null"))
                        {
                            if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Yearly, Every "+monthName+" "+recDayOfMonth+", End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                            }
                            else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Yearly, Every "+monthName+" "+recDayOfMonth+", End by "+recEndDateTime+"</td></tr>\n";
                            }
                        }
                        else
                        {
                            if(recOccurrence!=null && !recOccurrence.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Yearly, The "+qName+" "+dayMNames+" of "+monthName+", End after "+recOccurrence+" occurrence(s)</td></tr>\n";
                            }
                            else if(recEndDateTime!=null && !recEndDateTime.trim().equalsIgnoreCase("undefined"))
                            {
                                mailContent=mailContent+"<tr valign=\"top\"><TD style=\"FONT-WEIGHT: bold; FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif\" width=\"20%\" align=right valign=\"top\">Recurrence Pattern: </td><TD style=\"FONT-SIZE: 11px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" vAlign=top>Yearly, The "+qName+" "+dayMNames+" of "+monthName+", End by "+recEndDateTime+"</td></tr>\n";
                            }

                        }
                    }

                }






            }
            //P_E_CONTACT_MAIL added by neeti starts
			/*  if(StringUtil.isValid(mailType) && mailType.equals("contactMail")){
	        	mailContent=mailContent+"</div>";
	        }*/
            //P_E_CONTACT_MAIL added by neeti ends
        }catch(Exception ex){
            ex.printStackTrace();
        }
        return mailContent;
    }


    public static Info getMailInfo(String taskType)
    {

        Info info= new Info();
        ResultSet result = null;
        StringBuffer query = new StringBuffer("SELECT EMAIL_CONTENT,OTHER_EMAIL_CONTENT,EMAIL_FIELDS,OTHER_EMAIL_FIELDS,FROM_EMAIL,EMAIL_SIGNATURE,SUBJECT FROM SCHEDULER_TASK_EMAIL_CONTENT");
        query.append(" WHERE TASK_TYPE = ?");
        try{
            result			= QueryUtil.getResult(query.toString(), new Object[]{taskType});
            while(result.next()){
                info.set("EMAIL_CONTENT",result.getString("EMAIL_CONTENT"));
                info.set("OTHER_EMAIL_CONTENT",result.getString("OTHER_EMAIL_CONTENT"));
                info.set("EMAIL_FIELDS",result.getString("EMAIL_FIELDS"));
                info.set("OTHER_EMAIL_FIELDS",result.getString("OTHER_EMAIL_FIELDS"));
                info.set("FROM_EMAIL",result.getString("FROM_EMAIL"));
                info.set("EMAIL_SIGNATURE",result.getString("EMAIL_SIGNATURE"));
                info.set("SUBJECT",result.getString("SUBJECT"));

            }
        }catch(Exception e){
            logger.error("Exception in getMailInfo Called from TaskManipulator: "+e);
        }finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return info;
    }

    public static Info getMailInfo()
    {
        Info info= new Info();
        ResultSet result = null;
        StringBuffer query = new StringBuffer("SELECT EMAIL_CONTENT,OTHER_EMAIL_CONTENT,OTHER_EMAIL_FIELDS,FROM_EMAIL,EMAIL_SIGNATURE FROM SCHEDULER_TASK_EMAIL_CONTENT");
        try{
            result = QueryUtil.getResult(query.toString(), null);
            while(result.next()){
                info.set("EMAIL_CONTENT",result.getString("EMAIL_CONTENT"));
                info.set("OTHER_EMAIL_CONTENT",result.getString("OTHER_EMAIL_CONTENT"));
                info.set("OTHER_EMAIL_FIELDS",result.getString("OTHER_EMAIL_FIELDS"));
                info.set("FROM_EMAIL",result.getString("FROM_EMAIL"));
                info.set("EMAIL_SIGNATURE",result.getString("EMAIL_SIGNATURE"));

            }
        }catch(Exception e){
            logger.error("Exception in getMailInfo Called from TaskManipulator: "+e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return info;
    }
    public static Info getMailIDInfo(String assignTo)
    {
        return getMailIDInfo(assignTo,null,null,null,null);
    }
    public static Info getMailIDInfo(String assignTo,String fromWhere,String franchiseeNo,String contactID,String ownerType)
    {
        Info info= new Info();
        StringBuffer query = new StringBuffer();
        ResultSet result = null;
        //modified for USINSL-20120514-058
        if(fromWhere!=null && fromWhere.equals("fromSchUtil")){//query added for USINSL-20120514-058:ENH
            if("C".equals(ownerType))
            {
                query.append(" SELECT F.ADDRESS,F.STATE,F.CITY,F.COUNTRY,F.EMAIL_ID,F.PHONE1 FROM FRANCHISEE F JOIN USERS U ON F.FRANCHISEE_NO=U.FRANCHISEE_NO WHERE U.USER_NO IN (SELECT CONTACT_OWNER_ID FROM CM_CONTACT_DETAILS WHERE CONTACT_ID='"+contactID+"')");
            } /*else if(ownerType.equals("C")) 	
					{
						query.append(" SELECT F.ADDRESS,F.STATE,F.CITY,F.COUNTRY,F.EMAIL_ID,F.PHONE1 FROM FRANCHISEE F WHERE FRANCHISEE_NO='"+franchiseeNo+"'");	
				    }*/ else
            {
                query.append(" SELECT F.ADDRESS,F.CITY,F.STATE,F.COUNTRY,F.STORE_EMAIL,F.STORE_PHONE FROM FRANCHISEE F LEFT JOIN FRANCHISEE_USERS FU ON F.FRANCHISEE_NO=FU.FRANCHISEE_NO LEFT JOIN USERS U ON FU.FRANCHISEE_USER_NO=U.USER_IDENTITY_NO WHERE U.USER_NO="+assignTo);
            }
        } else {
            query.append(" SELECT FRANCHISEE.EMAIL_ID AS EMAIL_ID, FRANCHISEE.BLACKBERRY_EMAIL AS BLACKBERRY_EMAIL, FRANCHISEE.SMS_EMAIL AS SMS_EMAIL,CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME,STORE_PHONE AS PHONE FROM  FRANCHISEE left join USERS ON USERS.FRANCHISEE_NO = FRANCHISEE.FRANCHISEE_NO WHERE LOWER(USERS.USER_NO) ="+assignTo+ "  UNION SELECT FRANCHISEE_USERS.EMAIL_ID AS EMAIL_ID, FRANCHISEE_USERS.WEB_MAIL AS BLACKBERRY_EMAIL, FRANCHISEE_USERS.SMS_MAIL AS SMS_EMAIL,CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME,PHONE1 AS PHONE FROM  FRANCHISEE_USERS left join USERS ON USERS.USER_IDENTITY_NO = FRANCHISEE_USERS.FRANCHISEE_USER_NO  WHERE LOWER(USERS.USER_NO) ="+assignTo+"  UNION SELECT FRANCHISEE.EMAIL_ID AS EMAIL_ID,FRANCHISEE.BLACKBERRY_EMAIL AS BLACKBERRY_EMAIL, FRANCHISEE.SMS_EMAIL AS SMS_EMAIL,CONCAT(FIRST_NAME,' ',LAST_NAME) AS NAME,STORE_PHONE as PHONE FROM  FRANCHISEE left join USERS ON USERS.FRANCHISEE_NO = FRANCHISEE.FRANCHISEE_NO WHERE LOWER(USERS.USER_NO) ="+assignTo);
        }
        try{
            result			= QueryUtil.getResult(query.toString(), null);
            while(result.next()){
                //added for USINSL-20120514-058 starts
                if(fromWhere!=null && fromWhere.equals("fromSchUtil")){
                    info.set("ADDRESS",result.getString("ADDRESS"));
                    info.set("CITY",result.getString("CITY"));
                    info.set("STATE",result.getString("STATE"));
                    info.set("COUNTRY",result.getString("COUNTRY"));
                    if(ownerType.equals("C")){
                        info.set("EMAIL_ID",result.getString("EMAIL_ID"));
                        info.set("PHONE",result.getString("PHONE1"));
                    }else {
                        info.set("EMAIL_ID",result.getString("STORE_EMAIL"));
                        info.set("PHONE",result.getString("STORE_PHONE"));
                    }
                } else {
                    //P_E_CONTACT_MAIL added by neeti starts
                    info.set("PHONE",result.getString("PHONE"));
                    //P_E_CONTACT_MAIL added by neeti ends
                    info.set("EMAIL_ID",result.getString("EMAIL_ID"));
                    info.set("BLACKBERRY_EMAIL",result.getString("BLACKBERRY_EMAIL"));
                    info.set("SMS_EMAIL",result.getString("SMS_EMAIL"));
                    info.set("NAME",result.getString("NAME"));
                }//added for USINSL-20120514-058 starts
            }
        }catch(Exception e){
            logger.error("Exception in getMailIDInfo Called from TaskManipulator: "+e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return info;
    }

    public static Info getContactInfo(String contactID,String assignTo)
    {
        Info info= new Info();
        ResultSet result = null;
        StringBuffer query = new StringBuffer("SELECT CD.CONTACT_FIRST_NAME,CD.CONTACT_LAST_NAME,CD.CM_SOURCE_2_ID,CD.CM_SOURCE_3_ID,A.ADDRESS,A.CITY,A.STATE,A.COUNTRY,A.ZIPCODE,CD.BEST_TIME_TO_CONTACT,A.EMAIL_IDS,A.FAX_NUMBERS,A.PHONE_NUMBERS,A.MOBILE_NUMBERS, CI.COMPANY_NAME FROM CM_CONTACT_DETAILS CD LEFT JOIN ADDRESS A ON CD.CONTACT_ID=A.FOREIGN_ID AND A.FOREIGN_TYPE='cmContactDetails' LEFT JOIN CM_COMPANY_INFO CI ON CD.COMPANY_ID=CI.COMPANY_ID WHERE CD.CONTACT_ID="+contactID);
        try{
            result			= QueryUtil.getResult(query.toString(), null);
            while(result.next()){
                info.set(FieldNames.ADDRESS,result.getString("ADDRESS"));
                info.set(FieldNames.CITY,result.getString("CITY"));
                info.set(FieldNames.STATE,result.getString("STATE"));
                info.set(FieldNames.COUNTRY,result.getString("COUNTRY"));
                info.set(FieldNames.ZIPCODE,result.getString("ZIPCODE"));
                info.set(FieldNames.BEST_TIME_TO_CONTACT,result.getString("BEST_TIME_TO_CONTACT"));
                info.set(FieldNames.EMAIL_IDS,result.getString("EMAIL_IDS"));
                info.set(FieldNames.FAX_NUMBERS,result.getString("FAX_NUMBERS"));
                info.set(FieldNames.PHONE_NUMBERS,result.getString("PHONE_NUMBERS"));
                info.set(FieldNames.MOBILE_NUMBERS,result.getString("MOBILE_NUMBERS"));
                info.set(FieldNames.COMPANY_NAME,result.getString("COMPANY_NAME"));
                info.set("leadSource",result.getString("CM_SOURCE_3_ID"));//added for USINSL-20120514-058:ENH
                info.set("leadSourceCategory",result.getString("CM_SOURCE_2_ID"));
                // SCHEDULER_TASK_B_1312071002
                info.set(FieldNames.FIRST_NAME,result.getString("CONTACT_FIRST_NAME"));
                info.set(FieldNames.LAST_NAME,result.getString("CONTACT_LAST_NAME"));

                info.set("NAME",PortalUtils.getUserNamesTo(assignTo));
            }
        }catch(Exception e){
            logger.error("Exception in getContactInfo Called from TaskManipulator: "+e);
        }finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return info;
    }

    public static boolean getJobsCheck() {
        return "Y".equalsIgnoreCase(MultiTenancyUtil.getTenantConstants().JOBS_CONFIGURATION)?true:false;
    }

    public static String getFranchiseeNoByTransactionId(String contactid) {
        return SQLUtil.getColumnValue("CM_CONTACT_DETAILS", "FRANCHISEE_NO", "CONTACT_ID", contactid);
    }



    public static SequenceMap getEstimateDetails( String contactID, String estimateNumber,
                                                  String lastName, String challanNo, String companyName, String status,
                                                  String challanDateTo,String challanDateFrom,String invoiceAmountFrom, String invoiceAmountTo,
                                                  String sortOrder, String sortKey, String pageId, String pageSize, String franchisee_no,
                                                  String userLevel,String areaId,String userNo,String reportUserNo,String sourceId,String reportId,String jobID){//P_ENH_ANALYTIC_NEW_REPORTS
        //SC_ENH_CT_Van_Report
        return getEstimateDetails(  contactID,  estimateNumber,
                lastName,  challanNo,  companyName,  status,
                challanDateTo, challanDateFrom, invoiceAmountFrom,  invoiceAmountTo,
                sortOrder,  sortKey,  pageId,  pageSize,  franchisee_no,
                userLevel, areaId, userNo,reportUserNo,sourceId,reportId,jobID,null);
    }

    public static SequenceMap getEstimateDetails( String contactID, String estimateNumber,
                                                  String lastName, String challanNo, String companyName, String status,
                                                  String challanDateTo,String challanDateFrom,String invoiceAmountFrom, String invoiceAmountTo,
                                                  String sortOrder, String sortKey, String pageId, String pageSize, String franchisee_no,
                                                  String userLevel,String areaId,String userNo,String reportUserNo,String sourceId,String reportId,String jobID,String vanId){

        return getEstimateDetails(  contactID,  estimateNumber,
                lastName,  challanNo,  companyName,  status,
                challanDateTo, challanDateFrom, invoiceAmountFrom,  invoiceAmountTo,
                sortOrder,  sortKey,  pageId,  pageSize,  franchisee_no,
                userLevel, areaId, userNo,reportUserNo,sourceId,reportId,jobID,vanId,null,null);

    }


    public static SequenceMap getEstimateDetails( String contactID, String estimateNumber,
                                                  String lastName, String challanNo, String companyName, String status,
                                                  String challanDateTo,String challanDateFrom,String invoiceAmountFrom, String invoiceAmountTo,
                                                  String sortOrder, String sortKey, String pageId, String pageSize, String franchisee_no,
                                                  String userLevel,String areaId,String userNo,String reportUserNo,String sourceId,String reportId,String jobID,String vanId,String source2Id,String source3Id){
        return getEstimateDetails(  contactID,  estimateNumber,
                lastName,  challanNo,  companyName,  status,
                challanDateTo, challanDateFrom, invoiceAmountFrom,  invoiceAmountTo,
                sortOrder,  sortKey,  pageId,  pageSize,  franchisee_no,
                userLevel, areaId, userNo,reportUserNo,sourceId,reportId,jobID,vanId,source2Id,source3Id,null);
    }//P_OPT_REPORTS STARTS
    public static SequenceMap getEstimateDetails( String contactID, String estimateNumber,
                                                  String lastName, String challanNo, String companyName, String status,
                                                  String challanDateTo,String challanDateFrom,String invoiceAmountFrom, String invoiceAmountTo,
                                                  String sortOrder, String sortKey, String pageId, String pageSize, String franchisee_no,
                                                  String userLevel,String areaId,String userNo,String reportUserNo,String sourceId,String reportId,
                                                  String jobID,String vanId,String source2Id,String source3Id,UserRoleMap userRoleMap)
    {
        return getEstimateDetails(  contactID,  estimateNumber,
                lastName,  challanNo,  companyName,  status,
                challanDateTo, challanDateFrom, invoiceAmountFrom,  invoiceAmountTo,
                sortOrder,  sortKey,  pageId,  pageSize,  franchisee_no,
                userLevel, areaId, userNo,reportUserNo,sourceId,reportId,jobID,vanId,source2Id,source3Id,userRoleMap,null,null,null,null,null,null);

    }
    public static SequenceMap getEstimateDetails( String contactID, String estimateNumber,
                                                  String lastName, String challanNo, String companyName, String status,
                                                  String challanDateTo,String challanDateFrom,String invoiceAmountFrom, String invoiceAmountTo,
                                                  String sortOrder, String sortKey, String pageId, String pageSize, String franchisee_no,
                                                  String userLevel,String areaId,String userNo,String reportUserNo,String sourceId,String reportId,
                                                  String jobID,String vanId,String source2Id,String source3Id,UserRoleMap userRoleMap, String jobStartDate, String jobEndDate,String companySearch,String parentID,String jobCategoryId,String fromReports){//SC_CT_B_16383
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        //P_OPT_REPORTS ENDS
        StringBuffer selectQuery	= new StringBuffer("SELECT F.FRANCHISEE_NO,F.FRANCHISEE_NAME AS FRANCHISEE_NAME, TE.TASK_ID,TE.JOB_ID, TE.ESTIMATE_NUMBER AS ESTIMATE_NUMBER, TE.CONTACT_ID, TE.ESTIMATE_ID, TE.TRANSACTION_ID, TT.TRANSACTION_NUMBER AS TRANSACTION_NUMBER, TT.GEN_SALES, IFNULL(CCD.CONTACT_FIRST_NAME,'') AS CONTACT_FIRST_NAME, IFNULL(CCD.CONTACT_LAST_NAME,'') AS CONTACT_LAST_NAME, CCD.CONTACT_OWNER_ID AS OWNERID, U.USER_LEVEL, CCI.COMPANY_NAME AS COMPANY_NAME, TE.TOTAL_AMOUNT AS TOTAL_AMOUNT, TE.STATUS AS STATUS, TE.ESTIMATE_DATE AS ESTIMATE_DATE, TE.TRANSACTION_SUBMIT_DATE AS TRANSACTION_SUBMIT_DATE, " +     //SC_Start_Job// P_B_CT_8646 modified by Prabhat
                " (SELECT SUM(TD.TOTAL_AMOUNT_PAID) FROM TMS_DEPOSIT TD WHERE TD.AGAINST_ID=TE.ESTIMATE_ID AND TD.AGAINST_TYPE='E') AS TOTAL_DEPOSIT, (SELECT COUNT(TTD.PRODUCT_ID) FROM "+_baseConstants.CM_TMS+"TMS_TRANSACTION_DETAILS TTD WHERE TTD.TRANSACTION_ID=TE.ESTIMATE_ID AND TTD.ET_FLAG='E') AS PRODUCT_COUNT ");
        StringBuffer queryforcount 	= new StringBuffer("SELECT COUNT(*) AS COUNT ");
        StringBuffer fromQuery		= new StringBuffer(" FROM TMS_ESTIMATE TE ");
        if(reportId!=null && ("ANR12".equals(reportId) )){//SC_Ana_B_9097
            fromQuery.append(" JOIN SERVICE314_TASKS ST ON ST.TASK_ID=TE.TASK_ID ");
        }

        if(reportId!=null &&  "ANR22".equals(reportId) ){//SC_Ana_B_9097
            fromQuery.append(" JOIN SERVICE314_TASKS ST ON ST.TASK_ID=TE.TASK_ID AND ST.JOB_ID!=0 ");
            fromQuery.append(" INNER JOIN JOBS JB ON JB.JOB_ID=TE.JOB_ID  ");//P_OPT_REPORTS
        }


        if(reportId!=null && "ANR20".equals(reportId) && StringUtil.isValidNew(vanId)){//SC_ENH_CT_Van_Report
            fromQuery.append(" JOIN SERVICE314_TASKS ST ON ST.TASK_ID=TE.TASK_ID ");
            fromQuery.append(" JOIN THEATERS_ACTIVITY TA ON TA.TASK_ID = ST.TASK_ID ");
        }

        // BUGZILLA_BUG_ID_71994 Start here

        fromQuery.append("LEFT JOIN FRANCHISEE F ON TE.FRANCHISEE_NO=F.FRANCHISEE_NO " +     //BUG_ID_71562
                // BUGZILLA_BUG_ID_71994 Complete here
                "LEFT JOIN "+_baseConstants.CM_TMS+"TMS_TRANSACTION TT ON TE.TRANSACTION_ID=TT.TRANSACTION_ID " +
                "LEFT JOIN CM_CONTACT_DETAILS CCD ON TE.CONTACT_ID=CCD.CONTACT_ID " +

                "LEFT JOIN CM_COMPANY_INFO CCI ON CCD.COMPANY_ID=CCI.COMPANY_ID " +
                //P_CT_B_73104 ends
                "LEFT JOIN USERS U ON CCD.CONTACT_OWNER_ID=U.USER_NO ");
        //P_OPT_REPORTS STARTS
        //For showing correct estimates(estimate of contacts for which Contact Source detail is filled) in Sales by Contact Source report
        if("ANR21".equals(reportId) ){
            fromQuery.append(" JOIN CM_SOURCE_3 CS ON CS.CM_SOURCE_3_ID=CCD.CM_SOURCE_3_ID  ") ;
        }
        //P_OPT_REPORTS ENDS
        fromQuery.append(" WHERE 1=1 ");
        if(StringUtil.isValid(jobID))
        {
            fromQuery.append(" AND TE.JOB_ID='"+jobID+"'" );
        }
        selectQuery.append(fromQuery);
        queryforcount.append(fromQuery);

        StringBuffer query			= new StringBuffer(" ");
        //P_OPT_REPORTS STARTS
        if(StringUtil.isValidNew(franchisee_no) && !franchisee_no.equals("1")){
            if( StringUtil.isValidNew(reportId) && "ANR22".equals(reportId) ){
                query.append(" AND JB.FRANCHISEE_NO IN(").append(franchisee_no).append(")");
            }
            else{
                query.append(" AND F.FRANCHISEE_NO IN(").append(franchisee_no).append(") ");
            }
        }
        //P_OPT_REPORTS ENDS
        //P_ENH_ANALYTIC_NEW_REPORTS:start
        //if(reportUserNo!=null && !"".equals(reportUserNo)){
        if(StringUtil.isValidNew(reportUserNo)){

            //SC_Ana_B_9097 :starts//P_OPT_REPORTS STARTS
			/*if(reportId!=null && ("ANR12".equals(reportId) )){
				query.append(" AND ST.TASK_TYPE=1");
			}*///P_OPT_REPORTS ENDS
            if(reportId!=null && ( "ANR6".equals(reportId))){
                query.append(" AND U.USER_NO IN(").append(reportUserNo).append(") ");
            }
            else if(reportId!=null && ("ANR12".equals(reportId))){ //P_CT_ENH_REPORTS - added by Prakriti for reports issue.
                query.append(" AND ST.ASSIGN_TO IN(").append(reportUserNo).append(")");
            }
            else{
                query.append(" AND CCD.CONTACT_OWNER_ID IN(").append(reportUserNo).append(")");
            }
            //SC_Ana_B_9097 :ends


        }
        if(reportId!=null && "ANR13".equals(reportId)){
            query.append(" AND U.USER_LEVEL NOT IN(0,2) AND U.STATUS=1 AND U.IS_DELETED='N' AND TE.TASK_ID=0");
        }
        if(reportId!=null && "ANR20".equals(reportId) && StringUtil.isValidNew(vanId)){//SC_ENH_CT_Van_Report
            query.append(" AND  TA.THEATER_ID IN("+vanId+") ");
        }

        if(StringUtil.isValidNew(userLevel) && userLevel.equals("2") && StringUtil.isValidNew(areaId)){
            query.append(" AND CCD.AREA_ID = '").append(areaId).append("' ");
        }

        if(StringUtil.isValidNew(estimateNumber)){
            query.append(" AND CONCAT('"+_baseConstants.ESTIMATE_PREFIX.toUpperCase(Locale.ENGLISH)+"',"+_baseConstants.ESTIMATE_START_NO+"+TE.ESTIMATE_NUMBER) LIKE '%");
            query.append(estimateNumber.toUpperCase(Locale.ENGLISH));
            query.append("%' ");
        }
        if(StringUtil.isValidNew(contactID)){
            if("CTD1".equals(reportId)){
                //added for P_B_CT_26266 starts
                if(StringUtil.isValid(contactID))
                    query.append(" AND CONCAT(CCD.CONTACT_FIRST_NAME,' ',CCD.CONTACT_LAST_NAME) = '"+StringUtil.removeAppostrophi(contactID)+"'");
                //ends here
            }
			/*if("CTD1".equals(reportId)){
				String [] contactName = StringUtil.convertToArray(contactID," ");
				if(contactName.length>0)
				{
					query.append(" AND CCD.CONTACT_FIRST_NAME = '"+contactName[0]+"'");
					if(contactName.length>1)
					{
						query.append(" AND CCD.CONTACT_LAST_NAME = '"+contactName[1]+"'");
					}
				}
			}*/else{
                query.append(" AND CCD.CONTACT_ID IN (").append(contactID).append(")");
            }
        }

        if(StringUtil.isValidNew(lastName)){
            query.append(" AND CCD.CONTACT_LAST_NAME like '%").append(lastName).append("%'");
        }
        if(StringUtil.isValidNew(invoiceAmountFrom)){
            query.append(" AND TE.TOTAL_AMOUNT >=").append(invoiceAmountFrom);
        }
        if(StringUtil.isValidNew(invoiceAmountTo)){
            query.append(" AND TE.TOTAL_AMOUNT <=").append(invoiceAmountTo);
        }
        if(StringUtil.isValidNew(companyName)){
            query.append(" AND CCI.COMPANY_NAME like '%").append(companyName).append("%'");
        }
        if(StringUtil.isValidNew(challanNo)){
            query.append(" AND TE.ESTIMATE_NUMBER='").append(challanNo).append("'");
        }

        if(StringUtil.isValidNew(status)){
            if(status.equals("N")){
                query.append(" AND (TE.STATUS='").append("N").append("' OR TE.STATUS='New' )");
            }else if(status!=null && status.trim().equalsIgnoreCase("NI")){
                query.append(" AND (TE.STATUS='").append("N");
                query.append("' OR TE.STATUS='New' OR TE.STATUS='A' OR TE.STATUS='P' OR TE.STATUS='C')");
            }else{
                query.append(" AND TE.STATUS='").append(status).append("'");
            }
        }
        //P_OPT_REPORTS STARTS
        if((StringUtil.isValidNew(reportId) && reportId.contains("ANR")) || (StringUtil.isValidNew(fromReports))){
            query.append(" AND TE.STATUS <> 'R' ");
        }
        //P_OPT_REPORTS ENDS
        if(StringUtil.isValidNew(challanDateFrom) && StringUtil.isValidNew(challanDateTo)){
            query.append(" AND TE.ESTIMATE_DATE BETWEEN '")
                    .append(com.home.builderforms.DateUtil.getDbDate(challanDateFrom)+" 00:00:00")
                    .append("' AND '")
                    .append(com.home.builderforms.DateUtil.getDbDate(challanDateTo)).append(" 23:59:59' ");
        }else if(StringUtil.isValidNew(challanDateFrom)){
            query.append(" AND TE.ESTIMATE_DATE >= '")
                    .append(com.home.builderforms.DateUtil.getDbDate(challanDateFrom)).append(" 00:00:00'");
        }else if(StringUtil.isValidNew(challanDateTo)){
            query.append(" AND TE.ESTIMATE_DATE <= '")
                    .append(com.home.builderforms.DateUtil.getDbDate(challanDateTo)).append(" 23:59:59'");
        }
        //if(sourceId!=null && !"".equals(sourceId)){
        if(StringUtil.isValidNew(sourceId)){
            query.append(" AND CCD.CM_SOURCE_1_ID IN(").append(sourceId).append(")");
        }
        //steam-20130725-130 :starts//P_OPT_REPORTS STARTS
        if(StringUtil.isValidNew(jobStartDate))
        {
            if("ANR23".equals(reportId)){
                query.append(" AND JB.JOB_START_DATE >= '").append(com.home.builderforms.DateUtil.getDbDate(jobStartDate)+" 00:00:00'");//steam-20130725-130
            }else{
                query.append(" AND JB.JOB_START_DATE >= '").append(jobStartDate+"'");

            }
        }
        if(StringUtil.isValidNew(jobEndDate))
        {
            if("ANR23".equals(reportId)){
                query.append(" AND JB.JOB_END_DATE <= '").append(com.home.builderforms.DateUtil.getDbDate(jobEndDate)).append(" 23:59:59'");//steam-20130725-130
            }else{
                query.append(" AND JB.JOB_END_DATE <= '").append(jobEndDate+"'");
            }
        }
        if("ANR23".equals(reportId) && StringUtil.isValidNew(jobCategoryId))
        {
            query.append(" AND JB.JOB_CATEGORY_ID IN (").append(jobCategoryId).append(") ");
        }
        //steam-20130725-130 :ends//P_OPT_REPORTS ENDS
        if(reportId!=null && "ANR21".equals(reportId)){
            if(StringUtil.isValidNew(source2Id)){
                query.append(" AND CCD.CM_SOURCE_2_ID IN(").append(source2Id).append(")");
                if(StringUtil.isValidNew(source3Id)){
                    query.append(" AND CCD.CM_SOURCE_3_ID IN(").append(source3Id).append(")");
                }else{
                    query.append(" AND CCD.CM_SOURCE_3_ID <> 0");  //P_B_CT_13841 showing only that record for which a sub Contact Source is associated.
                }
            }
        }
        if(!("Y".equalsIgnoreCase(_baseConstants.RATE_CARD_CONFIGURATION)?true:false)){
            query.append(" AND (TE.RATE_CARD_ID IS NULL OR TE.RATE_CARD_ID='-1')");
        }
        if (userRoleMap!=null && ("0".equals(userLevel) && !userRoleMap.isPrivilegeIDInMap("205")) || ("1".equals(userLevel) && !userRoleMap.isPrivilegeIDInMap("206")) || ("2".equals(userLevel) && !userRoleMap.isPrivilegeIDInMap("210"))){ //SC_CT_B_16383
            query.append(" AND CCD.CONTACT_OWNER_ID = '"+userNo+"' ");
        }
        queryforcount.append(query);
        query.append(" GROUP BY ESTIMATE_NUMBER ");

        StringBuffer order = new StringBuffer();
        if(sortKey!=null && sortKey.equals("IA")){
            order.append("TOTAL_AMOUNT "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("COMPANY")){
            order.append("COMPANY_NAME "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("TD")){
            order.append("TOTAL_DEPOSIT "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("ST")){
            order.append("STATUS "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("TN")){
            order.append("ESTIMATE_NUMBER "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("DA")){
            order.append("ESTIMATE_DATE "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("FN")){
            order.append("FRANCHISEE_NAME "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("CN")){
            order.append("CONTACT_FIRST_NAME "+sortOrder+", CONTACT_LAST_NAME "+sortOrder);
        }else if(sortKey!=null && sortKey.equals("PCOUNT")){
            order.append("PRODUCT_COUNT "+sortOrder);
        }else{
            order.append(" TE.ESTIMATE_DATE DESC,TE.ESTIMATE_NUMBER DESC ");
            sortKey += order.toString();
            sortOrder = "";
        }
        if(sortOrder !=null && sortKey !=null){
            query.append(" ORDER BY ").append(order);
        }

        selectQuery.append(query);
        ResultSet rscount = null;
        String totalRecords = "0";
        int limit=0;
        if(StringUtil.isValidNew(pageSize)){
            limit = Integer.parseInt(pageSize);
        }

        try{
            //logger.info("Check@Estimate_summary_queryforcount---->>"+queryforcount);
            rscount = QueryUtil.getResult(queryforcount.toString(), null);
            if(rscount.next()) {
                totalRecords = rscount.getString("COUNT");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        finally
        {
            QueryUtil.releaseResultSet(rscount);
        }

        if(StringUtil.isValidNew(pageId) && !pageId.equals("0")){
            try{
                int page			 = Integer.parseInt(pageId);
                int offset			 = (page-1)*limit;
                selectQuery.append(" LIMIT " );
                selectQuery.append(Integer.toString(offset ));
                selectQuery.append(",");
                selectQuery.append(Integer.toString(limit));
            }catch(Exception e){
                e.printStackTrace();
            }
        }if(pageId == null || pageId.equals("") || pageId.equals("null")){
            selectQuery.append(" LIMIT 0 , " );
            selectQuery.append(Integer.toString(limit));
        }

        SequenceMap map	= new SequenceMap();
        ResultSet result = null;
        Info info;
        try{
            logger.info("Check@Estimate_summary_selectQuery---->>"+selectQuery);
            result	= QueryUtil.getResult(selectQuery.toString(), null);
            int countTotal = 0;
            while(result.next()){
                info = new Info();

                info.set(FieldNames.NAME, StringUtil.formatName(result.getString("CONTACT_FIRST_NAME"),result.getString("CONTACT_LAST_NAME")));
                String franchise="&nbsp;";
                franchise = result.getString("FRANCHISEE_NAME");
                if(franchise==null || franchise.equalsIgnoreCase("")){
                    info.set(FieldNames.FRANCHISEE_NAME,"&nbsp;");
                }else{
                    info.set(FieldNames.FRANCHISEE_NAME,franchise);
                }
                info.set(FieldNames.ESTIMATE_NUMBER,result.getString("ESTIMATE_NUMBER"));
                info.set(FieldNames.TRANSACTION_NUMBER,result.getString("TRANSACTION_NUMBER"));
                info.set(FieldNames.ESTIMATE_ID,result.getString("ESTIMATE_ID"));
                info.set(FieldNames.TRANSACTION_ID,result.getString("TRANSACTION_ID"));
                String company="&nbsp;";
                company = result.getString("COMPANY_NAME");if(company==null || company.equalsIgnoreCase("")){company="&nbsp;";}
                info.set(FieldNames.COMPANY_NAME,company);
                info.set(FieldNames.CONTACT_ID, result.getString("CONTACT_ID"));
                info.set(FieldNames.TASK_ID, result.getString("TASK_ID"));
                info.set(FieldNames.STATUS,result.getString("STATUS"));
                info.set(FieldNames.CONTACT_OWNER_ID,result.getString("OWNERID"));
                info.set(FieldNames.JOB_ID,result.getString("JOB_ID"));
                //SC_Start_Job :starts

                if((CommonUtil.getJobsCheck()) && !"R".equals(result.getString("STATUS"))){
                    String taskTypeId="";
                    String taskId=result.getString("TASK_ID");
                    String taskStatus="";
                    if(StringUtil.isValidWithZero(taskId)){
                        taskTypeId=SQLUtil.getColumnValue("SERVICE314_TASKS", "TASK_TYPE", "TASK_ID", taskId);
                        taskStatus=TaskDAO.getTaskStatusString(taskId);
                    }

                    if(StringUtil.isValidWithZero(result.getString("JOB_ID")) && !"7777".equals(result.getString("JOB_ID"))){
                        info.set(FieldNames.JOB_TITLE,"<a href='viewJobDetail?menuName=scheduler&subMenuName=jobs&subMenuURL=viewJobDetail&jobID="+result.getString("JOB_ID")+"'>"+_baseConstants.JOB_PREFIX+(_baseConstants.JOB_START_NO+Integer.parseInt(result.getString("JOB_ID")))+"</a>");
                        info.set("jobTitlePrint",_baseConstants.JOB_PREFIX+(_baseConstants.JOB_START_NO+Integer.parseInt(result.getString("JOB_ID"))) ); // P_B_SCH_15163
                    }else if(!"1".equals(taskTypeId) && !"632".equals(taskStatus)){
                        info.set(FieldNames.JOB_TITLE,"<a href='javascript:void(0);' onclick='javascript:startJob("+taskId+","+result.getString("CONTACT_ID")+","+result.getString("FRANCHISEE_NO")+","+result.getString("ESTIMATE_ID")+");' >Start Job</a>");
                        info.set("jobTitlePrint","Start Job");  // P_B_SCH_15163
                    }else{
                        info.set(FieldNames.JOB_TITLE,"");
                        info.set("jobTitlePrint","");  // P_B_SCH_15163
                    }
                }
                //SC_Start_Job :ends
                info.set("USER_LEVEL",result.getString("USER_LEVEL"));
                info.set(FieldNames.GEN_SALES, result.getString("GEN_SALES"));   // P_B_CT_8646 modified by Prabhat
                //------------
                String statusPrintF="";
                statusPrintF=result.getString("STATUS");
                if(statusPrintF.equalsIgnoreCase("I")){statusPrintF="Invoiced";}
                if(statusPrintF.equalsIgnoreCase("R")){statusPrintF="Rejected";}
                if(statusPrintF.equalsIgnoreCase("P")){statusPrintF="Pending";}
                if(statusPrintF.equalsIgnoreCase("A")){statusPrintF="Accepted";}
                if(statusPrintF.equalsIgnoreCase("C")){statusPrintF="Closed";}
                if(statusPrintF.equalsIgnoreCase("N") || statusPrintF.equalsIgnoreCase("New")){statusPrintF="New";}
                info.set("statusPrintF",statusPrintF);
                //-----------
                String totalDeposit=result.getString("TOTAL_DEPOSIT");
                if(totalDeposit==null || totalDeposit.equals("null") || totalDeposit.trim().equals(""))
                {
                    totalDeposit=Float.parseFloat("0")+"";
                }
                info.set("TOTAL_DEPOSIT",totalDeposit);
                //if(result.getString("STATUS").equals("E")){
                //SE_CURRENCY_LABEL starts
                info.set("Date", result.getString("ESTIMATE_DATE"));
                //SE_CURRENCY_LABEL ends

                info.set(FieldNames.TOTAL_AMOUNT ,(NumberFormatUtils.formatCommaNumber(result.getString("TOTAL_AMOUNT"))).replaceAll(",",""));
                info.set("pCount",result.getString("PRODUCT_COUNT"));

                countTotal++;
                map.put(result.getString("ESTIMATE_ID"), info);
            }

            map.put("totalRecords", totalRecords);
        }catch(Exception e){
            logger.info("Exception in getEstimateDetails() :" + e);
            e.printStackTrace();
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return map;

    }

    public static Info getProductDetails(String productId){
        return getProductDetails(productId,null);
    }

    public static Info getProductDetails(String productId,String userLevel){
        return getProductDetails(productId,userLevel,null,null);
    }

    public static Info getProductDetails(String productId,String userLevel,String rateCardIdDefault,String franchiseeNo){
        Info productInfo = new Info();

        StringBuffer query;
        ResultSet result = null;
        query = new StringBuffer("SELECT IFNULL(UPSELL,'0') AS UPSELL,TP.PRODUCT_ID,TP.JOB_CATEGORY_ID,TP.ADDED_BY,TP.INC_ACCNT_ID INC_ACCNT_ID,QIA.INC_ACCNT_VALUE AS INC_ACCNT_VALUE, PRODUCT_NAME,IFNULL(RATE,'0') AS RATE,IFNULL(ACTUAL_PRICE,'0') AS ACTUAL_PRICE,IS_ZERO_PRICE,TP.STATUS,IFNULL(DISCOUNT_PERCENT,'0') AS DISCOUNT_PERCENT,DESCRIPTION, IFNULL(SPECIFICATION_NO, '') AS SPECIFICATION_NO, " +
                "TP.CATEGORY_ID,IFNULL(ONE_LINE_ITEM_DESCRIPTION, '') AS ONE_LINE_ITEM_DESCRIPTION, IFNULL(LAST_MODIFIED, '') AS LAST_MODIFIED,UOM_ID, IFNULL(ITEM_WEIGHT, '') AS ITEM_WEIGHT,F.FRANCHISEE_NO,F.FRANCHISEE_NAME FROM TMS_PRODUCTS TP LEFT JOIN QB_INC_ACCNT QIA ON QIA.INC_ACCNT_ID=TP.INC_ACCNT_ID LEFT JOIN FRANCHISEE F ON TP.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE PRODUCT_ID = '").append(productId).append("' ");//modified by neeti,modified for P_B_CT_21747 by Prakriti

        try{
            result	= QueryUtil.getResult(query.toString(), null);

            if(result.next()){
                productInfo.set(FieldNames.UP_SELL,NumberFormatUtils.formatCommaNumber(result.getString("UPSELL")).replaceAll(",",""));//added by neeti
                productInfo.set(FieldNames.DISCOUNT_PERCENT,NumberFormatUtils.formatCommaNumber(result.getString("DISCOUNT_PERCENT")).replaceAll(",",""));
                productInfo.set(FieldNames.INC_ACCNT_ID,result.getString("INC_ACCNT_ID"));//GlasGu-20110525-051
                productInfo.set(FieldNames.INC_ACCNT_VALUE,result.getString("INC_ACCNT_VALUE")); // GlasGu-20110525-051
                productInfo.set(FieldNames.PRODUCT_NAME,result.getString("PRODUCT_NAME"));
                productInfo.set(FieldNames.UOM_ID,result.getString("UOM_ID"));
                String user_level=PortalUtils.getUserLevel(result.getString("ADDED_BY"));
                productInfo.set(FieldNames.USER_LEVEL,user_level);

                String rateFranchisee="";
                if(StringUtil.isValid(rateCardIdDefault))
                    rateFranchisee = produtsInProductsFranchisee(result.getString("PRODUCT_ID"),franchiseeNo,rateCardIdDefault);
                else if(StringUtil.isValid(franchiseeNo))
                    rateFranchisee = produtsInProductsFranchisee(result.getString("PRODUCT_ID"),franchiseeNo);
                else
                    rateFranchisee = produtsInProductsFranchisee(result.getString("PRODUCT_ID"));

                if(StringUtil.isValid(userLevel)&&userLevel.equals("1")&&StringUtil.isValid(rateFranchisee))
                {
                    productInfo.set(FieldNames.RATE,NumberFormatUtils.formatCommaNumber(rateFranchisee));
                    if( rateFranchisee.equals(NumberFormatUtils.formatCommaNumber("0")) )  // P_B_15373
                    {
                        productInfo.set(FieldNames.UP_SELL, NumberFormatUtils.formatCommaNumber("0"));
                        productInfo.set(FieldNames.DISCOUNT_PERCENT, NumberFormatUtils.formatCommaNumber("0"));
                    }
                }
                else
                    productInfo.set(FieldNames.RATE,NumberFormatUtils.formatCommaNumber(result.getString("RATE")).replaceAll(",",""));

                productInfo.set(FieldNames.STATUS,result.getString("STATUS"));
                productInfo.set(FieldNames.IS_ZERO_PRICE,result.getString("IS_ZERO_PRICE"));

                productInfo.set(FieldNames.DESCRIPTION,result.getString("DESCRIPTION"));
                productInfo.set(FieldNames.SPECIFICATION_NO,result.getString("SPECIFICATION_NO"));
                productInfo.set(FieldNames.ONE_LINE_ITEM_DESCRIPTION,result.getString("ONE_LINE_ITEM_DESCRIPTION"));
                //			    				productInfo.set(FieldNames.ITEM_CURRENT_PRICE,NumberFormatUtils.formatNumber(result.getString("ITEM_CURRENT_PRICE")));
                productInfo.set(FieldNames.LAST_MODIFIED,result.getInString("LAST_MODIFIED"));
                productInfo.set(FieldNames.ITEM_WEIGHT,result.getString("ITEM_WEIGHT"));
                productInfo.set(FieldNames.ADDED_BY,result.getString("ADDED_BY"));//P_E_MANAGE_ITEMS added by neeti
                productInfo.set(FieldNames.JOB_CATEGORY_ID,result.getString("JOB_CATEGORY_ID"));//P_E_JOB_CATEGORY added by neeti
                productInfo.set(FieldNames.CATEGORY_ID,result.getString("CATEGORY_ID"));
                productInfo.set(FieldNames.ACTUAL_PRICE,NumberFormatUtils.formatCommaNumber(result.getString("ACTUAL_PRICE")).replaceAll(",",""));
                //added for P_B_CT_21747 starts
                productInfo.set(FieldNames.FRANCHISEE_NO,result.getString("FRANCHISEE_NO"));
                productInfo.set(FieldNames.FRANCHISEE_NAME,result.getString("FRANCHISEE_NAME"));
                //ends here
            }
        }
        catch(Exception e){
            logger.info("Exception in getProductDetails function .. "+e);
        } finally
        {
            QueryUtil.releaseResultSet(result);
        }

        return productInfo;

    }
    public static String produtsInProductsFranchisee(String productID)
    {
        return produtsInProductsFranchisee( productID,null);
    }


    public static String produtsInProductsFranchisee(String productID,String franchiseeNo)
    {
        return produtsInProductsFranchisee( productID,franchiseeNo,null);
    }

    public static String produtsInProductsFranchisee(String productID,String franchiseeNo,String defaultRateCardId)
    {
        String rate="";
        ResultSet result = null;
        try{
            String query="SELECT PRODUCT_ID,RATE FROM TMS_PRODUTS_FRANCHISEE WHERE PRODUCT_ID='"+productID+"'";

            if(StringUtil.isValid(franchiseeNo) && !StringUtil.isValid(defaultRateCardId))
                query+=" AND FRANCHISEE_NO='"+franchiseeNo+"' AND (RATE_CARD_ID IS NULL OR RATE_CARD_ID=0)";
            else if(StringUtil.isValid(franchiseeNo) && StringUtil.isValid(defaultRateCardId)){
                query+=" AND FRANCHISEE_NO='"+franchiseeNo+"' AND RATE_CARD_ID ="+defaultRateCardId;
            }
            else if(!StringUtil.isValid(franchiseeNo) && StringUtil.isValid(defaultRateCardId)){
                query+=" AND RATE_CARD_ID ="+defaultRateCardId;
            }

            query+="  ORDER BY DATE DESC";
            logger.info("\n\n>>>>>>>>>>produtsInProductsFranchisee>>>>>>>>>query"+query);
            result	= QueryUtil.getResult(query.toString(), null);
            //  	System.out.println("\nProductDAO.produtsInProductsFranchisee()>>>>>>query>>>>>>>."+query);
            if(result.next()){
                rate=NumberFormatUtils.formatNumberField(result.getString("RATE"));//SC_CT_ADM_13188 BY KARUN
            }
        }
        catch (Exception e) {

        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return rate;
    }
    // End ENH_71BBCME09

    public static String getTermsConditions(String franchiseeNo,String transactionType){
        StringBuffer query=new StringBuffer("");
        if(transactionType.equalsIgnoreCase("I"))
            query=new StringBuffer("SELECT TERMS_CONDITIONS FROM  TMS_TERMS_CONDITIONS WHERE 1=1");
        else
            query=new StringBuffer("SELECT TERMS_CONDITIONS_E AS TERMS_CONDITIONS FROM  TMS_TERMS_CONDITIONS WHERE 1=1");
        StringBuffer newQuery = new StringBuffer("");
        newQuery.append(query.toString()+" AND FRANCHISEE_NO ='1'");
        if(franchiseeNo!=null && !franchiseeNo.equals("")){
            query.append(" AND FRANCHISEE_NO ='");
            query.append(franchiseeNo);
            query.append("'");
        }
        String termsCondition="";
        try{
            ResultSet rs = QueryUtil.getResult(query.toString(), null);
            while (rs.next())
            {
                termsCondition=rs.getString("TERMS_CONDITIONS");

            }
        }catch(Exception e){
            logger.info("Exception in fetching Terms And Conditions "+e);
        }

        if(termsCondition==null || "".equals(termsCondition) || "null".equals(termsCondition)){
            try{
                ResultSet rs = QueryUtil.getResult(newQuery.toString(), new Object[]{});
                while (rs.next())
                {
                    termsCondition=rs.getString("TERMS_CONDITIONS");

                }
            }catch(Exception e){
                logger.info("Exception in fetching Terms And Conditions "+e);
            }
        }
        //			   				System.out.println("termsCondition:::::::::::::::::::::::::::::::::::::::>>>>>>>>>>>>>>>>>>"+termsCondition);
        return termsCondition;
    }
    //End By bhupendra

    public static String getFranchiseeName(String fid) {
        return SQLUtil.getColumnValue("FRANCHISEE", "FRANCHISEE_NAME", "FRANCHISEE_NO", fid);
    }




    public static String getShowEstimateParam(){
        //			           if(estimateTMSMap == null)
        //			               loadEstimatePreferences();
        //
        //			           return (String) estimateTMSMap.get("SHOW_ESTIMATE");

        return MultiTenancyUtil.getTenantConstants().SHOW_ESTIMATE_CHECK;

    }

    /*added by uma jeena
			         Ref No.  71BBCT1
	 * @auther: Uma Jeena

	 */
    public static SequenceMap getTermsCondition(HttpSession session, String fromAction, String userLevel, String user_identity_no, String sortOrder, String sortKey) {


        //String forumUserTypeName = (String) session.getAttribute("forumUserTypeName");
        //   String franchisee_no = (String) session.getAttribute("franchisee_no");

        //String franchiseId = (String) session.getAttribute("franchiseId");
        SequenceMap termsMap = new SequenceMap();
        ResultSet subresult1=null;
        ResultSet subresult2=null;
        StringBuffer query = new StringBuffer("");
        String subquery1 ="";
        String subquery2 ="";
        String franchiseeName="";
        String userName="";
        ResultSet result = null;


        if (fromAction != null && "options".equalsIgnoreCase(fromAction.trim())) {


            query.append("SELECT TERMS,TERM_NO,FRANCHISE_NO,TYPE,NET_DUE,DISCOUNT_PERCENTAGE,DISCOUNT_DAYS,ADDED_ON,ADDED_BY FROM TMS_TERMS  WHERE ADDED_BY IN (-1," + user_identity_no + ")");
        } else {
            query.append("SELECT TERMS,TERM_NO,FRANCHISE_NO,TYPE,NET_DUE,DISCOUNT_PERCENTAGE,DISCOUNT_DAYS,ADDED_ON,ADDED_BY FROM TMS_TERMS");
        }


        if (sortKey != null && sortKey.equals("TM")) {

            query.append(" ORDER BY TERMS ").append(sortOrder);
        }
        if (sortKey != null && sortKey.equals("ADON")) {

            query.append(" ORDER BY ADDED_ON ").append(sortOrder);
        }



        try {
            result = QueryUtil.getResult(query.toString(), null);

            Info info = null;
            while (result.next()) {
                info = new Info();

                info.set(FieldNames.TERM_NO, result.getString("TERM_NO"));
                info.set(FieldNames.TERMS, result.getString("TERMS"));
                //  info.set(FieldNames.FRANCHISE_NO,result.getString("FRANCHISE_NO"));

                info.set(FieldNames.TYPE,("S".equals(result.getString("TYPE"))?"Standard":"Data Driven"));
                //  info.set(FieldNames.FRANCHISE_NO, getFranchiseeName(result.getString("FRANCHISE_NO")));
                info.set(FieldNames.ADDED_ON, result.getString("ADDED_ON"));
                session.setAttribute(FieldNames.ADDED_BY,result.getString("ADDED_BY"));
                if (result.getString("ADDED_BY") != null && result.getString("ADDED_BY").equals("-1")) {
                    info.set(FieldNames.ADDED_BY, "Corporate User");
                } else {

                    try {


                        subquery1="SELECT F.FRANCHISEE_NAME FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE U.USER_IDENTITY_NO="+ result.getString("ADDED_BY");
                        subquery2="SELECT CONCAT(USER_FIRST_NAME,'  ',USER_LAST_NAME) AS USER_NAME FROM USERS WHERE USER_IDENTITY_NO="+ result.getString("ADDED_BY");

                        subresult1 = QueryUtil.getResult(subquery1.toString(), null);
                        subresult2 = QueryUtil.getResult(subquery2.toString(), null);
                        while (subresult2.next()) {

                            userName=subresult2.getString("USER_NAME");

                        }

                        while (subresult1.next()) {

                            franchiseeName=subresult1.getString("FRANCHISEE_NAME");

                            info.set(FieldNames.ADDED_BY,userName+"("+franchiseeName+")");
                        }
                    } catch (Exception e) {
                        logger.info("Exception in Franchisee name:::::::::::: " + e);
                    }
                }

                termsMap.put(result.getString("TERM_NO"), info);
            }

        } catch (Exception e) {
            logger.info("Exception in getTermsCondition:::::::::::: " + e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
            QueryUtil.releaseResultSet(subresult1);
            QueryUtil.releaseResultSet(subresult2);
        }

        return termsMap;
    }
    //For Product_Seperation_BL this method moved to BaseUtils By Amar Singh.
    public static SequenceMap getInvoiceLabels() {
        return BaseUtils.getInvoiceLabels();
		/*StringBuffer selectQuery = new StringBuffer();
		selectQuery
		.append("SELECT LABEL_KEY_FIELD, LABEL_NAME, LABEL_VALUE FROM TMS_INVOICE_LABELS WHERE IS_ENABLED='Y'");
		SequenceMap labelMap = new SequenceMap();
		ResultSet rs = null;
		try {
			
			rs = QueryUtil.getResult(selectQuery.toString(), null);

			Info info = new Info();
			while (rs.next()) {
				info = new Info();
				info.set(FieldNames.INV_LABEL_KEY_FIELD, rs
						.getString("LABEL_KEY_FIELD"));
				info.set(FieldNames.INV_LABEL_NAME, rs.getString("LABEL_NAME"));
				info.set(FieldNames.INV_LABEL_VALUE, rs
						.getString("LABEL_VALUE"));

				labelMap.put(rs.getString("LABEL_KEY_FIELD"), info);
			}
		} catch (Exception e) {
			logger.info("Exception " + e);
		}
		finally
		{
			QueryUtil.releaseResultSet(rs);
		}
		return labelMap;*/
    }

    public static String getCCNumberDisplay(String ccNumber){
        StringBuffer  ccNo = new StringBuffer();
        if(ccNumber != null){
            if(ccNumber.trim().length()==4){
                ccNo.append("XXXX XXXX XXXX "+ccNumber.trim());
            }else{
                ccNo.insert(0,"XXXX ");
                ccNo.insert(5,"XXXX ");
                ccNo.insert(10,"XXXX ");
                ccNo.insert(15, ccNumber.substring(12));
            }
        }
        return ccNo.toString();
    }


    public static String gettaxPercentage(String customerID, String franchiseeNo) {

        StringBuffer query = new StringBuffer("");

        if (!ModuleUtil.cmImplemented()) {
            query.append(
                    // "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM TMS_TAX WHERE  AREA_ID = ( SELECT F.AREA_ID FROM FRANCHISEE F LEFT JOIN AREAS A ON A.AREA_ID =F.AREA_ID LEFT JOIN TMS_CUSTOMERS TC ON F.FRANCHISEE_NO = TC.FRANCHISEE_NO WHERE TC.CONTACT_ID = '")
                    // "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM TMS_TAX TT  LEFT JOIN TMS_CUSTOMERS TC ON TT.FRANCHISEE_NO = TC.FRANCHISEE_NO WHERE TC.CONTACT_ID = '"+customerID+"' AND TT.FRANCHISEE_NO ='"+franchiseeNo+"'");
                    // .append(customerID).append("')");
                    "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM "+MultiTenancyUtil.getTenantConstants().CM_TMS+"TMS_TAX TT  WHERE TT.FRANCHISEE_NO ='"
                            + franchiseeNo + "'");
        } else {
            query.append(
                    // "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM TMS_TAX WHERE  AREA_ID = ( SELECT F.AREA_ID FROM FRANCHISEE F LEFT JOIN AREAS A ON A.AREA_ID =F.AREA_ID LEFT JOIN CM_CONTACT_DETAILS TC ON  F.FRANCHISEE_NO = TC.FRANCHISEE_NO WHERE TC.CONTACT_ID = '")
					/*
					 * "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM TMS_TAX WHERE  FRANCHISEE_NO ='"+
					 * franchiseeNo+
					 * "'  LEFT JOIN TMS_CUSTOMERS TC ON FRANCHISEE_NO = TC.FRANCHISEE_NO WHERE TC.CONTACT_ID = '"
					 * ) .append(customerID).append("')");
					 */
                    // "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM TMS_TAX TT  LEFT JOIN TMS_CUSTOMERS TC ON TT.FRANCHISEE_NO = TC.FRANCHISEE_NO WHERE TC.CONTACT_ID = '"+customerID+"' AND TT.FRANCHISEE_NO ='"+franchiseeNo+"'");
                    "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM "+MultiTenancyUtil.getTenantConstants().CM_TMS+"TMS_TAX TT  WHERE TT.FRANCHISEE_NO ='"
                            + franchiseeNo + "'");
        }
        ResultSet result = null;
        try {
            result = QueryUtil.getResult(query.toString(),
                    new Object[] {});
            if (result.next()) {
                String taxval = result.getString("TAX");
                String flag = result.getString("FLAG");
                if (flag != null
                        && flag.equals("1")
                        && (Integer.parseInt(taxval) == 0)) {
                    taxval = result.getString("DEFAULT_TAX");
                }

                return NumberFormatUtils.formatCommaNumber(taxval);
            } else {
                result = QueryUtil
                        .getResult(
                                //"SELECT IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM TMS_TAX LIMIT 1",
                                "SELECT IFNULL(TAX, '0') AS TAX, IFNULL(DEFAULT_TAX, '0') AS DEFAULT_TAX, IFNULL(FLAG, '0') AS FLAG FROM "+MultiTenancyUtil.getTenantConstants().CM_TMS+"TMS_TAX WHERE FRANCHISEE_NO = '1'",
                                new Object[] {});
                if (result.next()) {
                    // String flag = result.getString("FLAG");
                    // if (flag != null && flag.equals("1"))
                    String taxval = result.getString("TAX");
                    String flag = result.getString("FLAG");
                    //if (result.getString("DEFAULT_TAX") != null
                    //		&& result.getString("DEFAULT_TAX").equals("0")) {
                    //      return NumberFormatUtils.formatNumber(result
                    //			.getString("DEFAULT_TAX"));
                    if (flag != null
                            && flag.equals("1")
                            && (Integer.parseInt(taxval) == 0)) {
                        taxval = result.getString("DEFAULT_TAX");
                    }
                    return NumberFormatUtils.formatCommaNumber(taxval);
                }else {
                    return NumberFormatUtils.formatCommaNumber("0");
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return "0";
    }



    public static SequenceMap getAllPaymentData(String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize){
        return getAllPaymentData( franchiseID, transactionID,  paymentDateFrom,  paymentDateTo, searchContactID, lName, pageId,  sortKey,  sortOrder,  areaId, pageSize, null,null);
    }
    public static SequenceMap getAllPaymentData(String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize,String paymentNo,String trackingNo) {
        return getAllPaymentData( franchiseID, transactionID,  paymentDateFrom,  paymentDateTo, searchContactID, lName, pageId,  sortKey,  sortOrder,  areaId, pageSize, paymentNo,trackingNo,"-1");
    }
    /**COMMENT: Yogesh T, 11Sep 2007, This method is Overloaded with 1 more String parameter "ownerID" for Bug 26678, regarding privilege of contact view**/

    public static SequenceMap getAllPaymentData(String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize,String paymentNo,String trackingNo, String ownerID) {

        return getAllPaymentData(franchiseID, transactionID,  paymentDateFrom,  paymentDateTo, searchContactID, lName, pageId,  sortKey,  sortOrder,  areaId, pageSize, paymentNo,trackingNo,"-1",null);
    }
    public static SequenceMap getAllPaymentData(String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize,String paymentNo,String trackingNo, String ownerID,String contactId) {

        return getAllPaymentData(null, franchiseID, transactionID,  paymentDateFrom,  paymentDateTo, searchContactID, lName, pageId,  sortKey,  sortOrder,  areaId, pageSize, paymentNo,trackingNo,"-1",contactId,null);
    }

    public static SequenceMap getAllPaymentData(String reportId,String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize,String paymentNo,String trackingNo, String ownerID,String contactId,String salesReportId) {

        return getAllPaymentData(reportId, franchiseID, transactionID,  paymentDateFrom,  paymentDateTo, searchContactID, lName, pageId,  sortKey,  sortOrder,  areaId, pageSize, paymentNo,trackingNo,"-1",contactId,salesReportId,null);
    }

    public static SequenceMap getAllPaymentData(String reportId,String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize,String paymentNo,String trackingNo, String ownerID,String contactId,String salesReportId,String jobID) {

        return  getAllPaymentData( reportId, franchiseID, transactionID,  paymentDateFrom,  paymentDateTo, searchContactID, lName, pageId,  sortKey,  sortOrder,  areaId, pageSize, paymentNo, trackingNo,  ownerID, contactId, salesReportId, jobID, null) ;
    }

    public static SequenceMap getAllPaymentData(String reportId,String franchiseID,String transactionID, String paymentDateFrom, String paymentDateTo,String searchContactID,String lName,String pageId, String sortKey, String sortOrder, String areaId,String pageSize,String paymentNo,String trackingNo, String ownerID,String contactId,String salesReportId,String jobID, String customerType) {
        //Added by Vishal Lodha End here 
        SequenceMap sMap = new SequenceMap();
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        String totalRecs = "0";
        StringBuffer selectQuery = null;
        if(StringUtil.isValidNew(contactId)){
            selectQuery = new StringBuffer("SELECT TT.CONTACT_ID, TT.TRANSACTION_NUMBER , TT.PAYMENT_STATUS,TT.GEN_SALES, TE.ESTIMATE_NUMBER AS ESTIMATE_NUMBER, TE.ESTIMATE_ID AS ESTIMATE_ID, IFNULL(CCD.CONTACT_FIRST_NAME,'') AS CONTACT_FIRST_NAME, IFNULL(CCD.CONTACT_MIDDLE_NAME,'') AS CONTACT_MIDDLE_NAME, IFNULL(CCD.CONTACT_LAST_NAME,'') AS CONTACT_LAST_NAME,CCD.CONTACT_OWNER_ID AS OWNERID,U.USER_LEVEL, F.FRANCHISEE_NAME, CCI.COMPANY_NAME AS COMPANY_NAME, TP.PAYMENT_ID, TP.PAYMENT_NUMBER, TP.TRANSACTION_ID, TP.PAYMENT_DATE,TP.PAYMENT_RECEIVED_DATE ,TP.CC_SELECT,TP.CHEQUE_SELECT,TP.CASH_SELECT , TT.TOTAL_AMOUNT , TP.TOTAL_AMOUNT_PAID, IFNULL(TP.OID,'')AS OID ");  // P_E_CT_PAYMENT:ADDED PAYMENT_STATUS,GEN_SALES
        }else{
            selectQuery = new StringBuffer("SELECT TT.CONTACT_ID, TT.TRANSACTION_NUMBER , TT.PAYMENT_STATUS,TT.GEN_SALES, TE.ESTIMATE_NUMBER AS ESTIMATE_NUMBER, TE.ESTIMATE_ID AS ESTIMATE_ID, IFNULL(CCD.CONTACT_FIRST_NAME,'') AS CONTACT_FIRST_NAME, IFNULL(CCD.CONTACT_MIDDLE_NAME,'') AS CONTACT_MIDDLE_NAME, IFNULL(CCD.CONTACT_LAST_NAME,'') AS CONTACT_LAST_NAME,CCD.CONTACT_OWNER_ID AS OWNERID,U.USER_LEVEL, F.FRANCHISEE_NAME, CCI.COMPANY_NAME AS COMPANY_NAME, TP.PAYMENT_ID, TP.PAYMENT_NUMBER, TP.TRANSACTION_ID, TP.PAYMENT_DATE,TP.PAYMENT_RECEIVED_DATE, TP.TOTAL_AMOUNT_PAID, IFNULL(TP.OID,'')AS OID "); // P_E_CT_PAYMENT:ADDED PAYMENT_STATUS,GEN_SALES
        }
        StringBuffer fromQuery = new StringBuffer(" FROM TMS_PAYMENTS TP INNER JOIN "+_baseConstants.CM_TMS+"TMS_TRANSACTION TT ON TP.TRANSACTION_ID = TT.TRANSACTION_ID  ");

        if(StringUtil.isValid(jobID))
        {
            fromQuery.append(" INNER JOIN  SERVICE314_TASKS ST ON ST.TASK_ID = TT.TASK_ID AND ST.JOB_ID = '"+jobID+"'");
        }
        fromQuery.append(" LEFT JOIN TMS_ESTIMATE TE  ON TE.ESTIMATE_ID=TT.ESTIMATE_ID LEFT JOIN CM_CONTACT_DETAILS CCD ON TP.CONTACT_ID = CCD.CONTACT_ID LEFT JOIN CM_COMPANY_INFO CCI ON CCD.COMPANY_ID=CCI.COMPANY_ID LEFT JOIN USERS U ON CCD.CONTACT_OWNER_ID=U.USER_NO LEFT JOIN FRANCHISEE F ON TP.FRANCHISEE_NO = F.FRANCHISEE_NO WHERE 1 = 1 ");


        StringBuffer whereClauseQuery = new StringBuffer("");

		/*START:following if conditions added by Yogesh T, for Bug Id 26678, Date 10Sep 2007 */
		/*Later Modified by Kapil Tyagi on 29 Nov 2007 */
        if(StringUtil.isValidNew(franchiseID) && !franchiseID.equals("1")){
            if(StringUtil.isValidNew(reportId) && ("ANR8".equals(reportId) || "4".equals(reportId)))
                whereClauseQuery.append(" AND TP.FRANCHISEE_NO IN (").append(franchiseID).append(") ");
            else
                whereClauseQuery.append(" AND TT.FRANCHISEE_NO  IN (").append(franchiseID).append(") ");
        }
        if(StringUtil.isValidNew(ownerID)){
            whereClauseQuery.append(" AND CCD.CONTACT_OWNER_ID IN ( ").append(ownerID).append(" ) ");
        }
		/*END: Yogesh T*/

        if(StringUtil.isValidNew(searchContactID)){
            whereClauseQuery.append(" AND TT.CONTACT_ID=");
            whereClauseQuery.append(searchContactID);
        }

        if(StringUtil.isValidNew(lName)){
            whereClauseQuery.append(" AND CCD.CONTACT_LAST_NAME like '");
            whereClauseQuery.append(lName);
            whereClauseQuery.append("%'");
        }

        if(StringUtil.isValidNew(areaId))		{
            whereClauseQuery.append(" AND CCD.AREA_ID ='").append(areaId).append("'");//P_B_CT_15685
        }

        if (StringUtil.isValidNew(transactionID)) {
            whereClauseQuery.append(" AND CONCAT('" + _baseConstants.INVOICE_PREFIX.toUpperCase() + "',"
                    + _baseConstants.INVOICE_START_NO
                    + "+TT.TRANSACTION_NUMBER) LIKE '%");
            whereClauseQuery.append(transactionID.toUpperCase());
            whereClauseQuery.append("%' ");
        }
        //Added by Vishal Lodha End here 
        if (StringUtil.isValidNew(trackingNo)) {
            whereClauseQuery.append(" AND TP.OID  LIKE '%");
            whereClauseQuery.append(trackingNo);
            whereClauseQuery.append("%' ");
        }
        if (StringUtil.isValidNew(paymentNo)) {
            whereClauseQuery.append(" AND CONCAT('" + _baseConstants.PAYMENT_PREFIX.toUpperCase() + "',"
                    + _baseConstants.PAYMENT_START_NO
                    + "+TP.PAYMENT_NUMBER) LIKE '%");
            whereClauseQuery.append(paymentNo.toUpperCase());
            whereClauseQuery.append("%' ");
        }
        //Added by Vishal Lodha End here 

        if(StringUtil.isValidNew(contactId))		{
            whereClauseQuery.append(" AND TP.CONTACT_ID ='").append(contactId).append("'");
        }

        if(StringUtil.isValidNew(paymentDateFrom) && !(StringUtil.isValidNew(reportId))){
            whereClauseQuery.append(" AND PAYMENT_RECEIVED_DATE >= '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateFrom)).append(" 00:00:00'");
        }else if(StringUtil.isValidNew(reportId) && ( "4".equals(reportId) || "ANR8".equals(reportId) ) ){
            whereClauseQuery.append(" AND TP.PAYMENT_RECEIVED_DATE >= '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateFrom)).append(" 00:00:00'");
        }else if(StringUtil.isValidNew(reportId)){
            whereClauseQuery.append(" AND TP.PAYMENT_DATE >= '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateFrom)).append(" 00:00:00'");
        }

        if(StringUtil.isValidNew(paymentDateTo) && !(StringUtil.isValidNew(reportId))){
            whereClauseQuery.append(" AND PAYMENT_RECEIVED_DATE <= '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateTo)).append(" 23:59:59'");
        }else if(StringUtil.isValidNew(reportId) && ( "4".equals(reportId) || "ANR8".equals(reportId) ) ){
            whereClauseQuery.append(" AND TP.PAYMENT_RECEIVED_DATE <= '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateTo)).append(" 23:59:59'");
        }else if(StringUtil.isValidNew(reportId)){
            whereClauseQuery.append(" AND TP.PAYMENT_DATE <= '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateTo)).append(" 23:59:59'");
        }
        //added by Uma Jeena BUG NO : 3244
        if (StringUtil.isValidNew(salesReportId)) {
            whereClauseQuery.append(" AND TT.SALES_REPORT_ID=").append(salesReportId);
        }

        if(StringUtil.isValidNew(reportId) && "4".equals(reportId))
        {
            whereClauseQuery.append(" AND CCD.CONTACT_ID ");
            if(StringUtil.isValidNew(customerType) && "new".equals(customerType))
                whereClauseQuery.append(" NOT");
            whereClauseQuery.append(" IN(SELECT CD.CONTACT_ID FROM  CM_CONTACT_DETAILS CD  LEFT JOIN  TMS_PAYMENTS TMSP ON CD.CONTACT_ID=TMSP.CONTACT_ID  WHERE TMSP.PAYMENT_RECEIVED_DATE  < '").append(com.home.builderforms.DateUtil.getDbDate(paymentDateFrom)).append(" 00:00:00' ) ");  // P_B_13815
        }
        if("ANR8".equals(reportId)){
            whereClauseQuery.append(" AND TT.PAYMENT_STATUS <> 'R'  "); //for report issue                           

        }
        StringBuffer countQuery  = new StringBuffer("SELECT COUNT(PAYMENT_ID) AS COUNT ").append(fromQuery).append(whereClauseQuery);

        StringBuffer finalQuery  = new StringBuffer(selectQuery).append(fromQuery).append(whereClauseQuery);

        selectQuery = null;
        fromQuery = null;
        whereClauseQuery = null;
        finalQuery.append("  ORDER BY  ");
        if(sortKey != null && sortKey.equals("PN"))
        {
            finalQuery.append(" PAYMENT_NUMBER ").append(sortOrder);
        }
        else if(sortKey != null && sortKey.equals("PD"))
        {
            finalQuery.append(" PAYMENT_DATE ").append(sortOrder);
        }
        else if(sortKey != null && sortKey.equals("PRD"))
        {
            finalQuery.append(" PAYMENT_RECEIVED_DATE ").append(sortOrder);
        }
        else if(sortKey != null && sortKey.equals("FN"))
        {
            finalQuery.append(" FRANCHISEE_NAME ").append(sortOrder);
        }
        else if(sortKey != null && sortKey.equals("TN"))
        {
            finalQuery.append(" TRANSACTION_NUMBER ").append(sortOrder);
        }
        else if(sortKey != null && sortKey.equals("TAP"))
        {
            finalQuery.append(" TOTAL_AMOUNT_PAID ").append(sortOrder);
        }
        else if(sortKey != null && sortKey.equals("CN"))
        {
            finalQuery.append(" CONTACT_FIRST_NAME ").append(sortOrder);//added by shubham for BUG 14823
        }
        else if(sortKey != null && sortKey.equals("COMPANY"))
        {
            finalQuery.append(" COMPANY_NAME ").append(sortOrder);
        }
        else
        {
            finalQuery.append(" PAYMENT_DATE DESC,PAYMENT_NUMBER DESC ");
        }

        int limitPerPage = 0;
        if(pageSize != null && !pageSize.equals("") && !pageSize.equals("null"))
        {
            limitPerPage = Integer.parseInt(pageSize);
        }

        if(!StringUtil.isValidNew(contactId)){
            if(pageId != null && !pageId.equals("") && !pageId.equals("null") && !pageId.equals("0")){
                try{
                    int page			 = Integer.parseInt(pageId);
                    int offset			 = (page-1)*limitPerPage;
                    finalQuery.append(" LIMIT "+offset+" , "+limitPerPage);

                }catch(Exception e){
                    logger.info("Exception while putting limit:" , e);
                }
            }else if(pageId != null && pageId.equals("0")){
            }else{
                finalQuery.append(" LIMIT 0 , "+limitPerPage);
            }
        }
        ResultSet result = null;
        try{
            int pmtNo=0;
            logger.info("check@countQuery:"+countQuery+" :");
            result = QueryUtil.getResult(countQuery.toString(),  null);

            while(result.next()){
                totalRecs = result.getString("COUNT");
            }
            pmtNo=0;
            logger.info("check@totalRecs:"+totalRecs+" :");
            if (totalRecs!= null && !totalRecs.equals("0")){
                logger.info("check@finalQuery:"+finalQuery+" :");
                ResultSet rs = QueryUtil.getResult(finalQuery.toString(),  null);

                Info info = null;
                String ccSelected = "";
                String chequeSelected = "";
                String cashSelected = "";

                while(rs.next()){

                    info = new Info();
                    info.set(FieldNames.PAYMENT_ID,rs.getString("PAYMENT_ID"));
                    info.set(FieldNames.NAME, StringUtil.formatNameForSch(rs.getString("CONTACT_FIRST_NAME"), null, rs.getString("CONTACT_LAST_NAME")));
                    String franchise="&nbsp;";
                    franchise=rs.getString("FRANCHISEE_NAME");if(franchise==null || franchise.equalsIgnoreCase("")){franchise="&nbsp;";}
                    info.set(FieldNames.FRANCHISEE_NAME,franchise);

                    pmtNo=Integer.parseInt(rs.getString("PAYMENT_NUMBER"))+_baseConstants.PAYMENT_START_NO;    /* Added by Kapil Tyagi to disply Payment No with Prefix */
                    info.set(FieldNames.PAYMENT_NUMBER,_baseConstants.PAYMENT_PREFIX+pmtNo);
                    info.set(FieldNames.CONTACT_OWNER_ID,rs.getString("OWNERID"));
                    info.set("USER_LEVEL",rs.getString("USER_LEVEL"));
                    //info.set(FieldNames.PAYMENT_NUMBER,StringUtil.getPaddedString(rs.getString("PAYMENT_NUMBER"),"0",6,true));
                    info.set(FieldNames.PAYMENT_DATE, rs.getString("PAYMENT_DATE"));
                    info.set("paymentReceivedDate", rs.getString("PAYMENT_RECEIVED_DATE"));
                    if(StringUtil.isValidNew(contactId)){
                        ccSelected = rs.getString("CC_SELECT");
                        chequeSelected = rs.getString("CHEQUE_SELECT");
                        cashSelected = rs.getString("CASH_SELECT");
                        if(StringUtil.isValidNew(ccSelected)){
                            info.set(FieldNames.PAYMENT_TYPE, "Cradit Card");
                        }
                        if(StringUtil.isValidNew(chequeSelected)){
                            info.set(FieldNames.PAYMENT_TYPE, "Cheque");
                        }
                        if(StringUtil.isValidNew(cashSelected)){
                            info.set(FieldNames.PAYMENT_TYPE, "Cash");
                        }

                        info.set(FieldNames.INVOICE_AMOUNT,NumberFormatUtils.formatCommaNumber(rs.getString("TOTAL_AMOUNT")));
                    }
                    info.set(FieldNames.TOTAL_AMOUNT_PAID,NumberFormatUtils.formatCommaNumber(rs.getString("TOTAL_AMOUNT_PAID")));
                    info.set(FieldNames.TRANSACTION_NUMBER,StringUtil.getPaddedString(rs.getString("TRANSACTION_NUMBER"),"0",6,true));
                    info.set(FieldNames.TRANSACTION_ID,rs.getString("TRANSACTION_ID"));
                    // P_E_CT_PAYMENT :STARTS
                    info.set(FieldNames.PAYMENT_STATUS,rs.getString("PAYMENT_STATUS"));
                    info.set(FieldNames.GEN_SALES,rs.getString("GEN_SALES"));
                    // P_E_CT_PAYMENT :ENDS
                    String company="&nbsp;";
                    company=rs.getString("COMPANY_NAME");if(company==null || company.equalsIgnoreCase("")){company="&nbsp;";}
                    info.set(FieldNames.COMPANY_NAME,company);
                    logger.info("estimate no>>>>"+rs.getString("ESTIMATE_NUMBER")+"INVOICE NO>>>"+rs.getString("TRANSACTION_NUMBER"));
                    info.set(FieldNames.CONTACT_ID,rs.getString("CONTACT_ID"));
                    info.set(FieldNames.ESTIMATE_NUMBER,rs.getString("ESTIMATE_NUMBER"));
                    info.set(FieldNames.ESTIMATE_ID,rs.getString("ESTIMATE_ID"));
                    info.set("OID",rs.getString("OID"));

                    sMap.put(rs.getString("PAYMENT_ID"),info);

                }

            }
        }catch(Exception e1){e1.printStackTrace();}
        finally {
            QueryUtil.releaseResultSet(result);
            finalQuery = countQuery = null;
        }

        sMap.put("totalRecords",totalRecs);
        return sMap;

    }

    // Ref:71BBFCNE01_COLORCODE MODIFIED   
    //P_E_CT_GUI
    public static Info getRowClassForDisplayColorCode(){
        return getRowClassForDisplayColorCode(true);
    }

    public static Info getRowClassForDisplayColorCode(boolean isReplaceHash){
        Info colorInfo=new Info();
        ResultSet rs = null;
        String query= "SELECT COLOR_CODE_ID,CONCAT(STATUS_ID,ET_FLAG) AS COLOR_KEY  FROM TMS_STATUS_COLOR_CODE_MAPPING";
        try{
            rs = QueryUtil.getResult(query,null);
            if(rs!=null) {
                while (rs.next())
                {
                    String replaceHash=rs.getString("COLOR_CODE_ID");
                    if(isReplaceHash) {
                        replaceHash=replaceHash.substring(1);
                        colorInfo.set(rs.getString("COLOR_KEY")+"","z"+replaceHash.trim());
                    }
                    else{
                        colorInfo.set(rs.getString("COLOR_KEY"),"#"+replaceHash.trim());
                    }
                }
            }
        }catch(Exception e){
            logger.info("Exception in fetching colors getRowClassForDisplayColorCode(  CommonUtil.java) "+e);
        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }
        return colorInfo;
    }

    //P_E_CT_GUI

    public static boolean isReceiveLinkDisplay(String transactionID){
        boolean isReceiveLinkDisplay = true;

        String query_tmsTransaction = "SELECT TT.TRANSACTION_ID,TT.CONTACT_ID,PAYMENT_STATUS,ESTIMATE_ID,TASK_ID,TOTAL_AMOUNT ,SUM(TOTAL_AMOUNT_PAID) AS TOTAL_PAID_AMOUNT FROM "+MultiTenancyUtil.getTenantConstants().CM_TMS+"TMS_TRANSACTION TT LEFT JOIN TMS_PAYMENTS TP ON TT.TRANSACTION_ID = TP.TRANSACTION_ID WHERE TT.TRANSACTION_ID = "+transactionID+" GROUP BY TP.TRANSACTION_ID ";


        String contactID = null;
        String estimateID = null;
        String taskID = null;


        String totalInvoiceAmount = null;
        String totalAmountPaid = null;

        String totalUnsettledDepositedAmtForContact = "0.00";
        String totalUnsettledDepositedAmtForTask = "0.00";
        String totalUnsettledDepositedAmtForEstimate = "0.00";


        ResultSet rs = null;
        rs = QueryUtil.getResult(query_tmsTransaction, new Object[]{});

        while(rs.next()){
            contactID = rs.getString("CONTACT_ID");
            estimateID = rs.getString("ESTIMATE_ID");
            taskID = rs.getString("TASK_ID");
            totalInvoiceAmount = rs.getString("TOTAL_AMOUNT");
            totalAmountPaid = rs.getString("TOTAL_PAID_AMOUNT");


        }

        if(contactID!=null && !"".equals(contactID) && !"null".equals(contactID)  && !"-1".equals(contactID)  && !"0".equals(contactID)){
            totalUnsettledDepositedAmtForContact  = getTotalUnsettledDepositedAmtForContact(contactID);
        }


        if(estimateID!=null && !"".equals(estimateID) && !"null".equals(estimateID)  && !"-1".equals(estimateID)  && !"0".equals(estimateID)){
            totalUnsettledDepositedAmtForEstimate  = getTotalUnsettledDepositedAmtForEstimate(estimateID);
        }

        if(taskID!=null && !"".equals(taskID) && !"null".equals(taskID)  && !"-1".equals(taskID)  && !"0".equals(taskID)){
            totalUnsettledDepositedAmtForTask  = getTotalUnsettledDepositedAmtForTask(taskID);
        }

        double totalUnSettledDeposit = Double.parseDouble(totalUnsettledDepositedAmtForContact) + Double.parseDouble(totalUnsettledDepositedAmtForEstimate) + Double.parseDouble(totalUnsettledDepositedAmtForTask);



        if(totalInvoiceAmount==null && "".equals(totalInvoiceAmount) && "null".equals(totalInvoiceAmount) ){
            totalInvoiceAmount = "0.00";
        }

        if(totalAmountPaid==null && "".equals(totalAmountPaid) && "null".equals(totalAmountPaid) ){
            totalAmountPaid = "0.00";
        }

        double finalOpenBalance = Double.parseDouble(totalInvoiceAmount) - Double.parseDouble(totalAmountPaid);

        if((totalUnSettledDeposit-finalOpenBalance) >=0)
            isReceiveLinkDisplay =  false ;
        else
            isReceiveLinkDisplay = true;

        logger.info("link Available =="+isReceiveLinkDisplay);
        QueryUtil.releaseResultSet(rs);
        return isReceiveLinkDisplay;
    }

    public static String getTotalUnsettledDepositedAmtForContact(String contactID){
        return getTotalUnsettledDepositedAmt(contactID, "C");
    }

    public static String getTotalUnsettledDepositedAmtForEstimate(String estimateID){
        return getTotalUnsettledDepositedAmt(estimateID, "E");
    }

    public static String getTotalUnsettledDepositedAmtForTask(String taskID){
        return getTotalUnsettledDepositedAmt(taskID, "T");
    }

    public static String getTotalUnsettledDepositedAmt(String againstID, String againstType){
        String totalUnpaidDepositedAmtForTask = null;
        String query = " SELECT SUM(OPEN_BALANCE) AS UNSETTLED_DEPOSIT FROM TMS_DEPOSIT WHERE AGAINST_ID = '"+againstID+"' AND AGAINST_TYPE = '"+againstType+"' AND STATUS <> 'F' AND STATUS <> 'R' GROUP BY AGAINST_ID";
        ResultSet rs = null;
        try {
            rs = QueryUtil.getResult(query, null);
            if(rs.next()){
                totalUnpaidDepositedAmtForTask = rs.getString("UNSETTLED_DEPOSIT");
            }
            else{
                totalUnpaidDepositedAmtForTask = "0.00";
            }
        } catch(Exception e) {
            logger.error("Exception in getTotalUnsettledDepositedAmt", e);
        } finally {
            if(rs!=null) {
                QueryUtil.releaseResultSet(rs);
            }
        }

        return totalUnpaidDepositedAmtForTask;
    }

    public static StringBuffer getTemplatesCombo(String from, String folderNo, String userNo) {

        Info comboInfo = new Info();
        String javascript = "onChange= \"return submitTemplate()\"";
        if (from != null && !"null".equals(from) && !"".equals(from)) {


            comboInfo = CommonMgr.newInstance().getCommonCmDAO().getmailInfo(true, "mine", null, userNo, null, null, folderNo, null);

            javascript = "onChange= \"return submitTemplate()\"";
        }

        StringBuffer combo = new StringBuffer("<select name=\"mailTemplateID1\" id=\"mailTemplateID\"  " + javascript + " class='dropdown_list'>");
        String key = FieldNames.EMPTY_STRING;
        combo.append("<option value='-1' >" + LanguageUtil.getString("Select") + "</option>");
        Iterator it = comboInfo.getKeySetIterator();
        while (it.hasNext()) {
            key = (String) it.next();
            combo.append("<option value=" + key + " >" + comboInfo.getString(key) + "</option>");
        }
        combo.append("</select>");
        return combo;
    }

    public static String getContactLinkForDispatch(String contactName, String contactID, HttpSession session){
        String html = "";
        ModuleDisplay moduleDisplay = null;
        if(session != null){
            moduleDisplay = ModuleDisplay.getModuleDisplay(session);
        }
        if(moduleDisplay!= null && moduleDisplay.isDisplayContactManager){
            html = "<a href = '#' onclick ='javascript:contactDetail("+contactID+",-1)'>"+contactName+"</a>";
        }else{
            html = "<a href=\"javascript:onClick=offerpop('dispatchViewDetails?contactID="+contactID+"', 600, 300);\">"+contactName+"</a>";
        }

        return html;
    }

    /**
     * P_E_CM_MailSubscription
     * @author Vivek Maurya
     * @date 29Nov2012
     * @param fieldName : name of the hidden field
     * @param value : value of the hidden field
     * @return
     */
    public static String getHiddenField(String fieldName,String value) {
        if(StringUtil.isValid(fieldName)) {
            StringBuilder hiddenField = new StringBuilder("<input type='hidden' name='").append(fieldName).append("' ");
            hiddenField.append("id='").append(fieldName).append("' value='").append(value).append("' />");

            return hiddenField.toString();
        }
        return FieldNames.EMPTY_STRING;
    }

    public static String getContactNames(String contactID){

        Info info = CommonMgr.newInstance().getCommonCmDAO().getContactNameInfo(contactID);
        String name = "";
        if(info !=null){
            String fname = info.get(FieldNames.CONTACT_FIRST_NAME);
            //String mname = info.get(FieldNames.CONTACT_MIDDLE_NAME);
            String lname = info.get(FieldNames.CONTACT_LAST_NAME);
            //String title = info.get(FieldNames.TITLE)!=null ? info.get(FieldNames.TITLE) : "";
            name  = StringUtil.formatName(fname,null,lname);
        }
        return name;
    }

    public static String getContactName(String contactID){

        Info info = CommonMgr.newInstance().getCommonCmDAO().getContactNameInfo(contactID);
        String name = "";
        if(info !=null){
            String fname = info.get(FieldNames.CONTACT_FIRST_NAME);
            String mname = info.get(FieldNames.CONTACT_MIDDLE_NAME);
            String lname = info.get(FieldNames.CONTACT_LAST_NAME);
            String title = info.get(FieldNames.TITLE)!=null ? info.get(FieldNames.TITLE) : "";
            name  =  title+" "+StringUtil.formatName(fname,mname,lname);
        }
        return name;
    }

    public static String getLeadName(String leadID){

        Info info = CommonMgr.newInstance().getCommonCmDAO().getLeadNameInfo(leadID);
        String name = "";
        if(info !=null){
            String fname = info.get(FieldNames.CONTACT_FIRST_NAME);
            String mname = info.get(FieldNames.CONTACT_MIDDLE_NAME);
            String lname = info.get(FieldNames.CONTACT_LAST_NAME);
            String title = info.get(FieldNames.TITLE)!=null ? info.get(FieldNames.TITLE) : "";
            name  =  title+" "+StringUtil.formatName(fname,mname,lname);
        }
        return name;
    }
    
    public static String getRegion(String franno) {
        return SQLUtil.getColumnValue("FRANCHISEE", "AREA_ID", "FRANCHISEE_NO", franno);
    }
    
    public static String getRegions(String franNos) {
        
    	String areaIds=FieldNames.EMPTY_STRING;
    	
    	if(StringUtil.isValid(franNos)){
    		StringBuffer sbQuery=new StringBuffer("SELECT GROUP_CONCAT(AREA_ID) AS AREA_ID FROM FRANCHISEE WHERE FRANCHISEE_NO IN(").append(franNos).append(")");
    		ResultSet result = null;
    		try{
    			
    			result = QueryUtil.getResult(sbQuery.toString(), null);
    			if(result.next()){
    				
    				areaIds=result.getString("AREA_ID");
    			}
    		}catch(Exception e){
    			logger.info("Exception while getting data from getRegions:", e);
    		}finally
            {
                QueryUtil.releaseResultSet(result);
            }
    		
    	}
    	return areaIds;
    }

    /**
     *method to get info of users for franchisee
     *
     */
    public static Info getUserForFranchisee(String franchiseeNo , HttpServletRequest request){
        return getUserForFranchisee(franchiseeNo,request,null); //P_CM_BUG_52585
    }
    public static Info getUserForFranchisee(String franchiseeNo , HttpServletRequest request, String fromWhere){ //P_CM_BUG_52585


        Info		info       = new Info();
        HttpSession session         = request.getSession();
        String userLevel            = (String)session.getAttribute("user_level");
        //String regionId         = (String)session.getAttribute("regionId");
        //String userNo         = (String)session.getAttribute("user_no");

        ArrayList franList          = null;
        //ArrayList regnList          = null;
        try{
            if(userLevel != null && userLevel.equals("2")){
            }

            if(userLevel != null && userLevel.equals("0")){


            }
            if(!"1".equals(userLevel)){
//			franList = CacheDataUtil.getMessageUsers("franchisee");
                franList = AdminMgr.newInstance().getUsersDAO().getUsers("1", false);
            }
            //P_CM_B_23006 starts by Prashant Malik
            String key="",value="";
            Info muFranUserInfo=null;
            if(StringUtil.isValidNew(franchiseeNo)){
                muFranUserInfo=AdminMgr.newInstance().getUsersDAO().getUserInfoForMUID(franchiseeNo);
            }

            Iterator it=null;
            //P_CM_B_23006 ends by Prashant Malik
            //P_CM_BUG_52585 starts
            if (StringUtil.isValid(fromWhere) && "changeOwnerPage".equals(fromWhere)) {
                franList=null;
            }
            //P_CM_BUG_52585 ends
            if(franList != null && franList.size() >0){
                int size            = franList.size();

                UserInfo userInfo   = null;
                for(int i = 0 ; i < size; i++){
                    userInfo        = (UserInfo)franList.get(i);
                    //For showing all records in combo by default
                    if(StringUtil.isValidNew(franchiseeNo) && !"1".equals(franchiseeNo) ){
                        if(StringUtil.isValidNew(userInfo.franchiseNo) && userInfo.franchiseNo.equals(franchiseeNo)){
                            info.set(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName  );
                        }
                    }else{
                        info.set(userInfo.userNo , userInfo.firstName +  " " + userInfo.lastName  );

                    }

                }

            }
            //P_CM_B_23006 starts by Prashant Malik
            if(muFranUserInfo!=null && muFranUserInfo.size()>0){
                it = muFranUserInfo.getKeySetIterator();
                while(it.hasNext())
                {
                    key = (String)it.next();
                    value = (String)muFranUserInfo.get(key);
                    info.set(key , value);
                }

            }
            //P_CM_B_23006 ends by Prashant Malik
            logger.info("info============"+info);

        }catch(Exception e){
            logger.info("Exception while getting data from cacheDataUtil:", e);
        }



        return info;
    }

    // for other address combo end

    /**
     * Added by Ravi for bug 23579
     * @param contactIDs
     * @return
     */
    public static SequenceMap quickaddContactDetailsMap(String contactIDs) {

        ResultSet result = null;
        Info info = null;
        //String contactOwnerName = null;
        ResultSet result2 = null;
        SequenceMap map = new SequenceMap();
        StringBuffer query = new StringBuffer();



        try {
            query.append("SELECT CM.CONTACT_ID,CM.CONTACT_TYPE,CM.CM_LEAD_STATUS_ID,CM.CONTACT_FIRST_NAME,CM.COMPANY_ID,CM.CONTACT_LAST_NAME,CM.FRANCHISEE_NO,CM.CM_SOURCE_2_ID,CM.CM_SOURCE_3_ID,CONTACT_OWNER_ID,CCI.COMPANY_NAME,FU.FRANCHISEE_USER_NO,A.ADDRESS_ID,A.ZIPCODE,A.PHONE_NUMBERS,A.EMAIL_IDS,A.ADDRESS,A.STATE,A.COUNTRY,A.CITY,CM.OWNER_TYPE FROM CM_CONTACT_DETAILS CM LEFT JOIN ADDRESS A ON CM.CONTACT_ID=A.FOREIGN_ID LEFT JOIN CM_COMPANY_INFO CCI ON CM.COMPANY_ID=CCI.COMPANY_ID  LEFT JOIN FRANCHISEE_USERS FU ON CM.FRANCHISEE_NO=FU.FRANCHISEE_NO  WHERE CM.CONTACT_ID IN ( " //SC_Start_Job
                    + contactIDs + ") AND A.FOREIGN_TYPE='cmContactDetails' GROUP BY CM.CONTACT_ID");

            logger.info("query================================" + query.toString());
            result2 = QueryUtil.getResult(query.toString(), null);

            while (result2.next()) {
                info = new Info();
                info.set(FieldNames.CONTACT_FIRST_NAME,
                        StringUtil.revertAppostrophi(result2.getString("CONTACT_FIRST_NAME")));//P_B_SCH_10713
                info.set(FieldNames.CONTACT_LAST_NAME,
                        StringUtil.revertAppostrophi(result2.getString("CONTACT_LAST_NAME")));//P_B_SCH_10713
                info.set(FieldNames.EMAIL_IDS,
                        result2.getString("EMAIL_IDS"));
                info.set(FieldNames.COMPANY_NAME,
                        result2.getString("COMPANY_NAME"));
                info.set(FieldNames.CM_SOURCE_2_ID,
                        result2.getString("CM_SOURCE_2_ID"));
                info.set(FieldNames.CM_SOURCE_3_ID,
                        result2.getString("CM_SOURCE_3_ID"));
                info.set(FieldNames.COMPANY_ID,
                        result2.getString("COMPANY_ID"));
                info.set(FieldNames.COMPANY_NAME,
                        result2.getString("COMPANY_NAME"));

                //added by shubham BUG_P_E_5967 Starts
                if (result2.getString("PHONE_NUMBERS").length() == 10)
                {

                    info.set(FieldNames.PHONE_NUMBERS,PortalUtils.formatPhoneNo(result2.getString("PHONE_NUMBERS"),NewPortalUtils.getCountryName(result2.getString("COUNTRY"))));//fixed by shubham bug 5967

                }

                else
                {
                    info.set(FieldNames.PHONE_NUMBERS,result2.getString("PHONE_NUMBERS"));

                }
                //added by shubham BUG_P_E_5967 Ends

                info.set(FieldNames.CONTACT_OWNER_ID,
                        result2.getString("CONTACT_OWNER_ID"));
                info.set(FieldNames.OWNER_TYPE,
                        result2.getString("OWNER_TYPE"));//SC_Start_Job
                info.set(FieldNames.ZIPCODE,
                        StringUtil.revertAppostrophi(result2.getString("ZIPCODE")));//P_B_SCH_10713
                info.set(FieldNames.ADDRESS,
                        StringUtil.revertAppostrophi(result2.getString("ADDRESS")));//P_B_SCH_10713
                info.set(FieldNames.STATE,
                        result2.getString("STATE"));
                info.set(FieldNames.CITY,
                        StringUtil.revertAppostrophi(result2.getString("CITY")));//P_B_SCH_10713
                info.set(FieldNames.CONTACT_TYPE,
                        result2.getString("CONTACT_TYPE"));
                info.set(FieldNames.CM_LEAD_STATUS_ID,
                        result2.getString("CM_LEAD_STATUS_ID"));
                info.set(FieldNames.COUNTRY,
                        result2.getString("COUNTRY"));
                info.set("FRANCHISEE_NO",
                        result2.getString("FRANCHISEE_NO"));
                info.set("FRANCHISEE_USER_NO",
                        result2.getString("FRANCHISEE_USER_NO"));

                map.put(result2.getString("CONTACT_ID"),info);


            }
        } catch (Exception e) {
            logger.error("ERROR: exception in quickaddContactDetailsMap ::" + e);

        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return map;
    }

    public static boolean getFilteredSessionAttribute(HttpSession session, String paramName, String requiredValue, String trueloggerText, String falseloggerText){
        boolean isPresent = false;
        String paramValue = null;
        if(session.getAttribute(paramName) != null){
            paramValue = (String) session.getAttribute(paramName);
        }
        if(StringUtil.isValidNew(paramValue) && paramValue.trim().equalsIgnoreCase(requiredValue)){
            isPresent = true;
        }
        if(isPresent){
            logger.info(trueloggerText);
        }else{
            logger.info(falseloggerText);
        }
        return isPresent;
    }

    public static boolean isPresent(String str1 ,String str2){

        boolean b = false;
        String[] srt1Arr = str1.split(",");
        for (int i=0;i< srt1Arr.length;i++ ){
            if(srt1Arr[i].trim().equals(str2)){
                b = true;
                break;
            }
        }
        return b;

    }

    /**
     * @author Prashant Malik
     * @return
     */
    
    public static SequenceMap getMarketingCenterFranchisee(String areaID,String userLevel,String defaultMpTemplateId){
    	
    	return getMarketingCenterFranchisee(areaID,userLevel,defaultMpTemplateId,null);
    }
    public static SequenceMap getMarketingCenterFranchisee(String areaID,String userLevel,String defaultMpTemplateId,String divisionIds){//pilotCode

        SequenceMap map = new SequenceMap() ;
        SequenceMap franchiseeMap = new SequenceMap() ;
        String templateId="";


        ////P_SFBLPPILOT_PATCH starts

        //SMC-20140415-462 starts
        //StringBuffer sbQuery = new StringBuffer("SELECT a.FRANCHISEE_NO,a.IS_FRANCHISEE,a.FRANCHISEE_NAME AS FRANCHISEE,b.TEMPLATE_ID FROM (SELECT FRANCHISEE_NO, FRANCHISEE_NAME,IS_FRANCHISEE FROM FRANCHISEE  WHERE STATUS NOT IN (0,4) AND IS_ADMIN='N' AND FIRST_NAME IS NULL  AND IS_FRANCHISEE = 'Y'  ");
        StringBuffer sbQuery = new StringBuffer("SELECT a.FRANCHISEE_NO,a.IS_FRANCHISEE,a.FRANCHISEE_NAME AS FRANCHISEE,CSD.TEMPLATE_ID FROM (SELECT FRANCHISEE_NO, FRANCHISEE_NAME,IS_FRANCHISEE FROM FRANCHISEE  WHERE STATUS NOT IN (0,4) AND IS_ADMIN='N' AND FIRST_NAME IS NULL  AND (IS_FRANCHISEE='Y' OR (IS_STORE='Y'  AND IS_STORE_ARCHIVED='N' ))  ");
        //SMC-20140415-462 ends

        if("2".equals(userLevel)){
            //sbQuery.append(" AND F.AREA_ID = "+areaID+" ");
            sbQuery.append(" AND AREA_ID = "+areaID+" ");
        }
        if(StringUtil.isValidNew(divisionIds) && Constants.USER_LEVEL_DIVISION.equals(userLevel)){
        	String franIds=DivisionUtil.getAllDivisionFranchiseeNos(divisionIds);
        	sbQuery.append(" AND FRANCHISEE_NO IN ("+franIds+") ");
        }
        //sbQuery.append(" ORDER BY FRANCHISEE_NAME");
        sbQuery.append(" OR (FRANCHISEE_NO=1)  ORDER BY FRANCHISEE_NAME");
        //P_SFBLPPILOT_PATCH ends

        sbQuery.append(" LIMIT 0,20000) AS a ");

        //SMC-20140415-462 starts
        //sbQuery.append(" LEFT JOIN (SELECT DISTINCT(TEMPLATE_ID),FRANCHISEE_NO FROM CM_COST_SHEET_DETAILS WHERE FROM_PILOT='Y' GROUP BY FRANCHISEE_NO ) AS b ON a.FRANCHISEE_NO = b.FRANCHISEE_NO ");
        sbQuery.append(" LEFT  JOIN CM_COST_SHEET_DETAILS CSD ON a.FRANCHISEE_NO = CSD.FRANCHISEE_NO  and  FROM_PILOT='Y'  GROUP BY FRANCHISEE_NO  ORDER BY FRANCHISEE"); //P_B_MP_47876 Nishant Added order by
        //SMC-20140415-462 ends

        //Marcos-20130918-319 ENDS

        ResultSet result = QueryUtil.getResult(sbQuery.toString(), new Object[]{});

        while(result.next()){
            if(StringUtil.isValidNew(result.getString("TEMPLATE_ID")) && !"0".equals(result.getString("TEMPLATE_ID"))){
                templateId=result.getString("TEMPLATE_ID");
            }else{
                templateId=defaultMpTemplateId;
            }
            if(!franchiseeMap.containsKey(result.getString("FRANCHISEE_NO"))){
                franchiseeMap.put(result.getString("FRANCHISEE_NO"),result.getString("FRANCHISEE_NO"));
                if("1".equals(result.getString("FRANCHISEE_NO"))){
                    map.put("1"+"_"+templateId,"Corporate");
                }else{
                    map.put("D","------ Franchise Locations ------");
                    map.put(result.getString("FRANCHISEE_NO")+"_"+templateId,result.getString("FRANCHISEE"));
                }
            }
        }
        return map ;
    }

    /**
     * @author manoj
     * @param source2ID source 2 id 
     * @param franchiseeNO in case of franchisee user
     * @return Info
     */
    public static Info getSourceInfoWithFranName(String source2ID,String franchiseeNO,String userLevel){
        return getSourceInfoWithFranName(source2ID,franchiseeNO,userLevel,null);
    }
    /**
     * @author PRABHAT JAIN
     * @param contactFranNo,usrchk
     * @param contactFranNo in case of franchisee RECORD
     * @param usrchk to check existence franchisee record in case of Corporate user login
     * @return Info
     */

	/*	P_CM_ENH_080113	STARTS	*/
    public static Info getSourceInfoWithFranName(String source2ID,String franchiseeNO,String userLevel,String contactFranNo){
        boolean usrchk=false;
		/*	P_CM_ENH_080113	ENDS	*/
        Info combo		=	new Info();
        ResultSet result = null;
        try{
			/*	P_CM_ENH_080113	STARTS	*/
            if(contactFranNo!=null && !"1".equals(contactFranNo) && !"1".equals(userLevel)){	//Corporate User but Franchisee Record check
                usrchk=true;
            }
            if(!"1".equals(userLevel) && !"0".equals(userLevel)){	//Regional User check
                usrchk=false;
            }
			/*	P_CM_ENH_080113	ENDS	*/
            String sortAlpha = "";
            StringBuffer query	= new StringBuffer("SELECT CM_SOURCE_3_ID,CM_SOURCE_3_NAME,C.FRANCHISEE_NO,F.FRANCHISEE_NAME FROM CM_SOURCE_3 C");
            query.append(" LEFT JOIN CM_SUB_CATAGORY_SORT_ID SS  ON C.CM_SOURCE_3_ID = SS.SUB_CATAGORY_ID");
            query.append(" LEFT JOIN FRANCHISEE F ON C.FRANCHISEE_NO=F.FRANCHISEE_NO WHERE 1=1 ");

            query.append(" AND CATAGORY_ID = '").append(source2ID).append("'");

			/*	P_CM_ENH_080113	STARTS	*/
            if(usrchk)	//Corporate User but Franchisee Record
            {
                query.append(" AND SS.USER_NO IN('").append(contactFranNo).append("','1')");
                query.append(" AND C.FRANCHISEE_NO IN('").append(contactFranNo).append("','1')");
            }
            else
            {
                if("1".equals(userLevel)){	//Franchisee User
                    query.append(" AND SS.USER_NO='").append(franchiseeNO).append("'");
                }else { 	//corporate User & Regional User
                    query.append(" AND SS.USER_NO ='1' ");
                    query.append(" AND C.FRANCHISEE_NO='1' ");
                }
            }	
			/*	P_CM_ENH_080113	ENDS	*/


			/* 	P_CM_ENH_080113	STARTS
            		    		    			if("1".equals(userLevel)){
            		    		    				query.append(" AND SS.USER_NO='").append(franchiseeNO).append("'");
            		    		    			}else {
            		    		    				query.append(" AND SS.USER_NO ='1' "); 
            		    		    			}	P_CM_ENH_080113	ENDS*/

            //Deconet-20120917-709 starts
            //query.append(" ORDER BY  CM_SOURCE_3_NAME ");
            sortAlpha = NewPortalUtils.getColumnFromTable("CM_SUB_CATAGORY_SORT_ID", "SORT_ALPHA", "USER_NO", franchiseeNO);
            query.append(" GROUP BY SS.SUB_CATAGORY_ID");
            if("Y".equals(sortAlpha)){
                query.append(" ORDER BY C.CM_SOURCE_3_NAME");
            }else{
                query.append(" ORDER BY ORDER_NO ");
            }
            //Deconet-20120917-709 ends
            result			= QueryUtil.getResult(query.toString(), null);
            while(result.next()){
                //Deconet-20120917-707 Nishant Added check for webrizon
                if(StringUtil.isRequestParamValid(result.getString("FRANCHISEE_NAME")) && !"1".equals(result.getString("FRANCHISEE_NO")))
                    combo.set(result.getString(1),result.getString("CM_SOURCE_3_NAME")+"("+result.getString("FRANCHISEE_NAME")+")");
                else
                    combo.set(result.getString(1),result.getString("CM_SOURCE_3_NAME"));
            }
        }
        catch(Exception e){
            logger.error("Exception at "+e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return combo;
    }

    public static void modifyContactDetailsNew(String firstName, String lastName, String contactEmailID, String contactAddrsee, String contactcity, String stateID, String contactzip, String country, String contactphone, String assignToScheduler, String contactID,String contactCategory,String contactCategoryDetails) {
        modifyContactDetailsNew(firstName, lastName, contactEmailID, contactAddrsee, contactcity, stateID, contactzip, country, contactphone, assignToScheduler, contactID, contactCategory, contactCategoryDetails,"","");
    }

    public static void modifyContactDetailsNew(String firstName, String lastName, String contactEmailID, String contactAddrsee, String contactcity, String stateID, String contactzip, String country, String contactphone, String assignToScheduler, String contactID,String contactCategory,String contactCategoryDetails,String companyId,String newCompany) {
        //String franchiseeNo = NewPortalUtils.getFranchiseeNO(assignToScheduler);
        //P_SCH_SNH_COMPANY starts
        String companyCity = "";
        String companyZip = "";
        String companyAddress = "";
        if(StringUtil.isValid(newCompany)){
            newCompany=StringUtil.formatNameWithSpace(newCompany,null);
            newCompany=StringUtil.replaceAppostrophiWithSlashesForJS(newCompany);
            companyCity = StringUtil.replaceAppostrophiWithSlashesForJS(contactcity);
            companyZip = StringUtil.replaceAppostrophiWithSlashesForJS(contactzip);
            companyAddress = StringUtil.replaceAppostrophiWithSlashesForJS(contactAddrsee);
        }
        //P_SCH_SNH_COMPANY ENDS
        //P_B_SCH_10713 starts
        firstName = StringUtil.removeAppostrophi(firstName);
        lastName = StringUtil.removeAppostrophi(lastName);
        contactcity=StringUtil.removeAppostrophi(contactcity);
        contactAddrsee=StringUtil.removeAppostrophi(contactAddrsee);
        contactzip=StringUtil.removeAppostrophi(contactzip);
        //P_B_SCH_10713 ends
        StringBuffer contactQuery = null;
        StringBuffer addressQuery = null;
        String newcompanyID = "";
        String companyaddressID = "";

        try {
            //P_SCH_SNH_COMPANY starts
            if(StringUtil.isValid(newCompany)){
                IDGenerator idGenerator = new IDGenerator();
                newcompanyID = idGenerator.getNextID();
                companyaddressID = idGenerator.getNextID();
            }//P_SCH_SNH_COMPANY ends

            contactQuery = new StringBuffer();
            contactQuery.append("UPDATE CM_CONTACT_DETAILS SET CONTACT_FIRST_NAME='");
            contactQuery.append(firstName);
            contactQuery.append("' , CONTACT_LAST_NAME ='");
            contactQuery.append(lastName);
            contactQuery.append("' , CM_SOURCE_2_ID ='");
            contactQuery.append(contactCategory);
            contactQuery.append("' , CM_SOURCE_3_ID ='");
            contactQuery.append(contactCategoryDetails);
            contactQuery.append("' , COMPANY_ID ='");
            // modified for P_SCH_SNH_COMPANY 
            if(StringUtil.isValid(newCompany) && StringUtil.isValid(newcompanyID)){
                contactQuery.append(newcompanyID);
            } else {
                contactQuery.append(companyId);
            }
            //S_ENH_COMPANY ends
            if(StringUtil.isValid(newCompany) && StringUtil.isValid(newcompanyID)){//added for P_SCH_SNH_COMPANY
                contactQuery.append("' , COMPANY_NAME ='");
                contactQuery.append(newCompany);
            }

            contactQuery.append("' WHERE CONTACT_ID = (");
            contactQuery.append(contactID);
            contactQuery.append(")");
            QueryUtil.update(contactQuery.toString(), new String[]{});
            //P_SCH_SNH_COMPANY starts
            if(StringUtil.isValid(newCompany)){
                String companyQuery ="INSERT INTO CM_COMPANY_INFO(COMPANY_ID,COMPANY_NAME,REVENUE) VALUES('"+newcompanyID+"','"+newCompany+"','')";
                QueryUtil.update(companyQuery,  new String[]{});

                String companyAddressQuery = "INSERT INTO ADDRESS(ADDRESS_ID,FOREIGN_ID,FOREIGN_TYPE,CITY,STATE,COUNTRY,ZIPCODE,ADDRESS,EMAIL_IDS,PHONE_NUMBERS) VALUES('" + companyaddressID + "','" + newcompanyID + "','" + "cmCompanyInfo" + "','" + companyCity + "','" + stateID + "','" + country + "','" + companyZip + "','" + companyAddress + "','" + contactEmailID + "','" + contactphone + "')";
                QueryUtil.update(companyAddressQuery,  new String[]{});
            }
            //P_SCH_SNH_COMPANY ends
            addressQuery = new StringBuffer();
            //SC_Sch_B_15305 : starts
            addressQuery.append("UPDATE ADDRESS SET EMAIL_IDS=?");
            addressQuery.append(" , PHONE_NUMBERS =?");
            addressQuery.append(" , STATE =?");
            addressQuery.append(" , CITY =?");
            addressQuery.append(" , COUNTRY =?");
            addressQuery.append(" , ZIPCODE =?");
            addressQuery.append(" , ADDRESS =?");
            addressQuery.append(" WHERE FOREIGN_ID = (?");
            addressQuery.append(")  AND FOREIGN_TYPE = ?");
            QueryUtil.update(addressQuery.toString(), new String[]{contactEmailID,contactphone,stateID,contactcity,country,contactzip,contactAddrsee,contactID,"cmContactDetails"});
            //SC_Sch_B_15305 : ends
            logger.info("address query===================================="+addressQuery.toString());
        } catch (Exception e) {
            logger.info("ERROR: exception in insertLastUpdatedLead 2::" + e);
            logger.error("Exceptation in CmContactDetailsDAO Class in modifyContactDetailsNew() Method :::" +e.getMessage());
        }
    }

    // *************All these functionc are for implementing filters on Summary
    // Page****************//
    public static void updateContactOwner(String statusContacts, String franchiseeNo,String sNewOwner, String ownerType, String sUserNo, String sDate,String sRemarks) {
        ResultSet rs = null;
        try {
            String oldOwnerList = "";
            StringBuffer sbQuery = new StringBuffer();
            if (statusContacts != null && statusContacts.length() != 0) {
                statusContacts.trim();
                int updateQ = 0;
                //String sUserNo1 = sUserNo;
                String[] oldOwnerArray = null;
                if (franchiseeNo != null && (franchiseeNo.equals("") || franchiseeNo.equals("-1"))) {
                    franchiseeNo = "0";
                }
				/*
				 * QUERY 1
				 */
                if (sNewOwner != null) {
                    sbQuery.append("SELECT CONTACT_OWNER_ID FROM CM_CONTACT_DETAILS WHERE CONTACT_ID IN (");
                    sbQuery.append(statusContacts);
                    sbQuery.append(")");
                    rs = QueryUtil.getResult(sbQuery.toString(),
                            null);
                    while (rs.next()) {
                        if (rs.getString("CONTACT_OWNER_ID") == null || rs.getString("CONTACT_OWNER_ID").trim().length() == 0) {
                            oldOwnerList += "0" + ",";
                        } else {
                            oldOwnerList += rs.getString("CONTACT_OWNER_ID") + ",";
                        }
                    }
                    if (oldOwnerList.endsWith(",")) {
                        oldOwnerList.substring(0, oldOwnerList.length() - 1);
                    }
                    oldOwnerArray = oldOwnerList.split(",");
                    sbQuery = null;
                    sbQuery = new StringBuffer();
                    sbQuery.append("UPDATE CM_CONTACT_DETAILS SET CONTACT_OWNER_ID=");
                    sbQuery.append(sNewOwner);
                    sbQuery.append(" , FRANCHISEE_NO =");
                    sbQuery.append(franchiseeNo);
                    sbQuery.append("  ,  OWNER_TYPE ='");
                    sbQuery.append(ownerType);
                    sbQuery.append("' WHERE CONTACT_ID IN (");
                    sbQuery.append(statusContacts);
                    sbQuery.append(")");
                    updateQ = QueryUtil.update(sbQuery.toString(),new String[]{});
                }
                sbQuery = null;
                sbQuery = new StringBuffer();
                //StringTokenizer stValues = new StringTokenizer(statusContacts,",");
                String value = null;
                sUserNo = PortalUtils.getUserName(sUserNo);
            }// end if
            sbQuery = null;
            oldOwnerList = null;
        } catch (Exception e) {
            logger.error("ERROR: exception in updateLeadOwner ::" + e);
        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }

    }

    public static SequenceMap getContactTaskServicesMap(String taskID){
        return getContactTaskServicesMap(taskID, true);
    }

    public static SequenceMap getContactTaskServicesMap(String ID, boolean isTaskID){
        SequenceMap dataMap = null;
        Info dataInfo = null;
        StringBuffer query = null;
        ResultSet result = null;
        query = new StringBuffer();
        dataMap = new SequenceMap();
        if(StringUtil.isValidNew(ID)){
            query.append("SELECT * FROM FAVORITE_SERVICES ");
            if(isTaskID){
                query.append(" WHERE TASK_ID='" + ID + "'");
                query.append(" AND SOURCE='" + Constants.SRC_TASK + "'");
            }else{
                query.append(" WHERE CONTACT_ID='" + ID + "'");
                query.append(" AND SOURCE='" + Constants.SRC_CONTACT + "'");
            }
            try{
                result = QueryUtil.getResult(query.toString(), null);
                while(result.next()){
                    dataInfo = new Info();
                    dataInfo.set(FieldNames.FAVORITE_SERVICE_ID, result.getString("FAVORITE_SERVICE_ID"));
                    dataInfo.set(FieldNames.CONTACT_ID, result.getString("CONTACT_ID"));
                    dataInfo.set(FieldNames.TASK_ID, result.getString("TASK_ID"));
                    dataInfo.set(FieldNames.SERVICE_ID, result.getString("SERVICE_ID"));
                    dataInfo.set(FieldNames.PRODUCT_ID, result.getString("SERVICE_ID"));
                    dataInfo.set(FieldNames.QUANTITY, result.getString("QUANTITY"));
                    dataInfo.set(FieldNames.RATE, NumberFormatUtils.formatNumberWithDecimal(result.getString("RATE")));//P_B_CT_SCH_15090
                    dataInfo.set(FieldNames.AMOUNT	, NumberFormatUtils.formatNumberWithDecimal(result.getString("AMOUNT")));//P_B_CT_SCH_15090
                    dataInfo.set(FieldNames.DESCRIPTION, result.getString("DESCRIPTION"));
                    dataInfo.set(FieldNames.WORKING_HOURS, result.getString("WORKING_HOURS"));
                    dataInfo.set(FieldNames.CATEGORY_ID, result.getString("CATEGORY_ID"));
                    dataInfo.set(FieldNames.JOB_ID, result.getString("JOB_ID"));
                    dataMap.put(result.getString("FAVORITE_SERVICE_ID"), dataInfo);
                }
            }catch(Exception e){
                logger.error("Exceptation in CmFavoriteServicesDAO Class in getContactTaskServicesMap() Method :::" +e.getMessage());
            }
            finally
            {
                QueryUtil.releaseResultSet(result);
            }
        }
        return dataMap;
    }

    public static Info getCompanyName(String companyId) {
        ResultSet result = null;
        Info info = new Info();
        //String contactOwnerName = null;
        ResultSet result2 = null;
        StringBuffer query = new StringBuffer();
        try {
            query.append("SELECT COMPANY_NAME FROM  CM_COMPANY_INFO CCI WHERE CCI.COMPANY_ID='" + companyId + "'");
            result2 = QueryUtil.getResult(query.toString(), null);
            while (result2.next()) {

                info.set("companyName",
                        result2.getString("COMPANY_NAME"));
            }
        } catch (Exception e) {
            logger.error("ERROR: exception in updateContactCampaign ::" + e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
            QueryUtil.releaseResultSet(result2);
        }
        return info;
    }


    /**
     * Getting franchise no of contact
     *
     * @author abhishek gupta
     * @date 10 jun 2009
     * @param contactID
     * @return
     */
    public static String getContactFranID(String contactID) {
        String franID = null;
        if (StringUtil.isValidNew(contactID)) {
            franID = SQLUtil.getLastColumnValue("CM_CONTACT_DETAILS", "FRANCHISEE_NO", "CONTACT_ID", contactID);
        }
        return franID;
    }

    public static Info getSourceInfo(String source1ID){
        return getSourceInfo(source1ID,"");
    }

    public static Info getSourceInfo(String source1ID,String franchiseNo ){
        return getSourceInfo(source1ID,franchiseNo, null);

    }

    public static Info getSourceInfo(String source1ID,String franchiseNo, String fromLP ){
        //P_Zcub_B_13259
        Info combo		=	new Info();

        //--ORDER
        StringBuffer query	=null;
        String corpSortType="";
        if(source1ID != null && !"1".equals(source1ID)){
            query	= new StringBuffer("SELECT CM_SOURCE_2_ID,CM_SOURCE_2_NAME FROM CM_SOURCE_2 WHERE CM_SOURCE_1_ID ='" + source1ID + "' ORDER BY CM_SOURCE_2_NAME");


        }else{
            query	=new StringBuffer("SELECT CM_SOURCE_2_ID,CM_SOURCE_2_NAME FROM CM_SOURCE_2 CS2 LEFT JOIN CM_SUB_CATAGORY_SORT_ID CSD ON (CS2.CM_SOURCE_2_ID=CSD.CATAGORY_ID) WHERE USER_NO=1 AND CSD.SUB_CATAGORY_ID=0 ");
            //("Y".equals(fromLP)) added for Landing page and form Builder 
            if("1".equals(source1ID) || ("Y".equals(fromLP))){
                query	=new StringBuffer("SELECT CM_SOURCE_2_ID,SOURCE_NAME_DISPLAY AS CM_SOURCE_2_NAME FROM CM_SOURCE_2 CS2 LEFT JOIN CM_SUB_CATAGORY_SORT_ID CSD ON (CS2.CM_SOURCE_2_ID=CSD.CATAGORY_ID) WHERE USER_NO=1 AND CSD.SUB_CATAGORY_ID=0 ");
                query.append(" AND FLAG='Y' ");
            }else{

                query	=new StringBuffer("SELECT CM_SOURCE_2_ID,CM_SOURCE_2_NAME FROM CM_SOURCE_2 CS2 LEFT JOIN CM_SUB_CATAGORY_SORT_ID CSD ON (CS2.CM_SOURCE_2_ID=CSD.CATAGORY_ID) WHERE USER_NO=1 AND CSD.SUB_CATAGORY_ID=0 ");

            }

            query.append(" GROUP BY CM_SOURCE_2_ID");

            //Deconet-20120917-709 starts
            if(!"1".equals(franchiseNo)){
                corpSortType=NewPortalUtils.getColumnFromTable("CM_SUB_CATAGORY_SORT_ID", "SORT_ALPHA", "USER_NO", "1");
                if("Y".equals(corpSortType)){
                    query.append(" ORDER BY CS2.CM_SOURCE_2_NAME");
                }else{
                    query.append(" ORDER BY CSD.ORDER_NO");
                }
            }else{
                corpSortType = NewPortalUtils.getColumnFromTable("CM_SUB_CATAGORY_SORT_ID", "SORT_ALPHA", "USER_NO", franchiseNo);
                if("Y".equals(corpSortType)){
                    query.append(" ORDER BY CS2.CM_SOURCE_2_NAME");
                }else{
                    query.append(" ORDER BY CSD.ORDER_NO");
                }
            }
            //Deconet-20120917-709 ends

        }

        ResultSet result			= QueryUtil.getResult(query.toString(), null);
        while(result.next()){
            //Sprinkler repair guy, Scheduler issue Address Fields were not populated for franchisee user.
            //combo.set(result.getString(1),result.getString("CM_SOURCE_2_NAME"));
            //P_CM_B_42078
            combo.set(result.getString(1),result.getString("CM_SOURCE_2_NAME"));

        }
        QueryUtil.releaseResultSet(result);
        return combo;

    }

    /*** Arguments for following function : - 
     origionalStr - string which we want to be padded with some character or string 
     strToPad - contains String which is used for padding
     finalLength - how much lenght we want after padding the origional string(length in terms of chars)
     preFix - if this flag is false then this function will perform postFix padding otherwise preFix padding    
     following function will return a String after padding the passed string with desired padding string of specified finalLength   
     Added By : Navneet Arora.
     Date :  15th July 2006
     ***/
    public static String getPaddedString(String origionalStr, String strToPad, int finalLength){

        int length=origionalStr.substring(origionalStr.indexOf(".")+1).length();
        if(length<finalLength){
            while(length<finalLength){
                origionalStr=origionalStr.concat(strToPad);
                length++;
            }
        }else{
            while(length>finalLength){
                origionalStr=origionalStr.substring(0,origionalStr.length()-1);
                length--;
            }
        }
        // TODO Auto-generated method stub
        return origionalStr;
    }

    // P_date_format 
    /**
     * generates the Number  object of jxl dynamically for export in excel functionality.
     * @param column
     * @param row
     * @param number	//numeric cell content.
     * @param type
     * @param alignment		//
     * @param cellFormat	//format for cell.
     * @return jxl.write.Number
     */
    public static jxl.write.Number createJXLNumber(int column, int row , String  number , String type, String alignment, WritableCellFormat cellFormat)
    {

        jxl.write.Number num=null;
        try
        {    		
    		/*	//MBE_FIN_UTIL_REVAMPED
    		NumberFormat jxlnumfmt = null;
    		//BB_FIN_E_EXCEL_1:line updated to use Constant instead of static literals. Yogesh T, 16 May 2008
    		if(type.equalsIgnoreCase(Constants.INT_DATA))
    		{
    			jxlnumfmt = new NumberFormat("0");
    		}	
    		else
    		{
    			jxlnumfmt = new NumberFormat("0.00");
    		}
    		WritableCellFormat jxlcellfmt = new WritableCellFormat(jxlnumfmt);
    		if(cellFormat!=null)
    		{
    			jxlcellfmt = new WritableCellFormat(new WritableFont(cellFormat.getFont()), jxlnumfmt);    			
    			jxlcellfmt.setBackground(cellFormat.getBackgroundColour());
    			jxlcellfmt.setBorder(Border.ALL, BorderLineStyle.THIN , Colour.GRAY_25);//BB_FIN_Bug_36554
    			jxlcellfmt.setWrap(cellFormat.getWrap());
    			if(alignment != "" && alignment != null )
        		{
        			if(alignment.equalsIgnoreCase(Constants.ALIGN_LEFT))
        			{
        				jxlcellfmt.setAlignment(Alignment.LEFT);    		
        			}
         			else if(alignment.equalsIgnoreCase(Constants.ALIGN_RIGHT))
         			{
         				jxlcellfmt.setAlignment(Alignment.RIGHT);    		
         			}
        		}
    			else
    			{
    				jxlcellfmt.setAlignment(cellFormat.getAlignment());
    			}
    			
    		}
    		if(jxlcellfmt.getAlignment() != Alignment.LEFT && jxlcellfmt.getAlignment() != Alignment.RIGHT)
    		{
    			if(alignment == "" || alignment == null )
    			{
    				alignment = Constants.ALIGN_RIGHT;
    			}
    			if(alignment.equalsIgnoreCase(Constants.ALIGN_LEFT))
    			{
    				jxlcellfmt.setAlignment(Alignment.LEFT);    		
    			}
     			else
     			{
     				jxlcellfmt.setAlignment(Alignment.RIGHT);    		
     			}
    		}
    		*/

            //MBE_FIN_XLS_NEGMARK06Aug08
            if(number == null || "".equals(number.trim()) ||
                    Constants.HYPHENS.equals(number.trim()) ||
                    Constants.HYPHEN.equals(number.trim()) ||
                    Constants.NOT_AVAILABLE.equals(number.trim())){
                number ="0.00";
            }
            if(number!= null && number.indexOf(",")!=-1){
                number = number.replaceAll(",", "");
            }
            if(number!= null && number.indexOf("%")!=-1){
                number = number.replaceAll("%", "");
            }
            if(number == null || "".equals(number.trim())){
                number = "0.00";
            }
    		
    		/*	//MBE_FIN_UTIL_REVAMPED
    		//BB_FIN_E_EXCEL_1:line updated to use Constant instead of static literals. Yogesh T, 16 May 2008
    		if(type.equalsIgnoreCase(Constants.INT_DATA))
    		{
    			num= new Number(column,row,Integer.parseInt(number),jxlcellfmt);
    		}//BB_FIN_E_EXCEL_1:line updated to use Constant instead of static literals. Yogesh T, 16 May 2008    		
    		else if(type.equalsIgnoreCase(Constants.FLOAT_DATA))
    		{
    			num= new Number(column,row,Float.parseFloat(number),jxlcellfmt);
    		}
    		else
    		{
    			num= new Number(column,row,Double.parseDouble(number),jxlcellfmt);
    		}
    		*/
            //MBE_FIN_UTIL_REVAMPED
            num = new Number(column,row,Double.parseDouble(number), cellFormat);

        }
        catch(Exception we){
            logger.info("Exception@::::createJXLNumber::"+we);
        }
        return num;
    }
  
    /**
     * Returns the start period date of the Not filled reports for the Profit & Loss
     * @param franchiseeNo
     * @param orderby sequence order of dates
     * @param format The format of display value "m-y" or "y-m"
     * @return SequenceMap
     */
    public static SequenceMap PLNotFilledReportPeriods(String franchiseeNo, String orderby, String format){

        return SequenceMap.differSequenceMaps(AdminMgr.newInstance().getStoreDAO().getMonthsAndYear(franchiseeNo, 0, orderby, format), AdminMgr.newInstance().getPLDAO().PLFilledReportPeriods(franchiseeNo, orderby, format));
    }


    /**
     * This method is used to get the start date of the reporting period for the given frequency and date.
     *
     * @param freq Integer code of the frequency.
     * @param date Date for which reporting period is to be returned. If date not passed, reporting period of current date is returned.
     * @return Returns the period start date of the reporting period.
     */
    public static String getCurrentPeriodStart(String freq, String date)
    {
        if (isDailyFrequency(freq))
            return DateUtil.formatDate(date);
        else if (isWeeklyFrequency(freq))
            return DateUtil.getStartOfWeek(date);
        else if (is15DaysFrequency(freq))
            return DateUtil.getStartOf15Days(date);
        else if (isMonthlyFrequency(freq))
            return DateUtil.getStartOfMonth(date);
        else
            return null;
    }
    //tintwo-20160316-284 STARTS
    public static String getCurrentPeriodStartFIN(String freq, String date)
    {
        if (isDailyFrequency(freq))
            return DateUtil.formatDate(date);
        else if (isWeeklyFrequency(freq))
            return getStartOfWeekFIN(date,null);
        else if (is15DaysFrequency(freq))
            return DateUtil.getStartOf15Days(date);
        else if (isMonthlyFrequency(freq))
            return DateUtil.getStartOfMonth(date);
        else
            return null;
    }
    
    public static String getPreviousPeriodEndFIN(String freq, String date){
        return DateUtil.formatDate(DateUtil.addDate(DateUtil.getDate(getCurrentPeriodStartFIN(freq, date)), -1));
    }
    
    public static String getCurrentPeriodEndFIN(String freq, String date)
    {
        if (isDailyFrequency(freq))
            return DateUtil.formatDate(date);
        else if (isWeeklyFrequency(freq))
            return getEndOfWeekFIN(date,null);
        else if (is15DaysFrequency(freq))
            return DateUtil.getEndOf15Days(date);
        else if (isMonthlyFrequency(freq))
            return DateUtil.getEndOfMonth(date);
        else
            return null;
    }
    
    public static String getStartOfWeekFIN(String date, String format)
    {
        Calendar cal = DateUtil.getCalendar(date);
        if (cal == null) return null;

        if (cal.get(Calendar.DAY_OF_WEEK) >= SetupPreferencesUtil.newInstance().getStartOfWeek())
            cal.add(Calendar.DATE, SetupPreferencesUtil.newInstance().getStartOfWeek() - cal.get(Calendar.DAY_OF_WEEK));
        else
            cal.add(Calendar.DATE, (SetupPreferencesUtil.newInstance().getStartOfWeek() - cal.get(Calendar.DAY_OF_WEEK)) - 7);

        return DateUtil.formatDate(cal.getTime(), format);
    }
    
    public static String getEndOfWeekFIN(String date, String format)
    {
    	if(SetupPreferencesUtil.newInstance().getStartOfWeek()-1>0){
    		return DateUtil.getNextDateForWeekday(SetupPreferencesUtil.newInstance().getStartOfWeek()-1, date, format);
    	}else{
    		return DateUtil.getNextDateForWeekday(Calendar.SATURDAY, date, format);
    	}
    }
    
    public static String getCurrentPeriodFIN(String freq, String date)
    {
        if (isDailyFrequency(freq))
            return DateUtil.formatDate(date)+":"+DateUtil.formatDate(date);
        else if (isWeeklyFrequency(freq))
            return getStartOfWeekFIN(date,null)+":"+getEndOfWeekFIN(date,null);
        else if (is15DaysFrequency(freq))
            return DateUtil.getStartOf15Days(date)+":"+DateUtil.getEndOf15Days(date);
        else if (isMonthlyFrequency(freq))
            return DateUtil.getStartOfMonth(date)+":"+DateUtil.getEndOfMonth(date);
        else
            return null;
    }
    //tintwo-20160316-284 ENDS
    /**
     * This method is used to check if the given frequency is every 15 days.
     * @param freq Integer code of the frequency.
     * @return Returns true if the passed frequency is every 15 days.
     */
    public static boolean is15DaysFrequency(String freq){
        return freq.equals("598");
    }
    /**
     * This method is used to check if the given frequency is monthly.
     * @param freq Integer code of the frequency.
     * @return Returns true if the passed frequency is monthly.
     */
    public static boolean isMonthlyFrequency(String freq){
        return freq.equals("599");
    }
    /**
     * This method is used to check if the given frequency is daily.
     * @param freq Integer code of the frequency.
     * @return Returns true if the passed frequency is daily.
     */
    public static boolean isDailyFrequency(String freq){
        return freq.equals("596");
    }
    /**
     * This method is used to check if the given frequency is weekly.
     * @param freq Integer code of the frequency.
     * @return Returns true if the passed frequency is weekly.
     */
    public static boolean isWeeklyFrequency(String freq){
        return freq.equals("597");
    }
    /**
     * This method is used to check if the given frequency is quarterly.
     * @param freq Integer code of the frequency.
     * @return Returns true if the passed frequency is quarterly.
     */
    public static boolean isQuarterlyFrequency(String freq){
        return freq.equals("600");
    }
    public static SequenceMap prepareReportMonthMap(){
        return prepareReportMonthMap(null);
    }
    public static SequenceMap prepareReportMonthMap(String relativeDate){
        int month = -1;
        int year = -1;
        SequenceMap reportMonthMap = null;
        //Info reportMonthInfo = null;
        String reportMonth = null;
        Date currentDate = null;

        if(relativeDate == null)
            currentDate = DateUtil.getCurrentDate();
        else
            currentDate = DateUtil.getDate(relativeDate);
        month = currentDate.getMonth();
        year = Integer.valueOf("20" + String.valueOf(currentDate.getYear()).substring(1,3));

        month++;
        logger.info("month="+month);
        logger.info("year="+year);
        reportMonthMap = new SequenceMap();
        for(int i=year;i>=2007;i--){
            if(i == 2007){
                for(int j=12;j>=1;j--){
                    reportMonth = i + "-" + j + "-01";
                    reportMonthMap.put(DateUtil.formatDate(reportMonth, DateUtil.DB_FORMAT), DateUtil.formatDate(reportMonth, "MMM yyyy"));
                }
            }else if(i == year){
                for(int j=month;j>=1;j--){
                    reportMonth = i + "-" + j + "-01";
                    reportMonthMap.put(DateUtil.formatDate(reportMonth, DateUtil.DB_FORMAT), DateUtil.formatDate(reportMonth, "MMM yyyy"));
                }
            } else{
                for(int j=12;j>=1;j--){
                    reportMonth = i + "-" + j + "-01";
                    reportMonthMap.put(DateUtil.formatDate(reportMonth, DateUtil.DB_FORMAT), DateUtil.formatDate(reportMonth, "MMM yyyy"));
                }
            }
        }
        return reportMonthMap;
    }

    /**
     * This is a custom method written for generating code of 'Franchise ID' combo.
     * @author YogeshT
     * @param comboName
     * @param comboDisplayName
     * @param colspan
     * @return Info containing key value set for generating combo
     */
    public static Info getComboInfo1(String comboName, String comboDisplayName, String colspan){
        return getComboInfo1(comboName, comboDisplayName, colspan, null);
    }
    //P_SUPP_BUG_48155 starts
    public static Info getComboInfo1(String comboName, String comboDisplayName, String colspan, String jsFunction){
        return getComboInfo1(comboName, comboDisplayName, colspan, jsFunction,false);
    }
    public static Info getComboInfo1(String comboName, String comboDisplayName, String colspan, String jsFunction, boolean fromViewAll){
    	/*BB_FIN_E_27Aug08*/	/* BB_FIN_23Sep08 : previously getFranchiseeComboInfoByAjax */

        String style="";
        if(fromViewAll){
            style="max-width:100px;";
        }
        //P_SUPP_BUG_48155 ends
        Info info1 = new Info();

        if(jsFunction==null || "".equals(jsFunction.trim()) || "null".equalsIgnoreCase(jsFunction.trim())){
            jsFunction = "";
        }

        String comboString = "<select name=\""+comboName+"\" id=\""+comboName+"\"  style=\""+style+"\" class=\"multiList\" onchange=\""+jsFunction+"\"></select>";  //P_SUPP_BUG_48155   	        	 
        info1.set("displayName", comboDisplayName);
        if(colspan != null && !"".equals(colspan) && !"0".equals(colspan))
            info1.set("colspan", colspan);
        info1.set("value", comboString);
        info1.set("type","htmlcode");
        return info1;
    }

    public static String getTerminatedMarkForFranchisee(String franchiseeID, String status, boolean isForExcel){
        if(status != null){
            status = status.trim();
            if(status.equals("0") || status.equals("4")){
                if(isForExcel)
                    franchiseeID = "*" + franchiseeID;
                else
                    franchiseeID = "<span class='urgent_fields'>*</span>" + franchiseeID;
            }
        }
        return franchiseeID;
    }

    /**
     * This method is used to get string buffer of reporting periods for a given frequency b/w two dates.
     *
     * @param freq Integer code of the frequency.
     * @param fromDate Start Date of the date range.
     * @param toDate End Date of the date range.
     * @return Returns concatenated String of period start and period end dates of all pending reports separated by semicolon. Format of the return string is:
     *                freq1::rp1St:rp1End;rp2St:rp2End;rp3St:rp3End...
     */
    public static StringBuffer getPeriodsForFrequency(String freq, String fromDate, String toDate)
    {
        logger.info("Getting Periods for Freq ---->"+freq+"<----from---->"+fromDate+"<----to---->"+toDate);
        if (getCurrentPeriodFIN(freq,DateUtil.getCurrentDateAsString()).equals(getCurrentPeriodFIN(freq,toDate))){		//tintwo-20160316-284

        	logger.info("Current Date case::"+toDate+":"+DateUtil.getCurrentDate());
            return prepareBuffer(freq, DateUtil.getDate(getCurrentPeriodStartFIN(freq, fromDate)), DateUtil.getDate(getPreviousPeriodEndFIN(freq, toDate)));		//tintwo-20160316-284
        }else{
        	logger.info("Other case::"+toDate+":"+DateUtil.getCurrentDate());
            /* Always (except daily frequency) get the end period for one day previous to ToDate
             * to make sure if ToDate is start of cycle, it is counted in next period.
             */
            if (!isDailyFrequency(freq))
                toDate = DateUtil.formatDate(DateUtil.addDate(DateUtil.getDate(toDate), -1), DateUtil.DB_FORMAT);
            return prepareBuffer(freq, DateUtil.getDate(getCurrentPeriodStartFIN(freq, fromDate)), DateUtil.getDate(getCurrentPeriodEndFIN(freq, toDate)));		//tintwo-20160316-284
        }
    }
    /**
     * This method is used to get the reporting period string for the given frequency and date.
     *
     * @param freq Integer code of the frequency.
     * @param date Date for which reporting period is to be returned. If date not passed, reporting period of current date is returned.
     * @return Returns concatenated String of period start and period end date. Format of the return string is:
     *                rpSt:rpEnd
     */
    @Deprecated			//tintwo-20160316-284
    public static String getCurrentPeriod(String freq, String date)
    {
        if (isDailyFrequency(freq))
            return DateUtil.formatDate(date)+":"+DateUtil.formatDate(date);
        else if (isWeeklyFrequency(freq))
            return DateUtil.getStartOfWeek(date)+":"+DateUtil.getEndOfWeek(date);
        else if (is15DaysFrequency(freq))
            return DateUtil.getStartOf15Days(date)+":"+DateUtil.getEndOf15Days(date);
        else if (isMonthlyFrequency(freq))
            return DateUtil.getStartOfMonth(date)+":"+DateUtil.getEndOfMonth(date);
        else
            return null;
    }
    /**
     * This method is used to get the end date of the previous reporting period for the given frequency and date.
     *
     * @param freq Integer code of the frequency.
     * @param date Date for which previous reporting period is to be returned. If date not passed, previous reporting period w.r.t current date is returned.
     * @return Returns the period end date of the reporting period.
     */
    public static String getPreviousPeriodEnd(String freq, String date){
        return DateUtil.formatDate(DateUtil.addDate(DateUtil.getDate(getCurrentPeriodStart(freq, date)), -1));
    }
    /**
     * This method is used to get the end date of the reporting period for the given frequency and date.
     *
     * @param freq Integer code of the frequency.
     * @param date Date for which reporting period is to be returned. If date not passed, reporting period of current date is returned.
     * @return Returns the period end date of the reporting period.
     */
    public static String getCurrentPeriodEnd(String freq, String date)
    {
        if (isDailyFrequency(freq))
            return DateUtil.formatDate(date);
        else if (isWeeklyFrequency(freq))
            return DateUtil.getEndOfWeek(date);
        else if (is15DaysFrequency(freq))
            return DateUtil.getEndOf15Days(date);
        else if (isMonthlyFrequency(freq))
            return DateUtil.getEndOfMonth(date);
        else
            return null;
    }
    /**
     * This method prepares a string buffer of reporting periods for a given frequency b/w two dates.
     *
     * @param freq Integer code of the frequency.
     * @param fromDate Start Date of the date range.
     * @param toDate End Date of the date range.
     * @return Returns concatenated String of period start and period end dates of all pending reports separated by semicolon. Format of the return string is:
     *                freq1::rp1St:rp1End;rp2St:rp2End;rp3St:rp3End...
     */
    public static StringBuffer prepareBuffer(String freq, Date stDate, Date endDate)
    {
        logger.info("Preparing buffer for Freq "+freq+" for "+stDate+" to "+endDate);

        StringBuffer dBuff = new StringBuffer();
        if (isDailyFrequency(freq)){
            while (!stDate.after(endDate)){
                dBuff.append(DateUtil.formatDate(stDate)).append(":").append(DateUtil.formatDate(stDate)).append(";");
                stDate = DateUtil.addDate(stDate, 1);
            }
        }else if (isWeeklyFrequency(freq)){
            while (stDate.before(endDate)){
                dBuff.append(DateUtil.formatDate(stDate)).append(":").append(DateUtil.formatDate(DateUtil.addDate(stDate, 6))).append(";");
                stDate = DateUtil.addDate(stDate, 7);
            }
        }else if (is15DaysFrequency(freq)){
            Date eDate = null;
            while (stDate.before(endDate)){
                eDate = DateUtil.addDate(stDate, 16);
                if (DateUtil.getMonth(eDate) != DateUtil.getMonth(stDate)){
                    dBuff.append(DateUtil.formatDate(stDate)).append(":").append(DateUtil.formatDate(DateUtil.addDate(DateUtil.addDate(stDate, 1, "m"), -16))).append(";");
                    stDate = DateUtil.addDate(DateUtil.addDate(stDate, 1, "m"), -15);
                }else{
                    dBuff.append(DateUtil.formatDate(stDate)).append(":").append(DateUtil.formatDate(DateUtil.addDate(stDate, 14))).append(";");
                    if (!DateUtil.addDate(stDate, 15).before(endDate)) break;
                    dBuff.append(DateUtil.formatDate(DateUtil.addDate(stDate, 15))).append(":").append(DateUtil.formatDate(DateUtil.addDate(DateUtil.addDate(stDate, 1, "m"), -1))).append(";");
                    stDate = DateUtil.addDate(stDate, 1, "m");
                }
            }
        }else if (isMonthlyFrequency(freq)){
            while (stDate.before(endDate)){
                dBuff.append(DateUtil.formatDate(stDate)).append(":").append(DateUtil.formatDate(DateUtil.addDate(DateUtil.addDate(stDate, 1, "m"),-1))).append(";");
                stDate = DateUtil.addDate(stDate, 1, "m");
            }
        }
        return dBuff;
    }
   
    /**
     * This method calculates the Date Applied of an agreement verison mapping for multiple franchisees while switching from one freq. to another.
     *
     * @param currFreq Integer code of the current frequency of the franchisee(s).
     * @param newFreq Integer code of the new frequency of the franchisee(s).
     * @param franchisees Comma seprated list of interanl primary key of franchisees.
     * @return Returns a semicolon separated list of franchiseeNo & corresponding Applied Date. 
     *
     * @updated by abhishek gupta on 12 dec 2008
     * @purpose Do not include franchise which won't have report start date, this case is mandatory
     * 			this cause due to porting because this is mandatory when franchise managed
     * 			this is rare case so if this condition occur then all franchise not viewd well  
     */
    public static HashMap calculateVersionAppliedFrom(String currFreq, String newFreq, String franchisees)
    {
        HashMap retMap = new HashMap();
        Date dt = null;
        dt = DateUtil.getCurrentDate();
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        if (franchisees == null){
            /*  If two frequencies are provided, Date Applied is calculated as:
             *  Start of Period (as per new frequency) of (End of Previous Period (as per current frequency) + 1 day) date
             */
            Date pEndCurr = DateUtil.addDate(getPreviousPeriodEnd(currFreq, DateUtil.formatDate(DateUtil.addDate(dt,+1), DateUtil.DB_FORMAT)), 1);
            retMap.put("0", DateUtil.formatDate(getCurrentPeriodStart(newFreq, DateUtil.formatDate(pEndCurr, DateUtil.DB_FORMAT)), _baseConstants.DISPLAY_FORMAT));
        }else{
            /*  If list of franchisees provided, Date Applied is calculated as:
             *  Start of Period (as per new frequency) of (Sales Report Start Date) for each franchisee.
             */
            retMap = AdminMgr.newInstance().getStoreDAO().getSalesReportStartDate(franchisees);
            Object key = null;
            for (Iterator it = retMap.keySet().iterator(); it.hasNext();){
                key = (String)it.next();
                if(retMap.get(key) == null || "".equals(retMap.get(key).toString())) {
                    //retMap.put(key, "--");
                } else {
                    retMap.put(key, DateUtil.formatDate(getCurrentPeriodStart(newFreq, retMap.get(key).toString()), _baseConstants.DISPLAY_FORMAT));
                }
            }
        }
        return retMap;
    }
   
    public static String getExRateByspId(String spId)
    {
        String query = null;
        String subQuery = null;
        ResultSet rs = null;
        String str = "";

        subQuery = "SELECT COUNTRY_ID FROM FRANCHISEE F ";
        subQuery += " RIGHT JOIN FIN_SALESPERSON FSP ON F.FRANCHISEE_NO = FSP.FRANCHISEE_ID ";
        subQuery += " WHERE 1=1 ";
        subQuery += " AND FSP.SP_ID='" + spId + "'";

        query = "SELECT  RATE FROM FIN_COUNTRY_EXCHANGE_RATE FCER ";
        query += " WHERE COUNTRY_ID = ("+subQuery+")";
        query += " ORDER BY FCER.CURRENCY_DATE DESC LIMIT 1 ";

        try
        {

            rs = QueryUtil.getResult(query,null);
            if(rs.next()){
                str = rs.getString("RATE");
            }
            if(str ==null || str.equals("")){
                str ="1.0000000000";
            }

        }
        catch(Exception e){

        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }
        return str;

    }
    public static boolean checkIfAVChanged(String franId){
        int count = 0;
        boolean flagToReturn = false;
        count = CommonMgr.newInstance().getCommonFinancialsDAO().getCountFromFSR(franId);
        logger.info("count from FSR::: "+count);


        if(count > 0){
            flagToReturn = true;
        }
        return flagToReturn;
    }

    /**
     * This method is used while generating excel using <tt>GenerateExcelReportUtil.</tt>
     * It returns filtered SequenceMap according to given <tt>keyArray</tt>
     * @author YogeshT
     * @param receivedMap
     * @param keyArray
     * @return SequenceMap with given headers
     * @date 29Aug2008
     */
    public static SequenceMap getFormattedMapForExcel(SequenceMap receivedMap, String[] keyArray){
        //BB_FIN_XL_ENH29
        SequenceMap formattedMap = new SequenceMap();
        Iterator itr = receivedMap.keys().iterator();
        Object mKey = null;
        Info currentInfo = new Info();
        Info infoObj = null;
        while(itr.hasNext()){
            String val="";//P_E_FIN_UPGRADE added by vivek maurya
            mKey = itr.next();
            currentInfo = (Info)receivedMap.get(mKey);
            infoObj = new Info();//do not change:Its necessary to take new object here.
            for(int i=0; i< keyArray.length; i++){
                //P_E_FIN_UPGRADE added by vivek maurya starts
                val=currentInfo.getString(keyArray[i]);
                if(!StringUtil.isValid(val))
                {
                    val=" ";//P_FIN_B_74506 
                }
                infoObj.set(keyArray[i], val);
                //P_E_FIN_UPGRADE added by vivek maurya ends
            }
            formattedMap.put(mKey, infoObj);
        }
        return formattedMap;
    }
    public static String formatFranchiseID(String status, String franchiseID, String userLevel, boolean forExcel,String franchiseNo,String javaScriptFuncName, String check, boolean seeFIMInfoPrivilege){
        boolean fimPresent		= ModuleUtil.fimImplemented();
        String subMenuName="fimfran";
        if(status !=null && (status.equals("0") || status.equals("4")))
            subMenuName="fimtfran";
        else if(status !=null && status.equals("3"))
            subMenuName="fimcfran";

        if(check == null) {
            check = "";
        } else {
            check = "&checkStore=YES";
        }

        String franchiseIdDispName = NewPortalUtils.getFranchiseIdDisplayName(franchiseNo,franchiseID);  //P_ENH_FRAN_ID_DISPLAY_NAME
        franchiseID = franchiseIdDispName;		//P_B_74007
        //if(!userLevel.equals("1")){		//P_B_74007
            if (!forExcel && fimPresent && seeFIMInfoPrivilege){
                if(javaScriptFuncName != null && !javaScriptFuncName.equals(""))
                    franchiseID = "<a href='#' onClick=\""+javaScriptFuncName+"(\'"+franchiseNo+"\',\'"+subMenuName+"\')\">"+franchiseIdDispName+"</a>";
                else
                    franchiseID = "<a href='nexturl?nextUrl=fimCenterInfo?fno="+franchiseNo+"&menuName=fim&subMenuName="+subMenuName+ check + "'>"+franchiseIdDispName+"</a>";
            }
            if(status.equals("0") || status.equals("4")){
                if(forExcel)
                    franchiseID = "*" + franchiseIdDispName;
                else
                    franchiseID = "<span class=\"urgent_fields\">*</span>"+franchiseIdDispName;
            }
        //}

        return franchiseID;
    }
    public static void setAttributesForExcel(HttpServletRequest request, String pageDisplayName, Info topInfoForReport, String displayHeaders, SequenceMap MapForReport) {
        request.setAttribute("pageDisplayName", pageDisplayName);
        request.setAttribute("topInfoForReport", topInfoForReport);
        request.setAttribute("displayHeaders", displayHeaders);
        request.setAttribute("MapForReport", MapForReport);
    }
    
  
    public static String createFIMLink(String franNo,String franName){
        return createFIMLink(franNo, franName, null);
    }
    public static String createFIMLink(String franNo,String franName, String status){
        if (franNo == null || franName == null || franName.equals(""))
            return "";

        if(status == null) status = NewPortalUtils.getColumnFromTable("FRANCHISEE","STATUS","FRANCHISEE_NO",franNo);;

        if (status != null && (status.equals("0") || status.equals("4")))
            status = "fimtfran";
        else if	(status != null && status.equals("3"))
            status = "fimcfran";
        else status = "fimfran";
        //P_SC_E_18052010 Vikram
        if ("Yes".equalsIgnoreCase(MasterDataMgr.newInstance().getMasterDataDAO().getValueByType(MasterEntities.ENABLE_SMARTCONNECT))) {
            //return ("<a href=\"javascript:openSmartConnect("+franNo+", '"+status+"')\"><u>"+franName+"</u></a>"); //P_SUPP_B_17228
            return (franName);
        }else{
            //return ("<a href=\"javascript:openCenterInfo("+franNo+", '"+status+"')\"><u>"+franName+"</u></a>"); //P_SUPP_B_17228
            return (franName);
        }
    }


    //this method checks for null values
    public static String checkForNullValue(String value ) {
        if(value == null || value.equals("null") || value.equals("-1"))
            return "";
        else
            return value;
    }

    public static Info getstoretype(String frinchiseNo){

        StringBuffer query = new StringBuffer("SELECT A.ST_NAME FROM STORE_TYPE A,  ");
        query.append("FRANCHISEE F WHERE A.ST_ID = F.ST_ID  ");
        query.append("AND F.FRANCHISEE_NO = '").append(frinchiseNo).append("'");
        ResultSet rs = QueryUtil.getResult(query.toString(), null);
        Info storeInfo = new Info();
        if (rs.next()) {
            storeInfo.set("stname", rs.getString("ST_NAME"));
        }
        QueryUtil.releaseResultSet(rs);
        return storeInfo;
    }
    // Added by Nikhil Verma
  
    /**
     * To remove duplicate values.
     * @author Vivek Sharma
     * @param String
     */
    public static String removeDuplicate(String target)
    {
        String result= "";
        if(target == null || target.trim().equals(FieldNames.EMPTY_STRING))
            return result;
        HashSet set  = new HashSet();
        StringTokenizer    st1 = new StringTokenizer(target,",");
        while(st1.hasMoreTokens()){
            set.add(st1.nextToken());
        }
        result  =  StringUtil.toCommaSeparated(set.toArray());
        return result;
    }
    //P_Enh_COMMON_Task_Mails starts
    public static <K,V> String getAdditionalFieldsMap(String comboName,String comboID,
                                                      String cssClass,String onChangeFunc,String selectedvalue,String selectText, boolean defaultSelect,boolean multipleSelect, ArrayList<String> priviligedModule)
    {

        ArrayList<String> displayName = null;
        ArrayList<String> fieldNames = null;
        String[] tableAnchorsName = priviligedModule.toArray(new String[]{});
        String formName = "";
        Set<String> valueSet = new HashSet<String>();
        if(StringUtil.isValid(selectedvalue)){
            for(String value : selectedvalue.split(",")){
                valueSet.add(value.trim());
            }
        }
        StringBuilder keyWords = new StringBuilder();
        StringBuilder combo = new StringBuilder();
        keyWords.append("<select size=\"1\" name=\"").append(comboName).append("\" ");
        keyWords.append("id=\"").append(comboID).append("\"");
        if(StringUtil.isValid(cssClass)) {
            keyWords.append(" class=\"").append(cssClass).append("\"");
        }
        if(StringUtil.isValid(onChangeFunc)) {
            keyWords.append(" onChange=\"").append(onChangeFunc).append("\"");
        }
        if(multipleSelect)
        {
            keyWords.append(" multiple ");
        }
        keyWords.append(">");

     /*   if(defaultSelect) {*/
            /*keyWords.append("<option value=\"-1\">");
            if(StringUtil.isValid(selectText)) {
                keyWords.append(LanguageUtil.getString("Select "+selectText));
            } else {
                keyWords.append(LanguageUtil.getString("Select"));
            }
            keyWords.append("</option>");*/
            keyWords.append("<option value='-1'>").append(LanguageUtil.getString("Select All")).append("</option>");
       /* }*/
        Map finalMap = getHeaderMapCustom(tableAnchorsName);
        Map keyValueMap = null;

            for(String tableAnchor : tableAnchorsName)
            {
                keyValueMap = (Map)finalMap.get(tableAnchor);
                formName = (String)keyValueMap.get("formName");
                displayName = (ArrayList<String>)keyValueMap.get("displayName");
                fieldNames = (ArrayList<String>)keyValueMap.get("fieldNames");
                if(StringUtil.isValidNew(formName))
                {
                        try
                        {
                            String selected = null;

                                    keyWords.append("<option value=\""+LanguageUtil.getString(formName)+"\" disabled >"+ "---"+ LanguageUtil.getString(formName)+"---"+"</option>");
                            for(int i = 0; i < fieldNames.size() ; i++)
                            {
                                        if(valueSet.contains(fieldNames.get(i)+"#@@#"+tableAnchor)){
                                            selected = "selected";
                                        } else{
                                            selected = FieldNames.EMPTY_STRING;
                                        }
                                        keyWords.append("<option "+selected+" value=\""+fieldNames.get(i)+"#@@#"+tableAnchor+"\" >").append(LanguageUtil.getString(displayName.get(i))).append("</option>");
                                }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                }
            }
        keyWords.append("</select>");
        return keyWords.toString();
    }

    public static SequenceMap<String, String> getModuleMap(){
        SequenceMap<String, String> moduleMap = SequenceMapFactory.getNewSequenceMap();
        moduleMap.put("2","fsLeadDetails");
        moduleMap.put("3","franchisees");
        moduleMap.put("4","cmContactDetails");
        moduleMap.put("7","cmLeadDetails");//module Id set to 7 for cmLeads
        return moduleMap;
    }
    public static Map getHeaderMapCustom(String[] tableAnchorsName){

        String formName = FieldNames.EMPTY_STRING;
        ArrayList<String> displayName = null;
        ArrayList<String> fieldNames = null;
        ArrayList<String> keyWords = null;
        String query = "";
        Map keyValueMap = null;
        Map finalMap = BaseUtils.getNewLinkedHashMapWithKeyValueType();
        ResultSet result =null;
        for(String tableAnchor : tableAnchorsName)
        {

            if("N".equals(BaseNewPortalUtils.getActiveTab(tableAnchor)))
            {
                continue;
            }
            keyValueMap = BaseUtils.getNewHashMapWithKeyValueType();
            displayName = new ArrayList<String>();
            fieldNames = new ArrayList<String>();
            keyWords = new ArrayList<String>();
        formName = BaseNewPortalUtils.getFormName(tableAnchor);
        if(StringUtil.isValidNew(formName)) {
                query = "SELECT DISPLAY_NAME,DISPLAY_VALUE, MODULE_ID,FIELD_NAME FROM FORM_BUILDER_KEYWORDS_CONFIGURATION WHERE SECTION_ID = 1 AND TABLE_ANCHOR = ? AND IS_ACTIVE = 'Y' ORDER BY TABLE_ANCHOR ";
                try {

                    result = QueryUtil.getResult(query.toString(), new String[]{tableAnchor});
                    while (result.next()) {
                        displayName.add(result.getString("DISPLAY_NAME"));
                        keyWords.add(result.getString("DISPLAY_VALUE"));
                        fieldNames.add(result.getString("FIELD_NAME"));
                    }
                    keyValueMap.put("displayName", displayName);
                    keyValueMap.put("formName", formName);
                    keyValueMap.put("fieldNames", fieldNames);
                    keyValueMap.put("keyWords", keyWords);
                    finalMap.put(tableAnchor, keyValueMap);
                } catch (Exception e) {
                    logger.error("Exception in getHeaderMapCustom>> 10343>>>>>>>>>>>>>>>>>>", e);
                }
        }
      }
        return finalMap;
    }
    //P_Enh_COMMON_Task_Mails ends
    public static Info getFranchiseeArea(String fNo){

        StringBuffer query = new StringBuffer("SELECT A.AREA_ID, A.AREA_NAME FROM AREAS A,  ");
        query.append("FRANCHISEE F WHERE A.AREA_ID = F.AREA_ID  ");
        query.append("AND F.FRANCHISEE_NO = '").append(fNo).append("'");

        logger.info("getFranchiseeArea:"+query.toString());
        ResultSet rs = QueryUtil.getResult(query.toString(), null);

        Info areaInfo = new Info();
        if (rs.next()) {
            areaInfo.set("Id", rs.getString("AREA_ID"));
            areaInfo.set("name", rs.getString("AREA_NAME"));
        }

        QueryUtil.releaseResultSet(rs);


        return areaInfo;
    }
   
    public static Info getLeadDetail(String leadID){
        Info info		=	new Info();
//	      Bug Id :27735 By Nikhil Verma
        //P_ADMIN_B_39522 add new field HOME_PHONE_EXT and PHONE_EXT
        String query	= "SELECT  HOME_PHONE,HOME_PHONE,PRIMARY_PHONE_TO_CALL,ADDRESS2,ADDRESS,STATE_ID,COUNTRY,ZIP,CITY,SALUTATION,LEAD_ID,FIRST_NAME,LAST_NAME ,EMAIL_ID,PHONE ,FAX ,MOBILE ,HOME_PHONE_EXT, PHONE_EXT FROM FS_LEAD_DETAILS WHERE LEAD_ID = "+leadID;
        String address="";
        String address2="";
        ResultSet result			= QueryUtil.getResult(query,null);
        if(result.next()){
            info.set(FieldNames.SALUTATION,result.getString("SALUTATION"));
            info.set(FieldNames.LEAD_ID,result.getString("LEAD_ID"));
            info.set(FieldNames.FIRST_NAME,result.getString("FIRST_NAME"));
            info.set(FieldNames.LAST_NAME,result.getString("LAST_NAME"));
            info.set(FieldNames.EMAIL_ID,result.getString("EMAIL_ID"));
            info.set(FieldNames.PHONE,result.getString("PHONE"));
            //P_ADMIN_B_39522 Start
            info.set(FieldNames.PHONE_EXT,result.getString("PHONE_EXT"));
            //P_ADMIN_B_39522 Ends
            info.set(FieldNames.FAX,result.getString("FAX"));
            info.set(FieldNames.MOBILE,result.getString("MOBILE"));
            info.set(FieldNames.CITY,result.getString("CITY"));
            info.set(FieldNames.ZIP,result.getString("ZIP"));
            info.set(FieldNames.COUNTRY,result.getString("COUNTRY"));
            info.set(FieldNames.STATE_ID,result.getString("STATE_ID"));
            if(result.getString("ADDRESS")!=null && !result.getString("ADDRESS").equals(""))
                address=address+result.getString("ADDRESS");
            info.set(FieldNames.ADDRESS,address);
            if(result.getString("ADDRESS2")!=null && !result.getString("ADDRESS2").equals(""))
                address2 = address2 + result.getString("ADDRESS2");			//InH_FIMModule_Address2 starts
            info.set(FieldNames.ADDRESS2,address2);
	                /*if(!address.equals(""))
	                address=address+"\n"+result.getString("ADDRESS2");
	                else
	                    address=address+result.getString("ADDRESS2");*/
            //InH_FIMModule_Address2 ends
            // Bug Id :27735 By Nikhil Verma
            info.set(FieldNames.PRIMARY_PHONE_TO_CALL,result.getString("PRIMARY_PHONE_TO_CALL"));
            info.set(FieldNames.HOME_PHONE,result.getString("HOME_PHONE"));
            //P_ADMIN_B_39522 Start
            info.set(FieldNames.HOME_PHONE_EXT,result.getString("HOME_PHONE_EXT"));
            //P_ADMIN_B_39522 Ends
        }

        QueryUtil.releaseResultSet(result);

        return info;
    }

    public static  SequenceMap getAllMUFranchisee()
    {

        SequenceMap sMap = new SequenceMap();
        StringBuffer query = new StringBuffer("SELECT DISTINCT F.FRANCHISEE_NO,F.FRANCHISEE_NAME FROM FRANCHISEE F,FIM_OWNERS FO,OWNERS O WHERE ");
        query.append(" F.FRANCHISEE_NO=O.FRANCHISEE_NO AND O.OWNER_ID=FO.FRANCHISE_OWNER_ID  AND F.IS_FRANCHISEE='Y' AND F.STATUS IN (1,3) ");
        query.append(" AND FO.FRANCHISE_OWNER_ID IN (SELECT DISTINCT O.OWNER_ID FROM OWNERS O,FRANCHISEE F WHERE F.FRANCHISEE_NO=O.FRANCHISEE_NO AND F.STATUS IN (1,3) AND IS_FRANCHISEE='Y' ");
        query.append(" GROUP BY OWNER_ID  HAVING COUNT(OWNER_NO)>1) ORDER BY FRANCHISEE_NAME ");
        ResultSet rs=null;
        try
        {
            rs = QueryUtil.getResult(query.toString(), null);
            while (rs.next())
                sMap.put(rs.getString("FRANCHISEE_NO"), rs.getString("FRANCHISEE_NAME"));
        } catch (Exception e)
        {

            logger.error("Exception in getAllMUFranchisee: "+ e.getMessage());
        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }

        return sMap;

    }


    public static SequenceMap getCompanyName(String franStatus, String areaId){
        return getCompanyName(franStatus, areaId, false);
    }
    //P_E_SEARCH_FILTER starts
    public static SequenceMap getCompanyName(String franStatus, String areaId, boolean isReportCombo){
        return getCompanyName(franStatus, areaId, isReportCombo,null);
    }
    
    //P_B_65230 STARTS
    public static SequenceMap getCompanyName(String franStatus, String areaId, boolean isReportCombo,String entityCode){
    	return getCompanyName(franStatus, areaId, isReportCombo,entityCode,null,false);
    }
    //P_B_65230 ENDS
    public static SequenceMap getCompanyName(String franStatus, String areaId, boolean isReportCombo,String entityCode,String inDevFranStatus,boolean storeOnly){		//P_B_65230
    	return getCompanyName(franStatus, areaId, isReportCombo,entityCode,inDevFranStatus,storeOnly,null);
    }
    public static SequenceMap getCompanyName(String franStatus, String areaId, boolean isReportCombo,String entityCode,String inDevFranStatus,boolean storeOnly,String divisionIds){		//P_B_65230
        StringBuffer query = new StringBuffer("SELECT FED.FIM_ENTITY_ID,FIM_TT_ENTITY_NAME, FIM_TT_ENTITY_NAME,ENTITY_ID FROM FIM_ENTITY_DETAIL FED, FRANCHISEE F, FIM_ENTITY_LOCATION_MAPPING FELM WHERE F.FRANCHISEE_NO = FELM.FRANCHISEE_NO AND FELM.FIM_ENTITY_ID=FED.FIM_ENTITY_ID ");//P_B_51705
        UserRoleMap fimLeftUserRoleMap	= (UserRoleMap) StrutsUtil.getHttpSession().getAttribute("userRoleMap");
        if(StringUtil.isValid(entityCode)){
        	//P_B_65230 STARTS
        	if(storeOnly){
            	if("2".equals(inDevFranStatus)){
            		query.append(" AND (F.IS_FRANCHISEE = 'N' AND F.IS_STORE ='Y' AND F.IS_STORE_ARCHIVED='Y' AND F.STATUS IN(1,3) ) ");
            	}else{	
            		query.append(" AND (F.IS_FRANCHISEE = 'N' AND F.IS_STORE ='Y' AND F.IS_STORE_ARCHIVED='N' AND F.STATUS IN(1,3) ) ");
            	}
            }
        	//P_B_65230 ENDS
        	else if("storefimTtEntityName".equals(entityCode)){
                query.append(" AND (F.IS_STORE='Y' AND IS_STORE_ARCHIVED!='Y') ");
            }else if(FieldNames.FIM_TT_ENTITY_NAME.equals(entityCode)){
                query.append(" AND (F.IS_FRANCHISEE='Y') ");
            }else if("entityReport".equals(entityCode)){
            	if(MultiTenancyUtil.getTenantConstants().REPORT_IN_DEVELOPMENT && fimLeftUserRoleMap.isPrivilegeInMap("/fimStoreList")) {
            		query.append(" AND (IS_FRANCHISEE='Y' ") ;
            		query.append("AND F.STATUS IN (1");
    				
    				if(fimLeftUserRoleMap!= null && fimLeftUserRoleMap.isPrivilegeInMap ("/fimCorporate")){
    					query.append(",3");
    				}
    				query.append(")");
    				query.append(" OR(IS_STORE='Y' AND IS_STORE_ARCHIVED='N' AND IS_FRANCHISEE='N' AND F.STATUS IN(1,3))) ");
    				//whereClause.append(BaseNewPortalUtilsFIM.getInDevCondition());
    	        }else {
    	        	query.append(" AND F.IS_FRANCHISEE='Y' ");
    	        	query.append("AND F.STATUS IN (1");
    				
    				if(fimLeftUserRoleMap!= null && fimLeftUserRoleMap.isPrivilegeInMap ("/fimCorporate")){
    					query.append(",3");
    				}
    				query.append(")");
    	        }
            }else{
                query.append(" AND (F.IS_STORE='Y' AND IS_STORE_ARCHIVED='Y') ");
            }

        }else{
            query.append(" AND (F.IS_FRANCHISEE='Y' OR (F.IS_STORE='Y' AND IS_STORE_ARCHIVED!='Y')) ");
        }
        //P_E_SEARCH_FILTER ends
        if (StringUtil.isValid(areaId)) {
            query.append("AND F.AREA_ID = '").append(areaId).append("' ");
            if(franStatus != null){
                if(franStatus.equals("0"))
                    query.append("AND F.STATUS IN(" + franStatus + ",4) ");
                else
                    query.append("AND F.STATUS IN( " + franStatus + ") ");
            }
        } else {
            if(StringUtil.isValid(franStatus) && !"entityReport".equals(entityCode)){
                if(franStatus.equals("0"))
                    query.append("AND F.STATUS IN(" + franStatus + ",4) ");
                else
                    query.append("AND F.STATUS IN( " + franStatus + ") ");
            }
        }
        
        if(StringUtil.isValid(divisionIds)){
        	query.append(" AND F.FRANCHISEE_NO IN(").append(DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)).append(") ");
        }
        
        query.append(" GROUP BY FED.FIM_TT_ENTITY_NAME ");
        query.append(" ORDER BY FED.FIM_TT_ENTITY_NAME");

        logger.info("getCompanyName:"+query.toString());
        ResultSet rs = QueryUtil.getResult(query.toString(), null);
        SequenceMap companyNameMap = new SequenceMap();
        while (rs.next()) {
            if(isReportCombo || StringUtil.isValid(entityCode)) {//P_B_50715
                companyNameMap.put((rs.getString("ENTITY_ID")), rs.getString("FIM_TT_ENTITY_NAME"));//P_FIN_B_30849
            } else {
                companyNameMap.put(rs.getString("FIM_ENTITY_ID"), rs.getString("FIM_TT_ENTITY_NAME"));//P_FIN_B_30849
            }
        }

        QueryUtil.releaseResultSet(rs);

        return companyNameMap;
    }
    public static SequenceMap getAreaFranchisees(String areaId, String franStatus, String includeStores){
        return getAreaFranchisees(areaId, franStatus, includeStores, null);
    }
    
    public static SequenceMap getAreaFranchisees(String areaId, String franStatus, String includeStores,UserRoleMap fimLeftUserRoleMap){// DIVISION_LABEL starts
        return getAreaFranchisees(areaId, franStatus, includeStores,fimLeftUserRoleMap, null);
    }
    public static SequenceMap getAreaFranchisees(String areaId, String franStatus, String includeStores, UserRoleMap fimLeftUserRoleMap,String divisionIds){// DIVISION_LABEL ends

        StringBuffer query = new StringBuffer("SELECT F.FRANCHISEE_NO, F.FRANCHISEE_NAME ");
        StringBuffer fromClause = new StringBuffer("FROM FRANCHISEE F ");
        StringBuffer whereClause = new StringBuffer("WHERE 1=1 AND  ");
        if (includeStores != null && !includeStores.trim().equals("") && !includeStores.trim().equals("null"))
        {
            whereClause.append(" (F.IS_FRANCHISEE = 'Y' OR F.IS_STORE ='").append(includeStores).append("' )");
        } else whereClause.append(" F.IS_FRANCHISEE = 'Y' ");

        if(fimLeftUserRoleMap!= null) {
            String franchiseeStatus = FieldNames.EMPTY_STRING;
            Map<String,Boolean> privilegeMap = NewPortalUtils.getNewHashMapWithKeyValueType();
            privilegeMap.put("0", fimLeftUserRoleMap.isPrivilegeInMap("/fimTerminated"));
            privilegeMap.put("1", true);
            privilegeMap.put("3", fimLeftUserRoleMap.isPrivilegeInMap("/fimCorporate"));
            privilegeMap.put("4", fimLeftUserRoleMap.isPrivilegeInMap("/fimTerminated"));
            if (franStatus != null) {
                String[] allStatus = franStatus.split(",");
                for(String status:allStatus) {
                    if(privilegeMap.containsKey(status) && privilegeMap.get(status)) {
                        franchiseeStatus += status+",";
                    }
                }
            } else {
                for (String status :privilegeMap.keySet()) {
                    if(privilegeMap.get(status)) {
                        franchiseeStatus += status+",";
                    }
                }
            }
            franchiseeStatus = franchiseeStatus.substring(0,franchiseeStatus.lastIndexOf(","));
            whereClause.append("AND F.STATUS IN (").append(franchiseeStatus).append(")");
        } else {
            if (franStatus != null) {
                if(franStatus.equals("0")) {
                    whereClause.append("AND F.STATUS IN (0,4)");
                } else {
                    whereClause.append("AND F.STATUS IN (").append(franStatus).append(")");
                }
            }
        }
        if (areaId != null) {
            whereClause.append("  AND F.AREA_ID = '").append(areaId).append("' ");
        }
        if(StringUtil.isValid(divisionIds)){//DIVISION_LABEL starts
        	 whereClause.append("   AND F.FRANCHISEE_NO IN ("+DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)+") ");
        }//DIVISION_LABEL ends
        query.append(fromClause).append(whereClause).append(" ORDER BY FRANCHISEE_NAME");
        logger.info("getAreaFranchisees:"+query.toString());
        ResultSet rs = QueryUtil.getResult(query.toString(), null);
        SequenceMap franchiseeMap = new SequenceMap();
        while (rs.next()) {
            franchiseeMap.put(rs.getString("FRANCHISEE_NO"), rs.getString("FRANCHISEE_NAME"));
        }
        QueryUtil.releaseResultSet(rs);
        return franchiseeMap;
    }

    public static Object getAllAreaDevelopers(String retType,String areaID) {
    	return getAllAreaDevelopers(retType, areaID, false);
    }
    
    public static Object getAllAreaDevelopers(String retType,String areaID, boolean franchiseeFilter) {
        //BASE_FIM_O_2011012410000495 starts   added claues for deleted area / region.
        StringBuffer query = new StringBuffer("SELECT DISTINCT AD.AREA_DEVELOPER_ID,AD.TITLE,AD.FIRST_NAME,AD.MIDDLE_NAME,AD.LAST_NAME FROM AREA_DEVELOPER AD ,AREA_DEVELOPER_MAPPING ADM ,AREAS A WHERE A.AREA_ID = ADM.AREA_ID AND AD.AREA_DEVELOPER_ID=ADM.AREA_DEVELOPER_ID AND A.IS_DELETED = 'N' ");
        //BASE_FIM_O_2011012410000495 ends
        if(areaID!=null && !"".equals(areaID) && !"-1".equals(areaID)) {
        	if(franchiseeFilter) {
        		query.append(" AND ADM.AREA_ID ="+areaID+"");
        	} else {
        		query.append(" AND AD.AREA_DEVELOPER_ID NOT IN(SELECT AREA_DEVELOPER_ID FROM AREA_DEVELOPER_MAPPING WHERE AREA_ID="+areaID+")");
        	}
        }
        query.append(" ORDER BY AD.FIRST_NAME");
        ResultSet rs = QueryUtil.getResult(query.toString(), null);

        if (retType.equals("INFO")){
            Info areaADInfo = new Info();
            while (rs.next())
                areaADInfo.set(	rs.getString("AREA_DEVELOPER_ID"),
                        MasterDataMgr.newInstance().getMasterDataDAO().getValueForId(MasterEntities.TITLE, rs.getString("TITLE"))
                                +" "
                                + StringUtil.formatName(rs.getString("FIRST_NAME"), rs.getString("MIDDLE_NAME"), rs.getString("LAST_NAME"))
                );
            QueryUtil.releaseResultSet(rs);
            return areaADInfo;
        }else{
            SequenceMap areaADMap = new SequenceMap();
            while (rs.next())
                areaADMap.put(	rs.getString("AREA_DEVELOPER_ID"),
                        MasterDataMgr.newInstance().getMasterDataDAO().getValueForId(MasterEntities.TITLE, rs.getString("TITLE"))
                                +" "
                                + StringUtil.formatName(rs.getString("FIRST_NAME"), rs.getString("MIDDLE_NAME"), rs.getString("LAST_NAME"))
                );
            QueryUtil.releaseResultSet(rs);
            return areaADMap;
        }

    }
    public static SequenceMap getMailMergeData(String sectionName, String templateStatus, String tempUserNo, String sortOrder, String sortKey, String pageId, String pageSize, String contextPath, String rootUrl,String userLanguage,boolean canAddModify,boolean canDelete){
        SequenceMap map	= new SequenceMap();
        StringBuffer query = new StringBuffer();
        com.home.builderforms.sqlqueries.ResultSet result = null;
        int limitPerPage = 999;
        int count = 0;
        Info info = null;
        StringBuffer menuBar = null;
        String singleAction = null;
        String actLinkArr[] = null;
        String actions = null;
        String links = null;

        query.append(" SELECT * FROM MAILMERGE_TEMPLATE_DETAIL ");
        query.append(" WHERE DEL_TEMPLATE='F' AND TEMPLATE_TITLE != 'Default' ");
        if(MailMergeUtil.isValid(sectionName)){
            query.append(" AND SECTION_TYPE ='");
            query.append(sectionName);
            query.append("'");
        }
        if(!MailMergeUtil.isValid(templateStatus)){
            templateStatus = "Public";
        }
        query.append(" AND TEMPLATE_STATUS_TYPE ='");
        query.append(templateStatus);
        query.append("'");

        if(MailMergeUtil.isValid(tempUserNo) && "Private".equals(templateStatus)){
            if(tempUserNo!=null && !RoleMgr.newInstance().getRoleDAO().isRoleExistForUser(tempUserNo,"1"))
            {	 query.append(" AND CREATED_BY IN(");
                query.append(tempUserNo);
                query.append(")");
            }


        }
        result	= QueryUtil.getResult(query.toString(), null);
        map.put(FieldNames.TOTAL_RECORDS, result.size());

        if(MailMergeUtil.isValid(pageSize)){
            limitPerPage = Integer.parseInt(pageSize);
        }

        String order=" CREATED_DATE ";

        if(sortKey!=null && "TT".equals(sortKey)){
            order = " TEMPLATE_TITLE ";
        }else if(sortKey!=null && "CD".equals(sortKey)){
            order = " CREATED_DATE ";
        }else if(sortKey!=null && "CB".equals(sortKey)){
            order = " CREATED_BY ";
        }
        query.append(" ORDER BY "+ order+" " + sortOrder);

        if(MailMergeUtil.isValid(pageId) && !pageId.equals("0"))
            query.append(" LIMIT ").append((Integer.parseInt(pageId)-1)*limitPerPage).append(", ").append(limitPerPage);
            //P_FS_B_47896
        else if(MailMergeUtil.isValid(pageId) && pageId.equals("0")){

        }
        else
            query.append(" LIMIT ").append("0, ").append(limitPerPage);

        result	= QueryUtil.getResult(query.toString(), null);
        menuBar = new StringBuffer();
        try
        {
            while(result.next()){
                info = new Info();
                info.set(FieldNames.TEMPLATE_ID, result.getString("TEMPLATE_ID"));
                info.set(FieldNames.SECTION_TYPE, result.getString("SECTION_TYPE"));
                info.set(FieldNames.TEMPLATE_TITLE, result.getString("TEMPLATE_TITLE"));
                info.set(FieldNames.TEMPLATE_TITLE_LINKED, MailMergeUtil.getLinkedTemplateTitle(result.getString("TEMPLATE_TITLE"), rootUrl, result.getString("FILE_NAME"), result.getString("MIME_TYPE"), result.getString("TEMPLATE_ID")));
                info.set(FieldNames.FILE_NAME, result.getString("FILE_NAME"));
                info.set(FieldNames.MIME_TYPE, result.getString("MIME_TYPE"));
                //info.set(FieldNames.TEMPLATE_FIELD, result.getString("TEMPLATE_FIELD"));
                info.set(FieldNames.CREATED_DATE, result.getString("CREATED_DATE"));
                info.set(FieldNames.CREATED_BY,PortalUtils.getUserName(result.getString("CREATED_BY")));
                info.set(FieldNames.DEL_TEMPLATE, result.getString("DEL_TEMPLATE"));
                info.set(FieldNames.TEMPLATE_STATUS_TYPE, result.getString("TEMPLATE_STATUS_TYPE"));
                //Start Prepare Action & Related MenuBar
                singleAction = "javascript:void(0);redirect(?, '"+result.getString("TEMPLATE_ID") +"')";
                actLinkArr = MailMergeUtil.listOfActionsAndLinks(userLanguage,canAddModify,canDelete);
                actions = actLinkArr[0];
                links = actLinkArr[1];
                menuBar.append("prepareActionsMenu2("+actions+","+ links+", "+actions+", ");
                menuBar.append(count + ", " + "\"" + singleAction + "\"" + ",'dynamicmenu');\n");
                info.set(FieldNames.ACTION, MailMergeUtil.getMenuBar(count++, contextPath));
                //End Prepare Action & Related MenuBar
                map.put(result.getString("TEMPLATE_ID"), info);
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        map.put(FieldNames.MENU_BAR, menuBar.toString());
        return map;
    }
    //  P_E_AdBuilder_PO_Status_23_1 query changed By Divya


    public static ArrayList getAgentDetails(String agentNo){
        StringBuffer query2 = new StringBuffer();
        ArrayList details = new ArrayList();
        //String fullName="";
        //String addr ="";
        //String city =	"";
        //String state = "";
        String country = "";
        //String zip = "";
        //String phone =	"";
        //String phone1Extension = "";
        //String email =	"";
        //String mobile =	"";
        //String fax =	"";
        //String status = "";
        ResultSet rs1 = null;
        try{
            query2.append("SELECT USER_FIRST_NAME,USER_LAST_NAME,ADDRESS,TIMEZONE,CITY,STATE,ZIPCODE,COUNTRY,PHONE1,PHONE2,EMAIL_ID,MOBILE,FAX,USER_TYPE,PHONE1_EXTN,USER_PICTURE_NAME FROM AGENT_USERS WHERE AGENT_NO=");
            query2.append(agentNo);



            rs1 = QueryUtil.getResult(query2.toString(), new Object[]{});
            if(rs1.next()){

                String firstName	=	rs1.getString("USER_FIRST_NAME");
                String lastName		=	rs1.getString("USER_LAST_NAME");
                String timeZone		=rs1.getString("TIMEZONE");
                if(firstName==null) firstName = "";
                if(lastName==null) lastName = "";
                details.add(firstName+" "+lastName);
                details.add (rs1.getString("ADDRESS"));
                details.add(rs1.getString("CITY"));
                details.add(rs1.getString("STATE"));
                details.add(rs1.getString("ZIPCODE"));
                details.add(rs1.getString("COUNTRY"));
                //P_ADMIN_B_39573 Start
                country=rs1.getString("COUNTRY");
                //P_ADMIN_B_39573 Ends
                String phone1		=	rs1.getString("PHONE1");
                String phone2		=	rs1.getString("PHONE2");

                if(phone1==null) {phone1 = "";}
                if(phone2==null) {phone2 = "";}
                int flag = 1;
                for(int i=0; i<phone1.length(); i++)
                {
                    boolean check = Character.isDigit(phone1.charAt(i));

                    if(!check)
                    {
                        flag = 0;
                    }
                }
                if(flag==1){
                    phone1=PortalUtils.formatPhoneNo(phone1,country);
                }

                int flag1 = 1;
                for(int ii=0; ii<phone2.length(); ii++)
                {
                    boolean check1 = Character.isDigit(phone2.charAt(ii));

                    if(!check1)
                    {
                        flag1 = 0;
                    }
                }
                if(flag1==1){
                    phone2=PortalUtils.formatPhoneNo(phone2,country);
                }

                try
                {
                    if(phone2.length()!=0)
                    {
                        details.add(phone1+", "+phone2);
                    }
                    else
                    {
                        details.add(phone1);
                    }
                }
                catch(Exception e)
                {
                    logger.error("Exception is",e);
                }

                details.add(rs1.getString("PHONE1_EXTN"));
                details.add(StringUtil.isValid(rs1.getString("EMAIL_ID"))?rs1.getString("EMAIL_ID") : "");
                details.add(rs1.getString("MOBILE"));
                details.add(rs1.getString("FAX"));
                details.add("");
                details.add(timeZone);
                if("userAgent".equals(rs1.getString("USER_TYPE")))
                    details.add(" (Corporate User)");
                else
                    details.add(" (Agent)");
                details.add(rs1.getString("USER_PICTURE_NAME"));
            }

        }
        catch (Exception e)
        {
            logger.error("Exception is",e);
        }finally
        {
            QueryUtil.releaseResultSet(rs1);
        }

        return details;

    }

    /**
     * This method gives a date 15 days before current date in the format suitable for the database
     */
    public static String getStartDate()
    {
        Calendar cal = Calendar.getInstance();
        int date = cal.get(Calendar.DATE);
        cal.set(Calendar.DATE,date - 15);
        date = cal.get(Calendar.DATE);
        int month = cal.get(Calendar.MONTH)+1;
        int year = cal.get(Calendar.YEAR);
        String strMonth = Integer.toString(month);
        String strDate = Integer.toString(date);
        if(strMonth!=null && strMonth.length()<2) {
            strMonth="0"+strMonth;
        }
        if(strDate!=null && strDate.length()<2) {
            strDate="0"+strDate;
        }
        //String startDate = PortalUtils.dbFormatDate(date,month,year);

        String startDate = year+"-"+strMonth+"-"+strDate;
        //String startDate = com.home.builderforms.DateUtil.getDbDate(month+"/"+date+"/"+year);


        return startDate;
    }

    /*Sometimes MailIDs Array Contains comma seperated entries.
		     * They should be in Array also. So first this method collects all
		     * entries from array in set removing all duplicate or invalid entry.
		     * Then it converts set to String array.
		     * */
    public static String[] prepareMailIDsArray(String[] mailIDsArray){
        String[] finalArray = null;
        String[] tempArray = null;
        Set mailIDSet = null;
        String mailIDs = null;
        String mailID = null;
        Iterator it = null;

        try{
            if(mailIDsArray!=null){
                mailIDSet = new HashSet();
                for(int i=0;i<mailIDsArray.length;i++){
                    mailIDs = mailIDsArray[i];
                    tempArray = mailIDs.split(",");
                    for(int j=0;j<tempArray.length;j++){
                        mailID = tempArray[j];
                        if(StringUtil.isValidNew(mailID) && mailID.indexOf("@")!=-1 && mailID.indexOf(".")!=-1){
                            mailID = mailID.trim();
                            mailIDSet.add(mailID);
                        }
                    }
                }
            }
            if(mailIDSet!=null){
                finalArray = new String[mailIDSet.size()];
                it = mailIDSet.iterator();
                int i=0;
                while(it.hasNext()){
                    finalArray[i++] = (String)it.next();
                }
            }
        }catch(Exception e){
            e.printStackTrace();
            finalArray = mailIDsArray;
        }
        printArrayToConsole(finalArray, "Printing Final Mail Array.");
        return finalArray;
    }
   
    public static String getUserNameTraining(String userNo)
    {
        return NewPortalUtils.getContactOwner(userNo);
    }

    public static String getFranchiseeIDComboNew(String comboType,
                                                 String selectedOptions, String defaultSelectedOption,
                                                 String onChange, String userLevel) {

        return getFranchiseeIDComboNew(comboType,
                selectedOptions, defaultSelectedOption,
                onChange, userLevel,null);
    }

    public static String getFranchiseeIDComboNew(String comboType,
                                                 String selectedOptions, String defaultSelectedOption,
                                                 String onChange, String userLevel,String width) {
        StringBuffer comboBuffer = new StringBuffer();
        String comobClass = "multiList";

        if(width!=null){
            comboBuffer.append("<select name='franchiseId' id='franchiseId' class='"+("multiple".equals(comboType)?"form-control" : "multiList")+"' style=width:135px "); //modification by Prakriti	
        } else {
            comboBuffer.append( "<select name='franchiseId' id='franchiseId' class='"+("multiple".equals(comboType)?"form-control" : "multiList")+"'");
        }

        if (onChange != null) {
            comboBuffer.append(" onchange='").append(onChange).append("' ");
        }

        if (comboType != null && "multiple".equals(comboType)) {
            comboBuffer.append(" multiple='true' size='4' ");
        }
        comboBuffer.append(" >");

        if (defaultSelectedOption != null && !"".equals(defaultSelectedOption)) {
            comboBuffer.append("<option value='-1' >" + defaultSelectedOption
                    + "</option>");
        }

        Info franchiseeInfo = new Info();
        if (userLevel.equals("0")) {
            //franchiseeInfo = getFranchiseesInfoNew("activate");//P_TRAINING_B_76581:Ankit Saini
            franchiseeInfo = AdminMgr.newInstance().getUsersDAO().getAllFranchiseesHavingUsers();//P_B_SCH_12114 added as above method was showing all francise ids even those which are not having any franchise users
        }

        if (franchiseeInfo != null) {
            //int franCount = franchiseeInfo.size();
            Iterator franItr = franchiseeInfo.getKeySetIterator();
            while (franItr.hasNext()) {
                String franNo = (String) franItr.next();
                String franName = franchiseeInfo.getString(franNo);
                // allUsersInfo.set(franNo,franNofranNo);
                if(selectedOptions==null || "".equals(selectedOptions)){
                    comboBuffer.append("<option value=" + franNo + ">" + franName+ "</option>");
                }else{
                    comboBuffer.append("<option value='").append(franNo).append("' ");
                    if(selectedOptions.equals(franNo)){
                        comboBuffer.append("selected");
                    }
                    comboBuffer.append(">");
                    comboBuffer.append(franName).append("</option>");
                }

            }

        }
        comboBuffer.append("</select>");
        return comboBuffer.toString();
    }
    /**
     * @param comboType
     * @param selectedOptions
     * @param defaultSelectedOption
     * @param userNo
     * @return
     */

    public static String getCorporateUserComboAllSelected(String comboType,
                                                          String selectedOptions, String defaultSelectedOption,
                                                          String userNo, String onChange) {
        return getCorporateUserComboAllSelected(comboType, selectedOptions, defaultSelectedOption, userNo, onChange,null);
    }

    public static String getCorporateUserComboAllSelected(String comboType,
                                                          String selectedOptions, String defaultSelectedOption,
                                                          String userNo, String onChange,String comboClass) {

        //String oldUserNo = userNo;
        StringBuffer comboBuffer = new StringBuffer(
                "<select name= 'corpUserId' id ='corpUserId'  class='").append(StringUtil.isValid(comboClass) ? comboClass : "multiList").append("'  ");
        if (comboType != null && "multiple".equals(comboType)) {
            comboBuffer.append(" multiple='true' size='4' ");
        }

        if (onChange != null && !"".equals(onChange)) {
            comboBuffer.append(" onChange='").append(onChange).append("' ");
        }

        comboBuffer.append(" >");

        if (defaultSelectedOption != null && !"".equals(defaultSelectedOption)) {
            comboBuffer.append("<option value='-1' >" + defaultSelectedOption
                    + "</option>");
        }
        Info userInfo = null;
        Info allUsersInfo = new Info();
        String userName = "";
        userInfo = AdminMgr.newInstance().getUsersDAO().getAllUsers("0", "", userNo);
        if (userInfo != null) {
            //int userCount = userInfo.size();
            Iterator userItr = userInfo.getKeySetIterator();
            while (userItr.hasNext()) {
                userNo = (String) userItr.next();
                userName = userInfo.getString(userNo);
                allUsersInfo.set(userNo, userName);

                comboBuffer.append("<option value=" + userNo + " selected>"
                        + userName + "</option>");

            }

        }
        comboBuffer.append("</select>");

        return comboBuffer.toString();
    }

    public static String getUPSServiceName(String upsShippingOptionID) {
        SequenceMap upsServeceMap = null;
        String serviceName = "";
        if(upsShippingOptionID != null && "0".equals(upsShippingOptionID))
            return serviceName = "Other";
        else if(upsShippingOptionID != null && ("Warehouse Pickup".equals(upsShippingOptionID) || "Fixed Shipping".equals(upsShippingOptionID)))
            return serviceName = upsShippingOptionID;
        try {
            UPSServiceCodeXMLParser upsServiceCodeXMLParserObj = UPSServiceCodeXMLParser
                    .getInstance();

            //P_SUPP_ENHANCEMENT
            //upsServeceMap = upsServiceCodeXMLParserObj.getUPSSErviceCodeMap(Constants.SUPPLIER_XML_DIR);
            upsServeceMap = upsServiceCodeXMLParserObj.getUPSSErviceCodeMap(MultiTenancyUtil.getTenantConstants().DOCUMENTS_DIRECTORY+ "/Documents/portalsuppliers");


            try {
                if (upsServeceMap != null && upsShippingOptionID != null
                        && upsServeceMap.size() > 0) {
                    String upsService = upsShippingOptionID;
                    int mapSize = upsServeceMap.size();
                    String key = null;
                    for (int i = 0; i < mapSize; i++) {
                        key = (String) upsServeceMap.getKey(i);
                        if (upsService.equals(key)) {
                            serviceName = (String) upsServeceMap.get(i);
                        }

                    }

                }
            } catch (Exception e) {
                logger.error("exception while getting service name", e);
            }
        } catch (Exception e) {
            logger.error("exception while getting services for ups", e);
        }

        return serviceName;
    }
    public  static SequenceMap getCorporateShhippingAddress(String pOrderId) {

        SequenceMap itemMap = new SequenceMap();
        ResultSet rs=null;
        try {
            StringBuffer query = new StringBuffer(
                    "SELECT TITLE,ADDRESS,ADDRESS2,CITY,STATE,COUNTRY,ZIPCODE,PHONE_NUMBERS,FOREIGN_TYPE,C1.NAME AS NAME,R2.REGION_NAME AS REGION_NAME FROM ADDRESS A1 LEFT JOIN COUNTRIES C1 ON A1.COUNTRY=C1.COUNTRY_ID LEFT JOIN REGIONS R2 ON A1.STATE=R2.REGION_NO   WHERE  FOREIGN_TYPE='"
                            + pOrderId+"'");

            logger.info("\n\nquery.toString()"+query.toString());


            rs = QueryUtil.getResult(query.toString(),
                    new Object[] {});


            Info info = null;
            while (rs.next()) {
                info = new Info();
                info.set(FieldNames.TITLE, rs
                        .getString("TITLE"));
                info.set(FieldNames.ADDRESS, rs
                        .getString("ADDRESS"));
                info.set(FieldNames.ADDRESS2, rs
                        .getString("ADDRESS2"));
                info.set(FieldNames.CITY, rs.getString("CITY"));
                info.set(FieldNames.STATE, rs.getString("REGION_NAME"));
                info.set(FieldNames.COUNTRY, rs.getString("NAME"));
                info.set(FieldNames.ZIP_CODE, rs.getString("ZIPCODE"));
                info.set(FieldNames.PHONE_NUMBERS, rs.getString("PHONE_NUMBERS"));
                itemMap.put(FieldNames.ADDRESS, info);

            }// end while
        } catch (Exception e) {

            e.printStackTrace();
            logger.error("Exception while getting  data:", e);
        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }
        return itemMap;

    }
   
    public static SequenceMap getShippingOptionCombo() {
        SequenceMap upsServeceMap = null;
        upsServeceMap = new SequenceMap();
        upsServeceMap.put("", LanguageUtil.getString("Select"));
        upsServeceMap.put("0", LanguageUtil.getString("Other"));
        upsServeceMap.put("Warehouse Pickup", LanguageUtil.getString("Warehouse Pickup"));
        upsServeceMap.put("Fixed Shipping", LanguageUtil.getString("Fixed Shipping"));
        try {
            UPSServiceCodeXMLParser upsServiceCodeXMLParserObj = UPSServiceCodeXMLParser
                    .getInstance();

            SequenceMap upsServeceMapTemp = upsServiceCodeXMLParserObj
                    .getUPSSErviceCodeMap(MultiTenancyUtil.getTenantConstants().DOCUMENTS_DIRECTORY+ "/Documents/portalsuppliers");//ZCUB-20160719-268
            upsServeceMap.putAll(upsServeceMapTemp);
            upsServeceMapTemp.clear();
            upsServeceMapTemp = null;
        } catch (Exception e) {
            logger.error("exception while getting services for ups", e);
        }

        return upsServeceMap;
    }


    //P_CM_E_Local_Template starts
    public static SequenceMap getTemplateInfoForChoosingTemplate(boolean truncate, String hostName,String from,
                                                                 String templateId, String accessibility,HttpSession session) {

        return getTemplateInfoForChoosingTemplate(truncate,hostName,from,templateId,accessibility,false,session);
    }
    //P_CM_E_Local_Template ends

    //P_CM_E_13AUG2012 starts
    public static SequenceMap getTemplateInfoForChoosingTemplate(boolean truncate, String hostName,String from,
                                                                 String templateId, String accessibility,boolean local,HttpSession session) {
        return getTemplateInfoForChoosingTemplate(truncate, hostName, from, templateId, accessibility,local, session, null);
    }
    public static SequenceMap getTemplateInfoForChoosingTemplate(boolean truncate, String hostName,String from,
                                                                 String templateId, String accessibility,boolean local,HttpSession session,HttpServletRequest request) {
        return getTemplateInfoForChoosingTemplate(truncate, hostName, from, templateId, accessibility,local, session, request,null);
    }
    public static SequenceMap getTemplateInfoForChoosingTemplate(boolean truncate, String hostName,String from,
                                                                 String templateId, String accessibility,boolean local,HttpSession session,HttpServletRequest request,String regionaltemplate) {//P_B_CM_34128 ends

        String privilege = "";
        UserRoleMap userRoleMap	= (UserRoleMap)session.getAttribute("userRoleMap");
        if(userRoleMap.isPrivilegeIDInMap("564")){
            privilege = "564";
        }else if(userRoleMap.isPrivilegeIDInMap("764")){
            privilege = "764";
        }else if (userRoleMap.isPrivilegeIDInMap("664")){
            privilege = "664";
        }
        ArrayList<String> paramList = new ArrayList<String>();
        String searchParam = request.getParameter("searchTemplate");         //BB-20150421-322 (Top search while copy from existing template from CK editor).
        String mailSubject = "";
        StringBuffer query = new StringBuffer();
        String mailText = "";
        String folderNo = "";
        String folderName = "";
        String userNo = (String)session.getAttribute("user_no");
        String regionNo = (String)session.getAttribute("regionId");
        String userLevel = NewPortalUtils.getUserLevel(userNo);
        String franchiseeNo = NewPortalUtils.getFranchiseeNO(userNo);
        String franchiseList = "";
        boolean fromViewAll="All".equals((String)session.getAttribute("franchisee_all"));
        String franchiseOwner[] = new String[2];
        if("1".equals(userLevel))
        {
            if(fromViewAll)
            {
                franchiseOwner=CommonUtil.getFranchiseeAndOwner(request);
                franchiseList = franchiseOwner[0];
                regionNo=CommonUtil.getRegionList(franchiseOwner[1]);//P_B_CM_34128
            } else {
                franchiseList = (String)session.getAttribute("franchisee_no");
            }
        }
        if("fs".equals(from))
        {
            //query.append("SELECT DISTINCT(FMT.MAIL_TEMPLATE_ID),FMT.MODULE,FMF.FOLDER_NAME,FMT.ADDED_BY,FMT.MAIL_TITLE,FMT.FOLDER_NO,FMT.MAIL_TEXT,FMT.MAIL_SUBJECT FROM FS_LEAD_MAIL_TEMPLATES FMT  LEFT JOIN FS_LEAD_MAIL_TEMPLATES_FOLDER FMF ON FMT.FOLDER_NO=FMF.FOLDER_NO where FMT.MODULE='defaultTemplate' ");
            query.append("SELECT DISTINCT(FMT.MAIL_TEMPLATE_ID),FMT.MODULE,FMF.FOLDER_NAME,FMT.ADDED_BY,FMT.MAIL_TITLE,FMT.FOLDER_NO,FMT.MAIL_TEXT,FMT.MAIL_SUBJECT FROM FS_LEAD_MAIL_TEMPLATES FMT  LEFT JOIN FS_LEAD_MAIL_TEMPLATES_FOLDER FMF ON FMT.FOLDER_NO=FMF.FOLDER_NO WHERE 1=1 ");          //BB-20150421-322  starts
            if(StringUtil.isValidNew(searchParam))
            {
                query.append(" AND FMT.MAIL_TITLE LIKE ? ");
                paramList.add("%"+searchParam+"%");
            }
            if(StringUtil.isValidNew(request.getParameter("templateId")))
            {
                templateId = request.getParameter("templateId");
            }              //BB-20150421-322  ends
        }
        else
        {
            query.append("SELECT DISTINCT(CT.MAIL_TEMPLATE_ID),CT.ADDED_BY,CT.REGION_NO,CT.FRANCHISEE_NO, CT.MAIL_TITLE, CT.MAIL_TEXT,CT.MAIL_SUBJECT, CT.FOLDER_NO, CTF.FOLDER_NAME, CT.MODULE FROM CM_TEMPLATES CT LEFT JOIN CM_LEAD_MAIL_TEMPLATES_FOLDER CTF ON CT.FOLDER_NO = CTF.FOLDER_NO WHERE 1=1 ");
        }

        if (StringUtil.isValidNew(accessibility)){
            if ("Global".equals(accessibility)){
                query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global')) ");
            }else if("Public".equals(accessibility)) {
                if("0".equals(userLevel) || "6".equals(userLevel)){
                    query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global', 'Public') )  ");
                }else if("1".equals(userLevel)){
                    if("yes".equals(regionaltemplate))//P_B_CM_34128 starts
                    {
                        query.append(" AND TEMPLATE_ACCESSIBILITY='Public' AND CT.FRANCHISEE_NO ='0' AND  CT.REGION_NO IN ('"+regionNo+"') ");
                    }
                    else
                    {
                        query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global') OR (CT.TEMPLATE_ACCESSIBILITY='Public' AND CT.FRANCHISEE_NO IN (-1,"+franchiseList+"))) ");
                        //P_CM_E_Local_Template starts
                        if(local)
                        {
                            query.append(" AND CT.ADDED_BY IN (SELECT U.USER_NO FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO  WHERE U.USER_LEVEL=1  AND U.STATUS= '1' AND F.STATUS<>0 AND U.IS_DELETED='N' AND U.FRANCHISEE_NO='"+franchiseeNo+"' ) AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+") OR CT.FRANCHISEE_NO IS NULL) ");
                        }
                        else
                        {
                            query.append(" AND CT.ADDED_BY NOT IN (SELECT U.USER_NO FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO  WHERE U.USER_LEVEL=1  AND U.STATUS= '1' AND F.STATUS<>0 AND U.IS_DELETED='N' AND U.FRANCHISEE_NO='"+franchiseeNo+"' ) AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+",0) OR CT.FRANCHISEE_NO IS NULL)");
                        }
                        //P_CM_E_Local_Template ends
                    }//P_B_CM_34128 ends
                }else if("2".equals(userLevel)){
                    query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global') OR (CT.TEMPLATE_ACCESSIBILITY='Public' AND CT.REGION_NO="+regionNo+") ) ");
                }
            }else if("Private".equals(accessibility)){
                if ("0".equals(userLevel) || "6".equals(userLevel)){
                    if("564".equals(privilege)){
                        query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global', 'Public') OR CT.TEMPLATE_ACCESSIBILITY='Private') ");
                    }else{
                        query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global', 'Public') OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND CT.ADDED_BY="+userNo+")) ");
                    }
                }else if("1".equals(userLevel)){
                    if("yes".equals(regionaltemplate)) //P_B_CM_34128 starts
                    {
                        query.append(" AND TEMPLATE_ACCESSIBILITY='Public' AND CT.FRANCHISEE_NO ='0' AND  CT.REGION_NO IN ('"+regionNo+"') ");
                    }
                    else{

                        if("664".equals(privilege)){
                            query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global') OR (CT.TEMPLATE_ACCESSIBILITY='Public' AND CT.FRANCHISEE_NO IN (-1,"+franchiseList+")) OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND CT.ADDED_BY="+userNo+") OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND (CT.FRANCHISEE_NO="+franchiseeNo+" OR CT.FRANCHISEE_NO IS NULL) ) ) ");
                            //P_CM_E_Local_Template starts
                            if(local)
                            {
                                query.append(" AND CT.ADDED_BY IN (SELECT U.USER_NO FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO  WHERE U.USER_LEVEL=1  AND U.STATUS= '1' AND F.STATUS<>0 AND U.IS_DELETED='N' AND U.FRANCHISEE_NO='"+franchiseeNo+"' ) AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+") OR CT.FRANCHISEE_NO IS NULL) ");
                            }
                            else
                            {
                                query.append(" AND CT.ADDED_BY NOT IN (SELECT U.USER_NO FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO  WHERE U.USER_LEVEL=1  AND U.STATUS= '1' AND F.STATUS<>0 AND U.IS_DELETED='N' AND U.FRANCHISEE_NO='"+franchiseeNo+"' ) AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+",0) OR CT.FRANCHISEE_NO IS NULL) ");
                            }
                            //P_CM_E_Local_Template ends
                        }else{
                            query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global') OR (CT.TEMPLATE_ACCESSIBILITY='Public' AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+") OR CT.FRANCHISEE_NO IS NULL)) OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND CT.ADDED_BY="+userNo+")) ");
                            //P_CM_E_Local_Template starts
                            if(local)
                            {
                                query.append(" AND CT.ADDED_BY IN (SELECT U.USER_NO FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO  WHERE U.USER_LEVEL=1  AND U.STATUS= '1' AND F.STATUS<>0 AND U.IS_DELETED='N' AND U.FRANCHISEE_NO='"+franchiseeNo+"' ) AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+") OR CT.FRANCHISEE_NO IS NULL) ");
                            }
                            else
                            {
                                query.append(" AND CT.ADDED_BY NOT IN (SELECT U.USER_NO FROM USERS U LEFT JOIN FRANCHISEE F ON U.FRANCHISEE_NO=F.FRANCHISEE_NO  WHERE U.USER_LEVEL=1  AND U.STATUS= '1' AND F.STATUS<>0 AND U.IS_DELETED='N' AND U.FRANCHISEE_NO='"+franchiseeNo+"' ) AND (CT.FRANCHISEE_NO IN (-1,"+franchiseList+",0) OR CT.FRANCHISEE_NO IS NULL)");
                            }
                            //P_CM_E_Local_Template ends
                        }
                        //P_B_CM_34128 ends
                    }
                }else if("2".equals(userLevel)){
                    if("764".equals(privilege)){
                        query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global') OR (CT.TEMPLATE_ACCESSIBILITY='Public' AND CT.REGION_NO="+regionNo+") OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND CT.ADDED_BY="+userNo+") OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND CT.REGION_NO="+regionNo+") ) ");
                    }else{
                        query.append(" AND (CT.TEMPLATE_ACCESSIBILITY IS NULL OR CT.TEMPLATE_ACCESSIBILITY IN ('Global') OR (CT.TEMPLATE_ACCESSIBILITY='Public' AND CT.REGION_NO="+regionNo+") OR (CT.TEMPLATE_ACCESSIBILITY='Private' AND CT.ADDED_BY="+userNo+")) ");
                    }
                }
            }
        }
        if (StringUtil.isValidNew(templateId))
        {
            query.append(" AND MAIL_TEMPLATE_ID = " + templateId);
        }
        if("fs".equals(from))
        {
            query.append(" ORDER BY FMF.FOLDER_NAME, FMT.MODULE");
        }
        else
        {
            query.append(" ORDER BY CTF.FOLDER_NAME, CT.MODULE ");
        }

        SequenceMap graphicalTemplateMap = new SequenceMap();
        Info info = new Info();
        String mailTemplateIds = "";
        String module = "";
        ResultSet result=null;
        try {
            result = QueryUtil.getResult(query.toString(), paramList.toArray(new String[paramList.size()]));
            while (result.next()) {
                info = new Info();
                mailSubject = result.getString("MAIL_SUBJECT");
                mailText = result.getString("MAIL_TEXT");
                if (truncate && mailSubject.length() > 45) {
                    mailSubject = mailSubject.substring(0, 45);
                    mailSubject += "...";
                }

                folderNo = result.getString("FOLDER_NO");
                module = result.getString("MODULE");
                if(StringUtil.isValidNew(folderNo) && !"0".equals(folderNo)) {
                    folderName = result.getString("FOLDER_NAME");
                }
                else if ("defaultTemplate".equals(module) && (!StringUtil.isValidNew(folderNo) || "0".equals(folderNo))){
                    folderName = "Sample Templates";
                }else {
                    folderName = "General";
                }
                info.set("mailTemplateId", result.getString("MAIL_TEMPLATE_ID"));
                info.set("folderName", folderName);
                info.set("mailSubject", mailSubject);
                info.set("mailText", getTemplateText(mailText, hostName,from));
                info.set(FieldNames.MAIL_TITLE, result.getString("MAIL_TITLE"));
                if(!"fs".equals(from))
                {
                    info.set(FieldNames.ADDED_BY, result.getString("ADDED_BY"));
                    info.set(FieldNames.REGION_NO, result.getString("REGION_NO"));
                    info.set(FieldNames.FRANCHISEE_NO, result.getString("FRANCHISEE_NO"));
                }
                mailTemplateIds = mailTemplateIds+result.getString("MAIL_TEMPLATE_ID")+",";
                graphicalTemplateMap.put(result.getString("MAIL_TEMPLATE_ID"),info);

            }
        } catch (Exception e) {
            logger.error("Exceptation in CMTemplateDAO Class in getTemplateInfo() Method 3 :::" +e.getMessage());
            logger.info("Exception in getTemplateInfo()  :" + e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }

        graphicalTemplateMap.put("mailTemplateIds", mailTemplateIds);
        return graphicalTemplateMap;
    }


    public static String getTemplateText(String TemplateText, String hostName,String from) { //BB-20150421-324

        try {
            if("fs".equals(from))
            {
                if (TemplateText.indexOf("src=\"canned/") != -1) {

                    if (!hostName.endsWith("/"))
                        hostName = hostName + "/";

                    TemplateText = TemplateText.replaceAll("src=\"canned",
                            "src=\"" + hostName + "static" + Constants.STATIC_KEY
                                    + "/images/canned");
                }
            }
            else if (TemplateText.indexOf("src=\"images/canned") != -1) {

                if (!hostName.endsWith("/"))
                    hostName = hostName + "/";

                TemplateText = TemplateText.replaceAll("src=\"images/canned",
                        "src=\"" + hostName + "static" + Constants.STATIC_KEY
                                + "/images/canned");
            }
        } catch (Exception e) {
            logger.info("Exception in getTemplateText() :" + e);
        }
        return TemplateText;
    }
    //P_CM_E_13AUG2012 ends
 
    public static  void insertInStartupAddressTable(ArrayList details,String userNo,String theaterId)
    {
        try
        {
            String STARTUP_ID="",DATE="",ADDRESS="",CITY="",STATE="",ZIP="",COUNTRY="",STATUS_FLAG="",ADDRESS_TITEL="",FRANCHISEE_NO="",THEATER_ID=null;
            if(details!=null)
            {
                ADDRESS =	(String)details.get(1);
                CITY =	(String)details.get(2);
                STATE = (String)details.get(3);
                ZIP = (String)details.get(4);
                STATE=RegionMgr.newInstance().getRegionsDAO().getStateIdByName(STATE);
                COUNTRY = RegionMgr.newInstance().getRegionsDAO().getCountryIDFromStateID(STATE);
                FRANCHISEE_NO=PortalUtils.getFranchiseeNo(userNo);
                STARTUP_ID	= IDGenerator.getNextKey("STARTUP_ADDRESS_SCH", "STARTUP_ID");
            }

            if(StringUtil.isValid(theaterId))
            {
                THEATER_ID=theaterId;
                FRANCHISEE_NO=userNo;
            }

            StringBuffer queryins_status = new StringBuffer(
                    "INSERT INTO STARTUP_ADDRESS_SCH(STARTUP_ID,USER_NO,DATE,ADDRESS,CITY,STATE,ZIP,COUNTRY,STATUS_FLAG,ADDRESS_TITEL,FRANCHISEE_NO,THEATER_ID)VALUES(?,?,NOW(),?,?,?,?,?,?,?,?,?) ");
            String params[] = {STARTUP_ID,userNo, ADDRESS, CITY, STATE,ZIP,COUNTRY,"Default","Default Address",FRANCHISEE_NO,THEATER_ID};
            QueryUtil.update(queryins_status.toString(), params);

        } catch (Exception e)
        {
            logger.error("Exception in insertInStartupAddressTable() Method :::" +e.getMessage());
        }
    }

    // P_E_ManageSupplierCategories Starts
    /**
     * Method gives audit history of categories changed at admin>suppliers>mange category
     * @param categoryID
     * @return
     */
    public static  SequenceMap getDataAuditInfo(String categoryID) {
        SequenceMap sMap = null;
        ResultSet result = null;
        try {

            sMap = new SequenceMap();
            Info info = null;
            StringBuffer query = new StringBuffer("SELECT CATEGORY_ID,CHANGED_FROM,CHANGED_TO,CHANGED_BY,CHANGED_ON FROM CATEGORY_AUDIT_HISTORY ");
            query.append(" WHERE CATEGORY_ID="+categoryID+" ORDER BY CHANGED_ON DESC ");


            logger.info("\n\n QUERY : " + query.toString());
            result = QueryUtil.getResult(query.toString(),
                    null);
            int i=0;
            while (result.next()) {
                info = new Info();
                info.set("CATEGORY_ID", result.getString("CATEGORY_ID"));
                info.set("CHANGED_FROM", result.getString("CHANGED_FROM"));
                info.set("CHANGED_TO", result.getString("CHANGED_TO"));
                info.set("CHANGED_BY", result.getString("CHANGED_BY"));
                info.set("CHANGED_ON", result.getString("CHANGED_ON"));

                sMap.put(i, info);
                i++;

            }
            if (result != null) {
                result = null;
            }

        } catch (Exception e) {
            logger.error("Exception in getDataAuditInfo===" + e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return sMap;
    }




    public static void insertauditCategory(String supplierNo,String currentTime,String userNo, String changeFrom,String supplierCategoryName)
    {

        StringBuffer query = new StringBuffer();
        query =  new StringBuffer("INSERT INTO CATEGORY_AUDIT_HISTORY (CATEGORY_ID,CHANGED_FROM,CHANGED_TO,CHANGED_BY,CHANGED_ON)");
        query.append(" VALUES(?,?,?,?,?)");

        try{
            QueryUtil.update(query.toString(), new String[]{supplierNo,changeFrom,supplierCategoryName,userNo,currentTime});

        }
        catch(Exception e)
        {
            logger.info("Exception in insertauditCategory()  :" + e);
        }
    }
    // P_E_ManageSupplierCategories ends
    
    public static String getComboForVendors(String comboName, String selected) {

        StringBuffer combo = new StringBuffer();

        Info typeInfo = null;

        if (selected == null || selected.equals(""))
            selected = "-1";

        combo.append("<select name=\'" + comboName + "\' class=multiList>");

        if (selected.equals("-1"))
            combo.append("<option value=\"-1\" selected>"+LanguageUtil.getString("Select")+"</option>");
        else
            combo.append("<option value=\"-1\">"+LanguageUtil.getString("Select")+"</option>");

        typeInfo = CommonMgr.newInstance().getCommonSupplierDAO().getAllVendorsNames();

        String key = null;
        for (Iterator itInfo = typeInfo.getKeySetIterator(); itInfo.hasNext();) {

            key = (String) itInfo.next();
            combo.append("<option value=" + key);
            if (key.equals(selected))
                combo.append(" selected");
            combo.append(" >" + (String) typeInfo.getObject(key) + "</option>");
        }
        combo.append("</select>");
        return combo.toString();

    }

  //ZCUB-20150921-181 start
    public static String getComboForSupplier(String comboName, String selected) {

        StringBuffer combo = new StringBuffer();

        Info typeInfo = null;

        if (selected == null || selected.equals(""))
            selected = "-1";

        combo.append("<select name=\'" + comboName + "\' class=multiList>");

        if (selected.equals("-1"))
            combo.append("<option value=\"-1\" selected>"+LanguageUtil.getString("Select")+"</option>");
        else
            combo.append("<option value=\"-1\">"+LanguageUtil.getString("Select")+"</option>");

        typeInfo = CommonMgr.newInstance().getCommonSupplierDAO().getAllSupplierNames();

        String key = null;
        for (Iterator itInfo = typeInfo.getKeySetIterator(); itInfo.hasNext();) {

            key = (String) itInfo.next();
            combo.append("<option value=" + key);
            if (key.equals(selected))
                combo.append(" selected");
            combo.append(" >" + (String) typeInfo.getObject(key) + "</option>");
        }
        combo.append("</select>");
        return combo.toString();

    }
  //ZCUB-20150921-181 ends
    /**
     * This function is used to delete the documents from the main table which is added as a field.
     * BB-20150203-259 (Add Document as field for positioning)
     * @param request
     * @param idFldValue
     * @param primaryColumn
     */
    public static void deleteDocumentFromMainTable(HttpServletRequest request, String idFldValue, String primaryColumn) {
        String tableName = request.getParameter("tableName");
        String dbColName = request.getParameter("dbColName");
        String leadID = request.getParameter("leadID");
        if(StringUtil.isValidNew(tableName) && StringUtil.isValidNew(dbColName)) {
            String query = "UPDATE "+tableName+" SET "+dbColName+" = NULL WHERE "+primaryColumn+" = "+idFldValue;
            try {
                QueryUtil.update(query, null);
                //deleteDocument(request);
            } catch (Exception e) {
                // TODO: handle exception
                logger.info("Exception in deleteDocumentFromMainTable======>>"+e);
            }
        }
    }

    /**
     * This function is used to delete the document from the file system.
     * BB-20150203-259 (Add Document as field for positioning)
     * @param request
     */
    public static void deleteDocument(HttpServletRequest request) {
        String module = request.getParameter("module");
        String docName = request.getParameter("docName");
        String directory = MultiTenancyUtil.getTenantConstants().DOCUMENTS_DIRECTORY+"/Documents/FS_DOCUMENTS/";
        if("fim".equals(module)) {
            directory = MultiTenancyUtil.getTenantConstants().DOCUMENTS_DIRECTORY+"/Documents/FIM_DOCUMENTS/";
        }else if("cm".equals(module)){//EXTERNAL_FORM_BUILDER : START
        	directory = (String) MultiTenancyUtil.getSysVarMgr().getSystemVariable("base_url")+"/Documents/"+request.getParameter("tableName").trim()+"/";
        } else if("site".equals(module)) { //P_Enh_Site_Clearance starts
            directory = MultiTenancyUtil.getTenantConstants().DOCUMENTS_DIRECTORY+"/Documents/SITE_DOCUMENTS/";
        } //P_Enh_Site_Clearance ends
        else if("contactHistory".equals(module)) {
            directory = MultiTenancyUtil.getTenantConstants().DOCUMENTS_DIRECTORY+"/Documents/CONTACT_HISTORY_DOCUMENTS/";
        }
        
        //EXTERNAL_FORM_BUILDER : END
        String filePath = directory + docName;
        File file=new File(filePath);
        if(file.exists()) {
            boolean filedelete = file.delete();
            if(filedelete) {
                logger.info(docName+"(File) deleted successfully");
            } else {
                logger.info(docName+"(File)  not deleted successfully");
            }
        } else {
            logger.info(docName+"(File)  does not exist in "+directory);
        }
    }

    //method to get attachment details.
    public static String[] getAttachInfo(String fileNo)
    {
        String attachInfo[] = new String[2];
        String query = "SELECT ATTACHMENT_NAME,FILE_SAVE_NAME FROM ALERTS_ATTACHMENT WHERE ATTACHMENT_NO=" + fileNo;
        ResultSet result=null;
        try{
            result = QueryUtil.getResult(query,null);
            if(result.next())
            {
                attachInfo[0]=result.getString("ATTACHMENT_NAME");
                attachInfo[1]=result.getString("FILE_SAVE_NAME");
            }
        }
        catch(Exception e)
        {
            logger.error(e);
        }finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return attachInfo;
    }
   
    public static String getRegionList(String userList)
    {
        String regionList="";
        String owner[]=userList.split(",");
        for(String str:owner)
        {
            if(FieldNames.EMPTY_STRING.equals(regionList))
                regionList=AdminMgr.newInstance().getUsersDAO().getAreaID(str);
            else
                regionList+=","+AdminMgr.newInstance().getUsersDAO().getAreaID(str);
        }
        return regionList;
    }
    /**
     * returns an array of franchiseeNo and userNo in case of franchisee User login and all option selected
     * @param request
     * @return String[]
     */
    public static String[] getFranchiseeAndOwner(HttpServletRequest request)
    {
        String franchiseeOwner[]=new String[2];
        HttpSession session=request.getSession();
        String menuName = (((String) session.getAttribute(FieldNames.MENU_NAME)) == null) ? MultiTenancyUtil.getTenantConstants().DEFAULT_MODULE : ((String) session.getAttribute(FieldNames.MENU_NAME));////P_B_26486
        ArrayList list=(ArrayList)session.getAttribute("FranchiseeNoList");

        if("ppc".equals(menuName)){//P_B_26486
            list = (ArrayList)session.getAttribute("FranchiseeNoListAll");
        }

        String franchiseList="";
        try {
            if("All".equals((String)session.getAttribute("franchisee_all"))&&list!=null) {
                for(Object obj:list) {
                    if("All".equals(obj.toString())) {
                        continue;
                    }
                    else if("".equals(franchiseList)) {
                        franchiseList=obj.toString();
                    }
                    else {
                        franchiseList+=","+obj.toString();
                    }
                }

            }
        } catch(Exception e) {
            logger.error("Exception in getFranchiseeAndOwner", e);
        }

        franchiseeOwner[0] = franchiseList;
        franchiseeOwner[1] = (String)request.getSession().getAttribute("user_no");
        return franchiseeOwner;
    }
    /**
     * Returns comma seperated List of FranchiseeNo in case of franchisee user with all option selected
     * @param userList
     * @return String
     */
    public static String getFranchiseeList(String userList)
    {
        String franchiseeList=FieldNames.EMPTY_STRING;
        String users[]=userList.split(",");
        try{
            for(int i=0;i<users.length;i++)
            {
                if(!StringUtil.isValid(franchiseeList))
                {
                    franchiseeList=PortalUtils.getFranchiseeNo(users[i]);
                }
                else
                {
                    franchiseeList+=","+PortalUtils.getFranchiseeNo(users[i]);
                }
            }
        }
        catch(Exception e)
        {
            logger.error("Exception inside getFranchiseeList", e);
        }
        return franchiseeList;
    }
    /**
     * Returns franchiseeNo for reports to be displayed in case of franchisee user login with all option selectyed
     * @param request
     * @param userLevel
     * @param ownerIdcsv
     * @return String
     */
    public static String getFranchiseeNoForReports(HttpServletRequest request,String userLevel,String ownerIdcsv)
    {
        String franchiseeNo=FieldNames.EMPTY_STRING;
        String franchiseOwner[] = new String[2];
        HttpSession session = request.getSession();
        boolean fromViewAll="All".equals((String)session.getAttribute("franchisee_all"));
        //MUID_PRODUCT_BUG starts
        //P_B_CM_24335 starts
        boolean isUserMUID = "yes".equals((String)session.getAttribute("select_all"));
        if(isUserMUID){
            if(fromViewAll){
                franchiseOwner=CommonUtil.getFranchiseeAndOwner(request);
                franchiseeNo=franchiseOwner[0];
            }else {
                franchiseeNo = (String)session.getAttribute("franchisee_all");
            }
        }else {
            franchiseeNo = (String)session.getAttribute("franchisee_no");
        }
        //P_B_CM_24335 ends
        //MUID_PRODUCT_BUG ends
        return franchiseeNo;
    }

    public static String getComboForFranchiseeName(String comboName, String selected,String multiple,String onChange,String defaultOptionName,String showCorporateUser,HttpServletRequest request,String cssName,String style){
        return getComboForFranchiseeName(comboName, selected, multiple, onChange, defaultOptionName, showCorporateUser, request, cssName, style, null);
    }
    public static String getComboForFranchiseeName(String comboName, String selected,String multiple,String onChange,String defaultOptionName,String showCorporateUser,HttpServletRequest request,String cssName,String style,String classForCombo){
        return getComboForFranchiseeName(comboName, selected, multiple, onChange, defaultOptionName, showCorporateUser, request, cssName, style, classForCombo,false);
    }
    //ZCUB-20140226-004-overloaded for class-name
    public static String getComboForFranchiseeName(String comboName, String selected,String multiple,String onChange,String defaultOptionName,String showCorporateUser,HttpServletRequest request,String cssName,String style,String classForCombo,boolean inDevelopment){
        String comboClass=null;
        String userLevel= (String)request.getSession().getAttribute("user_level");
        if (cssName != null && cssName.equals("addTskinput") ) {

            comboClass="multiList";

            comboClass="addTskinput";
        }
        else if("filterlist".equals(cssName))       //P_B_CT_41454
        {
            comboClass  = "\"form-control\""; //BB-20140303-019
        }
        else {
            comboClass  = "dropdown_list";//P_B_CM_4921 added by neeti
        }

        if(StringUtil.isValid(classForCombo))//added for ZCUB-20140226-004
            comboClass  = classForCombo;

        String value ="Select Franchisee ID";  // modified by Prabhat
        if(request!=null){
            value = LanguageUtil.getString("Select Franchisee ID",(String)request.getSession().getAttribute("userLanguage"));
        }
        if(multiple != null && !multiple.equals("") && multiple.trim().equals("multiple")){
            value = LanguageUtil.getString("Select All",(String)request.getSession().getAttribute("userLanguage"));

        }

        String fran_ID[]=selected.split(",") ;

        //Added By Pratap	

        if(StringUtil.isValid(defaultOptionName)){

        }
        StringBuffer combo=new StringBuffer();
        Info sourceInfo = new Info();
			/*
			 * Ref:71BBCME01
			 * added id attribute
			 */
        if(StringUtil.isValid(style))
            combo.append("<select name=\'"+comboName+"\' id=\'"+comboName+"\' style=\""+style+"\"");  // P_B_CT_6814 modified by Prabhat
        else
            combo.append("<select name=\'"+comboName+"\' id=\'"+comboName+"\' style=\"width:172px;\"");  // P_B_CT_6814 modified by Prabhat
        if(multiple != null && multiple.trim().equals("multiple")){
            combo.append(" multiple size = '5' ");
        }
        combo.append(" class="+comboClass);

        if (onChange != null && !onChange.equals(""))
        {
            combo.append("  ONCHANGE=").append(onChange);
        }
        //Added By Mukesh Singla. 
        combo.append(">");
        if(!("0".equals(value)) && !("1".equals(value))){
            if(selected.equals("-1") || fran_ID[0].equals("-1"))
                combo.append("<option value=\"-1\" selected>"+value+"</option>");
            else
                combo.append("<option value=\"-1\">"+value+"</option>");
        }
        //Added By Mukesh Singla.
        if(showCorporateUser!=null && showCorporateUser.trim().equalsIgnoreCase("showCorporateUser"))
        {
            combo.append("<option value=\"showCorporateUser\">"+LanguageUtil.getString("Corporate Users")+"</option>");
        }
        //End.


        // modified by binu
        sourceInfo = AdminMgr.newInstance().getStoreDAO().getFranchisees("1,3",null,inDevelopment);
        //Deconet-20121211-772 by Ravi Kumar
        if("2".equals(userLevel)){
            String regionId			= (String)request.getSession().getAttribute("regionId");
            if(StringUtil.isValidNew(regionId))
                sourceInfo = AdminMgr.newInstance().getStoreDAO().getFranchiseeForRegion(regionId);
        }//Deconet-20121211-772 by Ravi Kumar
        boolean fromViewAll="All".equals((String)request.getSession().getAttribute("franchisee_all"));
        String franchiseOwner[] = new String[2];
        franchiseOwner=CommonUtil.getFranchiseeAndOwner(request);
        if("1".equals(userLevel) && fromViewAll){
            String user_no = (String)request.getSession().getAttribute("user_no");
            sourceInfo=CommonUtil.getFranchiseeForMU(franchiseOwner[0],null);
        }
        
      //DIV_USER_CHANGES starts
        if (userLevel != null && Constants.USER_LEVEL_DIVISION.equals(userLevel) ) {
        				String divisionIds = (String)request.getSession().getAttribute("divisionIds");
        				sourceInfo=null;
        				//String str=DivisionUtil.getAllDivisionFranchiseeNos(divisionIds);
        				sourceInfo=(Info)DivisionUtil.getDivisionFranchiseeInfo(divisionIds);
        				//sourceInfo=NewPortalUtils.getInfoFromSequenceMap(resultMap);
       }
      //DIV_USER_CHANGES ends
        for(Iterator itInfo = sourceInfo.getKeySetIterator();itInfo.hasNext();){

            String key = (String)itInfo.next();

            combo.append("<option value="+key);
            for(int j=0;j<fran_ID.length;j++){
                if(key.equals(fran_ID[j]))
                    combo.append(" selected");}
            combo.append(" >"+(String)sourceInfo.getObject(key)+"</option>");
        }
        combo.append("</select>");
        return combo.toString();


    }

    public static boolean checkDuplicateCsv(String tablename,String columnname,String valKeys)
    {
        boolean duplicateflag = false;
        ResultSet result=null;
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(columnname);
        query.append(" FROM "+tablename);
        query.append(" WHERE "+columnname+"='");
        query.append(valKeys+"'");
        query.append(" OR ");
        query.append(columnname+" LIKE '"+"%,"+valKeys+"'" );
        query.append(" OR ");
        query.append(columnname+" LIKE '"+valKeys+",%'" );
        query.append(" OR ");
        query.append(columnname+" LIKE '"+"%,"+valKeys+",%'" );

        try
        {
            result = QueryUtil.getResult(query.toString(),null);

            if (result!= null && result.next())
            {
                duplicateflag = true;
            }
        }
        catch (Exception e)
        {
            logger.error("Exception in checkDuplicateCsv() Method :::" ,e);
        }
        finally {
            if(result != null){
                result.release();
                result = null;
            }
        }
        return duplicateflag;
    }

    public static boolean ppcMappedFranchiseUser(String franchiseNo)
    {
        boolean mapped = false ;
        StringBuilder query = new StringBuilder("") ;
        query.append("SELECT F.FRANCHISEE_NO FROM FRANCHISEE F");
        query.append(" JOIN ADWORDS_ACCOUNTS_MAPPING AAM ON F.FRANCHISEE_NO=AAM.FRANCHISE_NO");
        query.append(" LEFT JOIN ADWORDS_ADGROUP ADG ON AAM.ACCOUNT_ID = ADG.ACCOUNT_ID");
        query.append(" WHERE 1=1");
        query.append(" AND F.FRANCHISEE_NO  = "+franchiseNo);
        query.append(" GROUP BY F.FRANCHISEE_NO");

        ResultSet result= null;
        try{
            result	= QueryUtil.getResult(query.toString(), null);
            if(result!=null && result.next())
            {
                mapped = true ;
            }
        }catch(Exception e){
            logger.error("Exception in  in ppcMappedFranchiseUser ",e);
        } finally {
            if(result != null) {
                result.release();
            }
        }

        return mapped ;
    }

    /**
     * TastiDLite-20120602-523
     *
     * @author Vivek Maurya
     * @date 12Jun2012
     * @param name, name of the combo.
     * @param selectDefault
     * @param onChangeFun, JS function to be called on onChange
     * @return String, monthCombo
     */
    public static String getMonthCombo(String name, boolean selectDefault, String onChangeFun) {

        StringBuffer month = new StringBuffer();

        if(StringUtil.isValid(name)) {
            month.append("<select name ='").append(name).append("' id='").append(name);
            month.append("' class='multiList' ");

            if(StringUtil.isValid(onChangeFun)) {
                month.append("onChange=javascript:").append(onChangeFun);
            }
            month.append(">");

            if(selectDefault) {
                month.append("<option value ='-1' selected>");
            }
            else {
                month.append("<option value ='-1'>");
            }
            month.append(LanguageUtil.getString("Month")).append("</option>");

            for(int count = 0;count<12;count++) {
                month.append("<option value=").append(count).append(">");
                month.append(LanguageUtil.getString(monthNames[count])).append("</option>");
            }

            month.append("</select>");
        }
        else {
            throw new IllegalArgumentException("name of combo can not be null");
        }

        return month.toString();
    }


    /**
     * TastiDLite-20120602-523
     *
     * @author Vivek maurya
     * @date 12Jun2012
     * @param name, name of the date combo
     * @param selectDefault
     * @param month, to populate dateCombo with dates of given month
     * @return String, dateCombo
     */
    public static String getDateCombo(String name,boolean selectDefault,int month) {
        StringBuffer date = new StringBuffer();

        int limit=32;

        if(month==1){
            limit=30;
        }
        if(month==3||month==5||month==8||month==10){
            limit=31;
        }

        if(StringUtil.isValid(name)) {
            date.append("<select name ='").append(name).append("' id='").append(name);
            date.append("' class='multiList' >");

            if(selectDefault) {
                date.append("<option value ='-1' selected>");
            }
            else {
                date.append("<option value ='-1'>");
            }
            date.append(LanguageUtil.getString("Date")).append("</option>");


            for(int count = 1;count<limit;count++) {
                date.append("<option value=").append(count).append(">");
                if(count<10) {
                    date.append(FieldNames.ZERO);
                }
                date.append(count);
                date.append("</option>");
            }
            date.append("</select>");
        }
        else {
            throw new IllegalArgumentException("name of date combo can not be null");
        }

        return date.toString();
    }

    /**
     * TastiDLite-20120602-523
     *
     * This method returns where query for birth date filters.
     *
     * @author Vivek Maurya
     * @date 12Jun2012
     * @param request
     * @param birthdayDBColumn: name of birth date column
     * @return StringBuffer, where query
     */
    public static StringBuffer getBirthDate(HttpServletRequest request,String birthdayDBColumn)
    {
        String matchType="matchType10";
        String monthParam="anniversaryMonth";
        String dateParam="anniversaryDate";
        if("C.BIRTHDATE".equals(birthdayDBColumn))
        {
            matchType="matchType9";
            monthParam="birthMonth";
            dateParam="birthDate";
        }


        if("74".equals(request.getParameter(matchType)))//Before
        {
            int fromMonth = StringUtil.isValidNew(request.getParameter(monthParam+"2"))? Integer.parseInt(request.getParameter(monthParam+"2"))+1:-1;
            int fromDate = StringUtil.isValidNew(request.getParameter(dateParam+"2"))? Integer.parseInt(request.getParameter(dateParam+"2")):-1;

            return getWhereQueryForSingleDate(74,fromMonth,fromDate,birthdayDBColumn);
        }
        else if("75".equals(request.getParameter(matchType)))//Is Between
        {
            int fromMonth = StringUtil.isValidNew(request.getParameter(monthParam+"1"))? Integer.parseInt(request.getParameter(monthParam+"1"))+1:-1;
            int fromDate = StringUtil.isValidNew(request.getParameter(dateParam+"1"))? Integer.parseInt(request.getParameter(dateParam+"1")):-1;

            int toMonth = StringUtil.isValidNew(request.getParameter(monthParam+"22"))? Integer.parseInt(request.getParameter(monthParam+"22"))+1:-1;
            int toDate = StringUtil.isValidNew(request.getParameter(dateParam+"22"))? Integer.parseInt(request.getParameter(dateParam+"22")):-1;

            return getWhereQueryForMultipleDates(75,fromMonth,fromDate,toMonth,toDate,birthdayDBColumn);

        }
        else if("76".equals(request.getParameter(matchType)))//On
        {
            int fromMonth = StringUtil.isValidNew(request.getParameter(monthParam+"2"))? Integer.parseInt(request.getParameter(monthParam+"2"))+1:-1;
            int fromDate = StringUtil.isValidNew(request.getParameter(dateParam+"2"))? Integer.parseInt(request.getParameter(dateParam+"2")):-1;

            return getWhereQueryForSingleDate(76,fromMonth,fromDate,birthdayDBColumn);
        }
        else if("77".equals(request.getParameter(matchType)))//Today
        {
            Calendar simpleCalendar = Calendar.getInstance();
            int month = simpleCalendar.get(simpleCalendar.MONTH)+1;
            int date = simpleCalendar.get(simpleCalendar.DAY_OF_MONTH);

            return getWhereQueryForSingleDate(77,month,date,birthdayDBColumn);
        }
        else if("78".equals(request.getParameter(matchType)))//Tomorrow
        {
            Calendar tomorrowCalendar = Calendar.getInstance();
            tomorrowCalendar.add(Calendar.DAY_OF_MONTH, 1);
            int month = tomorrowCalendar.get(tomorrowCalendar.MONTH)+1;
            int date = tomorrowCalendar.get(tomorrowCalendar.DAY_OF_MONTH);

            return getWhereQueryForSingleDate(78,month,date,birthdayDBColumn);
        }
        else if("79".equals(request.getParameter(matchType)))//Next 7 days
        {
            Calendar simpleCalendar = Calendar.getInstance();
            Calendar next7daysCalendar = Calendar.getInstance();
            next7daysCalendar.add(Calendar.DAY_OF_MONTH, 7);
            int fromMonth = simpleCalendar.get(simpleCalendar.MONTH)+1;
            int fromDate = simpleCalendar.get(simpleCalendar.DAY_OF_MONTH);

            int toMonth = next7daysCalendar.get(next7daysCalendar.MONTH)+1;
            int toDate = next7daysCalendar.get(next7daysCalendar.DAY_OF_MONTH);

            return getWhereQueryForMultipleDates(79,fromMonth,fromDate,toMonth,toDate,birthdayDBColumn);
        }
        else if("80".equals(request.getParameter(matchType)))//Current Month
        {
            Calendar simpleCalendar = Calendar.getInstance();
            int fromMonth = simpleCalendar.get(simpleCalendar.MONTH)+1;
            int fromDate = 1;

            int toMonth = fromMonth;
            int toDate = simpleCalendar.getActualMaximum(simpleCalendar.DAY_OF_MONTH);

            return getWhereQueryForMultipleDates(80,fromMonth,fromDate,toMonth,toDate,birthdayDBColumn);
        }
        else if("81".equals(request.getParameter(matchType)))//Next 30 days
        {
            Calendar simpleCalendar = Calendar.getInstance();
            Calendar next30daysCalendar = Calendar.getInstance();
            next30daysCalendar.add(Calendar.DAY_OF_MONTH, 30);
            int fromMonth = simpleCalendar.get(simpleCalendar.MONTH)+1;
            int fromDate = simpleCalendar.get(simpleCalendar.DAY_OF_MONTH);

            int toMonth = next30daysCalendar.get(next30daysCalendar.MONTH)+1;
            int toDate = next30daysCalendar.get(next30daysCalendar.DAY_OF_MONTH);

            return getWhereQueryForMultipleDates(81,fromMonth,fromDate,toMonth,toDate,birthdayDBColumn);
        }
        else if("82".equals(request.getParameter(matchType)))//Next Month
        {
            Calendar nextMonthCalendar = Calendar.getInstance();
            nextMonthCalendar.add(Calendar.MONTH, 1);
            int fromMonth = nextMonthCalendar.get(nextMonthCalendar.MONTH)+1;
            int fromDate = 1;

            int toMonth = fromMonth;
            int toDate = nextMonthCalendar.getActualMaximum(nextMonthCalendar.DAY_OF_MONTH);

            return getWhereQueryForMultipleDates(82,fromMonth,fromDate,toMonth,toDate,birthdayDBColumn);
        }
        else if("83".equals(request.getParameter(matchType)))//Next 3 Months
        {

            Calendar simpleCalendar = Calendar.getInstance();
            Calendar next3MonthsCalendar = Calendar.getInstance();
            next3MonthsCalendar.add(Calendar.MONTH, 3);
            int fromMonth = simpleCalendar.get(simpleCalendar.MONTH)+1;
            int fromDate = simpleCalendar.get(simpleCalendar.DAY_OF_MONTH);

            int toMonth = next3MonthsCalendar.get(next3MonthsCalendar.MONTH)+1;
            int toDate = next3MonthsCalendar.get(next3MonthsCalendar.DAY_OF_MONTH);

            return getWhereQueryForMultipleDates(83,fromMonth,fromDate,toMonth,toDate,birthdayDBColumn);
        }
        return null;
    }

    /**
     * TastiDLite-20120602-523
     *
     * This method returns where query for Before,On,Today and Tomorrow date filters
     * @author Vivek Maurya
     * @date 12Jun2012
     * @param whichQuery, {74=Before,76=On,77=Today,78=Tomorrow}
     * @param fromMonth, 1 to 12
     * @param fromDate, 1 to 31
     * @param birthdayDBColumn, name of birthday column
     * @return StringBuffer, where Query
     */
    public static StringBuffer getWhereQueryForSingleDate(int whichQuery,int fromMonth,int fromDate,String birthdayDBColumn)
    {
        if(fromMonth == -1 && fromDate == -1) {
            return null;
        }

        StringBuffer whereQuery = new StringBuffer();

        if(whichQuery == 74)//Before
        {
            whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
            if(fromMonth == -1) {
                whereQuery.append(" AND (DAYOFMONTH(").append(birthdayDBColumn).append(")<").append(fromDate).append(") ");
            }
            else if(fromDate == -1) {
                whereQuery.append(" AND (MONTH(").append(birthdayDBColumn).append(")<").append(fromMonth).append(") ");
            }
            else {
                whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")<").append(fromMonth).append(") OR (");
                whereQuery.append("MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(" AND ");
                whereQuery.append("DAYOFMONTH(").append(birthdayDBColumn).append(")<").append(fromDate).append(")) ");
            }
        }
        else if(whichQuery == 76)//On
        {
            whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
            if(fromMonth == -1) {
                whereQuery.append(" AND (DAYOFMONTH(").append(birthdayDBColumn).append(")=").append(fromDate).append(") ");
            }
            else if(fromDate == -1) {
                whereQuery.append(" AND (MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(") ");
            }
            else {
                whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(" AND ");
                whereQuery.append(" DAYOFMONTH(").append(birthdayDBColumn).append(")=").append(fromDate).append(")) ");
            }
        }
        else if(whichQuery == 77 || whichQuery == 78)//Today,Tomorrow
        {
            whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
            whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(" AND ");
            whereQuery.append(" DAYOFMONTH(").append(birthdayDBColumn).append(")=").append(fromDate).append(")) ");
        }
        return whereQuery;
    }

    public static StringBuffer getWhereQueryForNextThreeMonths(int whichQuery,int fromMonth,int toMonth,int middleMonth,String birthdayDBColumn) {
        StringBuffer whereQuery = new StringBuffer();
        whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
        whereQuery.append(" AND ");
        whereQuery.append(" (MONTH(").append(birthdayDBColumn).append(") = ").append(fromMonth).append(" OR MONTH(").append(birthdayDBColumn).append(") = ").append(middleMonth).append(" OR MONTH(").append(birthdayDBColumn).append(") = ").append(toMonth).append(") ");
        return whereQuery;
    }

    /**
     * TastiDLite-20120602-523
     *
     * This method returns where query for Is Between,Next 7 Days,Current Month,
     * Next 30 Days,Next Month and Next 3 Months date filters
     *
     * @author Vivek Maurya
     * @date 12Jun2012
     * @param fromMonth, 1 to 12
     * @param fromDate, 1 to 31
     * @param birthdayDBColumn, name of birthday column
     * @return StringBuffer, where Query
     */

    public static StringBuffer getWhereQueryForMultipleDates(int whichQuery,int fromMonth,int fromDate,int toMonth,int toDate,String birthdayDBColumn)
    {
        StringBuffer whereQuery = new StringBuffer();
        if(whichQuery == 75)//Is Between
        {
            if((fromMonth != -1 && fromDate != -1 && toMonth != -1 && toDate != -1))//Month1,Date1,Month2,Date2
            {
                whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
                if(fromMonth == toMonth) {
                    whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(") ");
                    whereQuery.append("AND (DAYOFMONTH(").append(birthdayDBColumn).append(")>=").append(fromDate).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")<=").append(toDate).append(")) ");
                }
                else {
                    whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")>").append(fromMonth).append(" AND MONTH(").append(birthdayDBColumn).append(")<").append(toMonth).append(") ");
                    whereQuery.append("OR (MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")>=").append(fromDate).append(") ");
                    whereQuery.append("OR (MONTH(").append(birthdayDBColumn).append(")=").append(toMonth).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")<=").append(toDate).append(")) ");
                }
            }
            else if(fromMonth != -1 && fromDate == -1 && toMonth != -1 && toDate == -1)//Month1,Month2
            {
                whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
                whereQuery.append(" AND (MONTH(").append(birthdayDBColumn).append(")>=").append(fromMonth).append(" AND MONTH(").append(birthdayDBColumn).append(")<=").append(toMonth).append(") ");
            }
            else if(fromMonth == -1 && fromDate != -1 && toMonth == -1 && toDate != -1)//Date1,Date2
            {
                whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
                whereQuery.append(" AND (DAYOFMONTH(").append(birthdayDBColumn).append(")>=").append(fromDate).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")<=").append(toDate).append(") ");
            }
            else {
                return null;
            }
        }
        else//Next 7 Days,Current Month,Next 30 Days,Next Month,Next 3 Months
        {
            if(fromMonth == toMonth) {
                whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
                whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(") ");
                whereQuery.append("AND (DAYOFMONTH(").append(birthdayDBColumn).append(")>=").append(fromDate).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")<=").append(toDate).append(")) ");
            }
            else {
                whereQuery.append(" AND ").append(birthdayDBColumn).append("<>'0000-00-00'  AND ").append(birthdayDBColumn).append(" IS NOT NULL ");
                whereQuery.append(" AND ((MONTH(").append(birthdayDBColumn).append(")>").append(fromMonth).append(" AND MONTH(").append(birthdayDBColumn).append(")<").append(toMonth).append(") ");
                whereQuery.append("OR (MONTH(").append(birthdayDBColumn).append(")=").append(fromMonth).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")>=").append(fromDate).append(") ");
                whereQuery.append("OR (MONTH(").append(birthdayDBColumn).append(")=").append(toMonth).append(" AND DAYOFMONTH(").append(birthdayDBColumn).append(")<=").append(toDate).append(")) ");
            }
        }


        return whereQuery;
    }
    /**
     * return franchisee locations for multiunit user
     * @param franchiseeNo
     * @return Info
     */
    public static Info getFranchiseeForMU(String franchiseeNo,String notIn)
    {
        ResultSet result=null;
        Info info=new Info();
        List franHavingPriv=null;
        StringBuilder sqlQuery = new StringBuilder("SELECT DISTINCT F.FRANCHISEE_NO, F.FRANCHISEE_NAME FROM FRANCHISEE F, USERS U,FIM_USERS FU WHERE FU.FRANCHISEE_NO IN("+franchiseeNo+") AND U.USER_IDENTITY_NO = FU.FRANCHISEE_USER_NO AND FU.FRANCHISEE_NO = F.FRANCHISEE_NO AND F.STATUS NOT IN(0,4) AND (IS_FRANCHISEE ='Y' OR IS_STORE='Y') ");
        if("yes".equals(notIn)){
            sqlQuery.append(" AND FU.FRANCHISEE_NO NOT IN(SELECT FRANCHISEE_NO FROM CONFIGURE_EMAIL_DISCLAIMER) ");
        }
    	if(MultiTenancyUtil.getTenantConstants().CG_ENABLED)
		{
				String fran=ZUtil.getLocationHavingPrivileges(StrutsUtil.getHttpServletRequest(),"cm");
				String franCombo=fran.split("#")[0];
				String franPriv[]=	franCombo.split(",");
				franHavingPriv=Arrays.asList(franCombo.split(","));
		}
        sqlQuery.append("  ORDER BY F.FRANCHISEE_NAME ");
        try{
            result = QueryUtil.getResult(sqlQuery.toString(),null);
            while (result.next()){
            	if(MultiTenancyUtil.getTenantConstants().CG_ENABLED)
        		{
            		if(franHavingPriv.contains(result.getString("FRANCHISEE_NO")))
            			info.set(result.getString("FRANCHISEE_NO"), result.getString("FRANCHISEE_NAME"));
        		}else{
        					info.set(result.getString("FRANCHISEE_NO"), result.getString("FRANCHISEE_NAME"));
        		}
            }
        }
        catch(Exception e){
            logger.error("Exception inside getFranchiseeForMu",e);
        }
        finally{
            QueryUtil.releaseResultSet(result);
            sqlQuery=null;
        }
        return info;
    }
    /**
     * Returns disclaimer information about all franchisee
     * @param franchiseeNo
     * @return
     */
    public static SequenceMap getDisclaimerInfoForMU(String franchiseeNo)
    {
        Info info=null;
        SequenceMap map=new SequenceMap();
        ResultSet result=null;
        StringBuilder query=new StringBuilder("SELECT GROUP_CONCAT(LINK_TITLE) LINK_TITLE,GROUP_CONCAT(LINK_URL) LINK_URL,DISCLAIMER_TEXT,DISCLAIMER_ID,F.FRANCHISEE_NAME,CMD.FRANCHISEE_NO FROM CONFIGURE_EMAIL_DISCLAIMER CMD LEFT JOIN SOCIAL_NETWORKING_SIGNATURES SNS ON SNS.FRANCHISEE_NO=CMD.FRANCHISEE_NO AND SNS.IS_ENABLED='1' LEFT JOIN FRANCHISEE F ON F.FRANCHISEE_NO=CMD.FRANCHISEE_NO WHERE F.FRANCHISEE_NO=CMD.FRANCHISEE_NO ");
        if(StringUtil.isValid(franchiseeNo)){
            query.append(" AND CMD.FRANCHISEE_NO IN(").append(franchiseeNo).append(") ");
        }
        query.append(" GROUP BY CMD.FRANCHISEE_NO");
        try{
            result=QueryUtil.getResult(query.toString(), null);
            while(result.next()){
                info=new Info();
                info.set(FieldNames.FRANCHISEE_NO,result.getString("FRANCHISEE_NO"));
                info.set(FieldNames.LINK_TITLE,result.getString("LINK_TITLE"));
                info.set(FieldNames.LINK_URL,result.getString("LINK_URL"));
                info.set(FieldNames.DISCLAIMER_TEXT,result.getString("DISCLAIMER_TEXT"));
                info.set(FieldNames.FRANCHISEE_NAME,result.getString("FRANCHISEE_NAME"));
                info.set(FieldNames.DISCLAIMER_ID,result.getString("DISCLAIMER_ID"));
                map.put(result.getString("FRANCHISEE_NO"),info);
            }
        }
        catch(Exception e){
            logger.error("Exception inside getDisclaimerInfoForMU",e);
        }
        finally{
            QueryUtil.releaseResultSet(result);
            info=null;
            query=null;
        }
        return map;
    }

    public static String getOwnerIdForZip(String zip, String regionName, String countryId,boolean uszipcheck){
        //Demo_FDD_B_50365 change ends
        //id=55177
        if(regionName==null || regionName.trim().length()<1)
            regionName="''";
        if(countryId==null || countryId.trim().length()<1)
            countryId="''";
        String baseAdminId = null;
        ResultSet result = null;
        try {

            //Added by Rajeev 2/21/2006 - to pick only first five digts of Zip Code for comparision
            //Demo_FDD_B_50365 change starts
            //if( zip!= null && zip.trim().length()>4){
            if(uszipcheck && zip!= null && zip.trim().length()>4){
                zip = zip.trim().substring(0,5);
            }
		    			/* Rule 1, find the ared id for this zipcode */

            //    String query= "SELECT AO.USER_NO FROM FS_ZIPCODE_AREAS ZA LEFT JOIN FS_AREA_OWNERS AO ON ZA.AREA_ID=AO.AREA_ID ,FS_AREAS FA  WHERE ZIPCODE = '"+zip+"'  AND FA.AREA_ID=AO.AREA_ID  AND AO.USER_NO!=-1";
            String query= null;
            //StringBuffer sbQuery= new StringBuffer("SELECT AO.USER_NO FROM FS_ZIPCODE_AREAS ZA LEFT JOIN FS_AREA_OWNERS AO ON ZA.AREA_ID=AO.AREA_ID ,FS_AREAS FA , FS_ZIPCODE_AREA_COUNTRY ZAC WHERE ZIPCODE = '");
            StringBuffer sbQuery= new StringBuffer("SELECT AO.USER_NO FROM FS_ZIPCODE_AREAS ZA LEFT JOIN FS_AREA_OWNERS AO ON ZA.AREA_ID=AO.AREA_ID LEFT JOIN USERS U ON AO.USER_NO=U.USER_NO ,FS_AREAS FA , FS_ZIPCODE_AREA_COUNTRY ZAC WHERE ZIPCODE = '"); //P_FS_Enh_AssignmentBySourceDetail
            //sbQuery.append(zip).append("'  AND FA.AREA_ID=AO.AREA_ID  AND AO.USER_NO!=-1 ");
            sbQuery.append(zip).append("'  AND FA.AREA_ID=AO.AREA_ID  AND AO.USER_NO!=-1 AND U.STATUS=1 ");  //P_FS_Enh_AssignmentBySourceDetail
            sbQuery.append(" AND ZA.AREA_ID=ZAC.AREA_ID AND ZAC.COUNTRY_ID=").append(countryId);

            //  result	= QueryUtil.getResult(query,null);
            result	= QueryUtil.getResult(sbQuery.toString(), null);
            //Demo_FDD_B_50365 change ends  
            if (result != null && result.next()) {	// Mapping exists for this area
                return "" + result.getInteger(1);
            }else{
		    				/* Rule 2, find the area id for the state */

                //query= "SELECT USER_NO FROM FS_STATE_AREAS SA LEFT JOIN FS_AREA_OWNERS AO ON  SA.AREA_ID=AO.AREA_ID ,FS_AREAS FA WHERE STATE_ID = "+regionName+" AND FA.AREA_ID=AO.AREA_ID AND  AO.USER_NO!=-1";
                query= "SELECT AO.USER_NO FROM FS_STATE_AREAS SA LEFT JOIN FS_AREA_OWNERS AO ON  SA.AREA_ID=AO.AREA_ID LEFT JOIN USERS U ON AO.USER_NO=U.USER_NO,FS_AREAS FA WHERE STATE_ID = "+regionName+" AND FA.AREA_ID=AO.AREA_ID AND  AO.USER_NO!=-1 AND U.STATUS=1"; //P_FS_Enh_AssignmentBySourceDetail
                result= QueryUtil.getResult(query,null);
                if (result!=null && result.next()) {	// Mapping exists for this area
                    return "" + result.getInteger(1);
                }else{
		    					/* Query the DB for the default owner	*/
                    //as default area id chanfed -1 to 1
                    //query = "SELECT USER_NO FROM FS_AREA_OWNERS A WHERE A.AREA_ID=1";
                    query = "SELECT A.USER_NO FROM FS_AREA_OWNERS A LEFT JOIN USERS U ON A.USER_NO = U.USER_NO WHERE A.AREA_ID=1 AND U.STATUS=1"; //P_FS_Enh_AssignmentBySourceDetail
                    result = QueryUtil.getResult(query,null);
                    if(result.next()){
                        baseAdminId = result.getString(1);
                    }
		    					/* if no default owner exists find base admin	*/
                    if (baseAdminId == null || baseAdminId.equals("-1")) {
                        query= "SELECT U.USER_NO FROM FRANCHISEE F, USERS U WHERE F.IS_BASE_ADMIN = 'Y' AND F.FRANCHISEE_NO=U.FRANCHISEE_NO";
                        result= QueryUtil.getResult(query,null);
                        if(result.next()){
                            baseAdminId = result.getString(1);
                        }else {
                            baseAdminId = "1";	// Hard coded
                        }
                    }
                }
            }

		    			/* All other leads go to the base admin */
            return baseAdminId;
        }catch (Exception e){
        }
        finally{
            try{
                if(result != null){
                    result = null;
                }
            }catch(Exception e){
                logger.error(e);
            }
        }

        return baseAdminId;
    }

    public static void prepareBatchMap(Map<String,List<String[]>> batchMap,String leadId, String leadOwnerId) {
        String[] params = new String[2];
        params[0] = leadOwnerId;
        params[1] = leadId;

        if(batchMap.containsKey(FieldNames.ZERO)) {
            (batchMap.get(FieldNames.ZERO)).add(params);
        }
        else {
            List<String[]> paramList = new ArrayList<String[]>();
            paramList.add(params);
            batchMap.put(FieldNames.ZERO, paramList);
        }
    }

    public static String getDayName(int index) {
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        if("M".equals(_baseConstants.CALENDAR_START_DAY)) {
            index = index - 1;
            if(index == -1) {
                index = 6;
            }
        }
        return _baseConstants.dayNamesArray[index];
    }

    public static int getMonthStartDateDay(int monthStartDateDay) {
        if("M".equals(MultiTenancyUtil.getTenantConstants().CALENDAR_START_DAY)) {
            if(monthStartDateDay == 0) {
                monthStartDateDay = 7;
            }
        } else {
            monthStartDateDay = monthStartDateDay +1;
        }
        return monthStartDateDay;
    }
    //MT_PHASE2 

    /**
     * Description : [P_B_26486]{Creates Key value Arraylists}
     * @author Banti Prajapati
     * @param keyList {ArrayList that will contain keys}
     * @param valueList {ArrayList that will contain values}
     * @param dataMap {SequenceMap with key-value pairs}
     * @return {CSV key values}
     */
    public static String getKeyValALsReturnCSV(ArrayList keyList,ArrayList valueList,SequenceMap dataMap){
        String franchiseeNoMucsv = "";
        if(dataMap!=null&& dataMap.size()>0)
        {
            Iterator it = dataMap.keys().iterator();
            while(it.hasNext())
            {
                String key=(String)it.next();
                if(StringUtil.isValidNew(franchiseeNoMucsv)){
                    franchiseeNoMucsv=franchiseeNoMucsv+","+key;
                }else{
                    franchiseeNoMucsv=key;
                }
                keyList.add(key);
                valueList.add((String)dataMap.get(key));
            }
        }

        return franchiseeNoMucsv;
    }

  //BB-20150427-345 starts
    public static void prepareSearchQuery(String[] searchTokenArr, String tableAlias, String columnName,Map<String,String> whereClauseMap) {
    	 prepareSearchQuery(searchTokenArr,tableAlias,columnName,whereClauseMap,null);//Sales Top Search on Lead Name Change STARTS
    }
    
    public static void prepareSearchQuery(String[] searchTokenArr, String tableAlias, String columnName,Map<String,String> whereClauseMap,String columnAlias) {
    	String exactQuery = "";
		String containsQuery = "";
		String column =columnName;
		
		if(!StringUtil.isValid(columnAlias))
		{
			columnAlias = columnName;
		}
		
		if(StringUtil.isValid(tableAlias))
		{
			column = tableAlias+"."+columnName;
		}
		if(searchTokenArr.length==1){
			containsQuery = containsQuery+ column+" <token> ";
		} else {
			for(int i=0 ;i<searchTokenArr.length; i++) {
				if(i==searchTokenArr.length-1) {
					containsQuery = containsQuery+ column+" <token>) ";
				} else if(i==0){//CHK-20151020-139
					containsQuery = containsQuery+ " ("+column+" <token> <connector>";
				}else{//CHK-20151020-139 starts
					containsQuery = containsQuery+column+" <token> <connector>";
				}//CHK-20151020-139 ends
				
			}
		}
		exactQuery += column+" <token> ";
		whereClauseMap.put(columnAlias+"_exactQuery", exactQuery);
		whereClauseMap.put(columnAlias+"_containsQuery", containsQuery);
    }
    //Sales Top Search on Lead Name Change ends
    public static Map<String,String> getFIMSearchQueryMap(String searchToken, ArrayList paramsList){
		Map<String,String> searchQueryMap = BaseUtils.getNewHashMapWithKeyValueType();
		StringBuilder fromClause = new StringBuilder();
		StringBuilder whereClause = new StringBuilder();
		Map<String,String> whereClauseMap = BaseUtils.getNewHashMapWithKeyValueType();
		Map<String,String> fromClauseMap = BaseUtils.getNewHashMapWithKeyValueType();
		String fldQuery = "";
		searchToken = handleSpecialForRegex(searchToken);
		String[] searchTokenArr = searchToken.split(" ");
		
		prepareSearchQuery(searchTokenArr, "F", "FRANCHISEE_NAME", whereClauseMap);
		prepareSearchQuery(searchTokenArr, "F", "CENTER_NAME", whereClauseMap);
		prepareSearchQuery(searchTokenArr, "FED", "FIM_TT_ENTITY_NAME", whereClauseMap);
		prepareSearchQuery(searchTokenArr, "F", "EMAIL_ID", whereClauseMap);
		prepareSearchQuery(searchTokenArr, "FO", "EMAIL", whereClauseMap);
		
		String exactQuery = "";
		String containsQuery = "";
		
		
		
		containsQuery = "";
		exactQuery = "";
		if(searchTokenArr.length==1){
			containsQuery = containsQuery+ " (FO.OWNER_FIRST_NAME <token> OR FO.OWNER_LAST_NAME <token> )";
		} else {
			for(int i=0 ;i<searchTokenArr.length; i++) {
				if(i==searchTokenArr.length-1) {
					containsQuery = containsQuery+ " (FO.OWNER_FIRST_NAME <token> OR FO.OWNER_LAST_NAME <token>) )";
				}else if(i==0){//CHK-20151020-139
					containsQuery = containsQuery+ " ((FO.OWNER_FIRST_NAME <token> OR FO.OWNER_LAST_NAME <token>) <connector>";
				}
				else {//CHK-20151020-139 starts
					containsQuery = containsQuery+ " (FO.OWNER_FIRST_NAME <token> OR FO.OWNER_LAST_NAME <token>) <connector>";
				}//CHK-20151020-139 ends
				
			}
		}
		exactQuery += "CONCAT(FO.OWNER_FIRST_NAME, ' ', FO.OWNER_LAST_NAME) <token> ";
		whereClauseMap.put("OWNER_NAME_exactQuery", exactQuery);
		whereClauseMap.put("OWNER_NAME_containsQuery", containsQuery);

		
		Map<String,String> configurationMap = SearchConfiguration.getInstance().getConfiguration(true);
		logger.info("--------In getFIMSearchQueryMap configurationMap >>>>>>>>>"+configurationMap);
		int keyCount = 1;
		for(Map.Entry<String, String> entry:configurationMap.entrySet()) {
			
			String connector = " OR ";
			String fld = entry.getKey();
			String fldCriteria = entry.getValue();
			if("containsAll".equals(fldCriteria)) {
				connector = " AND ";
			}
			if("equals".equals(fldCriteria) || "startsWith".equals(fldCriteria) || "endsWith".equals(fldCriteria)) {
				if("startsWith".equals(fldCriteria)) {
					paramsList.add(searchToken+"%");
				}else if("endsWith".equals(fldCriteria)) {
					paramsList.add("%"+searchToken);
				} else {
					paramsList.add("^"+searchToken+"$");
					//paramsList.add(searchToken);
				}
				fldQuery = whereClauseMap.get(fld+"_exactQuery");
			}else{
				fldQuery = whereClauseMap.get(fld+"_containsQuery");
				for(int i=0 ;i<searchTokenArr.length; i++) {
					if("OWNER_NAME".equals(fld)) {
						paramsList.add("%"+searchTokenArr[i]+"%");
						paramsList.add("%"+searchTokenArr[i]+"%");
					}else {
						paramsList.add("%"+searchTokenArr[i]+"%");
					}
				}
				
			}
			
			if("equals".equals(fldCriteria)){
				fldQuery =fldQuery.replaceAll("<token>", "REGEXP ?");
				fldQuery =fldQuery.replaceAll("<connector>", connector);
				//fldQuery =fldQuery.replaceAll("<token>", SearchConfiguration.getInstance().getCriteriaMap().get(fldCriteria)).replaceAll("<connector>", connector);
			}else{
				fldQuery =fldQuery.replaceAll("<token>", SearchConfiguration.getInstance().getCriteriaMap().get(fldCriteria)).replaceAll("<connector>", connector);
			}
			 whereClause.append(fldQuery); 
			 if(keyCount!=configurationMap.size()) {
				 whereClause.append(" OR ");
			 }
			 keyCount++;
		}
		searchQueryMap.put("whereClause", whereClause.toString());
		
		return searchQueryMap;
		
	}//BB-20150427-345 ends
    //ENH_SMARTCONNECT_SEP starts
    /**
     * Get Franchise ,owner and area information
     * //P_FIM_E_FILTERS_AJAX
     * //P_E_FIM_StateCombo
     * Moved from FIMDAO
     */

    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
                                                String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID) {
        return searchFranchisees(countryId, areaId, status,
                franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder,pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration,stateId,muID,null);
    }

    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
                                                String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from) {

        return searchFranchisees(countryId, areaId, status, franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder, pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration, stateId, muID, from, null);
    }
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
                                                String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList) {
        return searchFranchisees(countryId, areaId, status, franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder, pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration, stateId, muID, from, queryParamList, null);
    }

    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
                                                String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap) {
        return searchFranchisees(countryId, areaId, status, franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder, pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration, stateId, muID, from, queryParamList, fimLeftUserRoleMap, null);
    }

 // BB-20150427-346 starts
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
    		                                        String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId ) {
    		                                 	return searchFranchisees(countryId, areaId, status, franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder, pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration, stateId, muID, from, queryParamList, fimLeftUserRoleMap, groupId, null);
    		                                 }
    
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
    		                                        String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId, String configuredCriteria ) {
    	return searchFranchisees(countryId, areaId, status, franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder, pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration, stateId, muID, from, queryParamList, fimLeftUserRoleMap, groupId, configuredCriteria,null,null);
    }
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
            String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId, String configuredCriteria ,HashMap piiMap,String fromPiiAction) {
   return searchFranchisees(countryId, areaId, status, franchiseeNo, ownerId, city, alphaKey, sortKey, sortOrder, pageId, customSearch, searchCriteria, searchString, spouseNameId, contactNameId, companyNameId, adId, storeTypeId, fType, duration, stateId, muID, from, queryParamList, fimLeftUserRoleMap, groupId, configuredCriteria, piiMap, fromPiiAction,null);
    }
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
            String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId, String configuredCriteria ,HashMap piiMap,String fromPiiAction,String topSearchStatus) {
    	return searchFranchisees( countryId,  areaId,  status,
                 franchiseeNo,  ownerId,  city,  alphaKey,  sortKey,  sortOrder, pageId,  customSearch,  searchCriteria,  searchString,  spouseNameId,  contactNameId,  companyNameId,  adId,  storeTypeId,  fType,  duration, stateId, muID, from,  queryParamList, fimLeftUserRoleMap,  groupId,  configuredCriteria , piiMap, fromPiiAction, topSearchStatus,null);
    } //P_FIM_Independent InDev
 // FIM_SAVE_VIEW_FILTER starts //DIVISION_LABEL starts
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
            String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId, String configuredCriteria ,HashMap piiMap,String fromPiiAction,String topSearchStatus,String inDevelopmentStatusFilter) {
    	return searchFranchisees( countryId,  areaId,  status,
                 franchiseeNo,  ownerId,  city,  alphaKey,  sortKey,  sortOrder, pageId,  customSearch,  searchCriteria,  searchString,  spouseNameId,  contactNameId,  companyNameId,  adId,  storeTypeId,  fType,  duration, stateId, muID, from,  queryParamList, fimLeftUserRoleMap,  groupId,  configuredCriteria , piiMap, fromPiiAction, topSearchStatus,inDevelopmentStatusFilter,null);
    }
    public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
            String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId, String configuredCriteria ,HashMap piiMap,String fromPiiAction,String topSearchStatus,String inDevelopmentStatusFilter,String checkValue) {
    	return searchFranchisees( countryId,  areaId,  status,
                franchiseeNo,  ownerId,  city,  alphaKey,  sortKey,  sortOrder, pageId,  customSearch,  searchCriteria,  searchString,  spouseNameId,  contactNameId,  companyNameId,  adId,  storeTypeId,  fType,  duration, stateId, muID, from,  queryParamList, fimLeftUserRoleMap,  groupId,  configuredCriteria , piiMap, fromPiiAction, topSearchStatus,inDevelopmentStatusFilter,checkValue,null);
    }
    	public static SequenceMap searchFranchisees(String countryId, String areaId, String status,
                String franchiseeNo, String ownerId, String city, String alphaKey, String sortKey, String sortOrder,String pageId, String customSearch, String searchCriteria, String searchString, String spouseNameId, String contactNameId, String companyNameId, String adId, String storeTypeId, String fType, String duration,String stateId,String muID,String from, List queryParamList,UserRoleMap fimLeftUserRoleMap, String groupId, String configuredCriteria ,HashMap piiMap,String fromPiiAction,String topSearchStatus,String inDevelopmentStatusFilter,String checkValue,String divisionIds) {// FIM_SAVE_VIEW_FILTER ends //DIVISION_LABEL ends
    	String[] customSummaryField = null;
    	LinkedHashMap<String, String> lMap = null;
    	
    	if(divisionIds==null)
    	   divisionIds=(String)(StrutsUtil.getHttpSession()).getAttribute("divisionIds");

    	String nameFormat="";
    	String orderFormat="";
    	if("F".equals(MultiTenancyUtil.getTenantConstants().OWNER_NAME_DISPLAY_FORMAT))
    	{
    		nameFormat=" FO.OWNER_FIRST_NAME,' ',FO.OWNER_LAST_NAME ";
    		orderFormat = " OWNER_FIRST_NAME, OWNER_LAST_NAME ";
    	} else{
    		nameFormat=" FO.OWNER_LAST_NAME,' ',FO.OWNER_FIRST_NAME ";
    		orderFormat = " OWNER_LAST_NAME, OWNER_FIRST_NAME ";
    	}
    	SequenceMap map = new SequenceMap();
        int offset = 0;
        if(pageId != null && !pageId.equals("") && !pageId.equals("null") && !pageId.equals("0"))
            offset = ((Integer.parseInt(pageId)-1)*Constants.RECORDS_PER_PAGE);

        int limit = Constants.RECORDS_PER_PAGE;
        ArrayList<String> paramsList=new ArrayList<String>();//P_FIM_B_31066
        //P_E_SelectDiv Nishant starts
        String selectAll = GetAllIdsBean.newInstance().getSelectAll();
        //P_E_SelectDiv
        // BB-20141017-177  starts
        String queryFields = AdminMgr.newInstance().getConfigurationDAO().getCustomQueryFields("F", "3");
        String[] customFields = AdminMgr.newInstance().getConfigurationDAO().getCustomFields("3");
        String customDbField = customFields[0];
        String customFieldName = customFields[1];
        String customFieldType = customFields[2];
        String customarray[]=customDbField.split(",");
        String customFieldNameArray[]=customFieldName.split(",");
        String customFieldTypeArray[]=customFieldType.split(",");
        // BB-20141017-177 ends

        String customsearch = "";
        if (customSearch != null && !customSearch.equals(""))
            customsearch = MasterDataMgr.newInstance().getMasterDataDAO().getValueForId(MasterEntities.CUSTOM_SEARCH,customSearch);

        try{
            //P_FIM_E_stateSorting By Nikhil Verma


            //StringBuffer query = new StringBuffer("SELECT F.FRANCHISEE_NO,F.FRANCHISEE_NAME,F.CITY, F.COUNTRY, F.STORE_PHONE,F.STATUS,F.EMAIL_ID ,F.CENTER_NAME,F.MOBILE,F.ZIPCODE,F.FAX,F.DEACTIVATION_DATE,F.STATE,F.OPENING_DATE,F.LICENSE_NO ,F.GRAND_STORE_OPENING_DATE, "); //P_FIM_B_75682 By Pritam F.OPENING_DATE
            StringBuffer query = new StringBuffer("SELECT F.FRANCHISEE_NO,F.FRANCHISEE_NAME,F.CITY, F.COUNTRY, F.STORE_PHONE,F.STORE_STATUS,F.STATUS,F.EMAIL_ID ,F.CENTER_NAME,F.MOBILE,F.ZIPCODE,F.FAX,F.DEACTIVATION_DATE,F.STATE,F.OPENING_DATE,F.LICENSE_NO ,F.GRAND_STORE_OPENING_DATE,F.IS_FRANCHISEE, "); //P_FIM_B_52806 By AKASH F.STORE_STATUS//// BB-20150427-346
            
            query.append("IF(F.STATUS=0 OR F.STATUS=4, 'Terminated', IF(F.STATUS=1 AND F.IS_FRANCHISEE='Y', 'Active', IF(F.STATUS=3 AND F.IS_FRANCHISEE='Y', 'Corporate Location', IF(F.IS_FRANCHISEE='N', 'In Development','')))) AS FRANCHISEE_TYPE, ");	//P_B_59259
            if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED)){
  			  query.append(" GROUP_CONCAT(LDM.DIVISION_ID) AS DIVISION_ID, ");
			  }
            //BB-20141017-177 starts
            if(StringUtil.isValidNew(queryFields)) {
                queryFields = queryFields.substring(0, queryFields.lastIndexOf(","));
                //query.append(queryFields).append(", ");
                customSummaryField=queryFields.split(",");													//BB-20150525-360 Starts
    			lMap=CommonUtil.piiEnabledFieldMap("FRANCHISEE", customSummaryField,customFields);
    			for(int i=0;i<customSummaryField.length;i++)
    			{
    				query.append(lMap.get(customSummaryField[i])).append(",");
    			}																							//BB-20150525-360 Ends
            } //BB-20141017-177 ends
            //P_FIM_E_LocationEntity start

            //query.append(",FO.OWNER_LAST_NAME, FO.OWNER_MIDDLE_NAME, FO.OWNER_FIRST_NAME, A.AREA_NAME, A.AREA_ID ");
            query.append("FO.OWNER_LAST_NAME, FO.OWNER_MIDDLE_NAME, FO.OWNER_FIRST_NAME, A.AREA_NAME, A.AREA_ID,FED.FIM_TT_ENTITY_NAME,FED.FIM_ENTITY_ID ,MT.DATA_VALUE,FLA.FIM_DD_EXPIRATION_DATE  ");
            //P_FIM_E_LocationEntity ends
            //P_FIM_E_ownerSorting By Nikhil Verma
            query.append(", GROUP_CONCAT(DISTINCT CONCAT(").append(nameFormat).append(") ORDER BY ").append(orderFormat).append("  SEPARATOR '; ') AS OWNERNAME ");											//FastSi-20161114-078 Added DISTINCT
            query.append(" ,GROUP_CONCAT(DISTINCT FO.FRANCHISE_OWNER_ID ORDER BY OWNER_FIRST_NAME, OWNER_LAST_NAME )AS OWNER_ID,F.IS_STORE,F.MAX_EXPIRATION_DATE AS EXPIRATION_DATE  ");//P_E_FIM_MOVETOFO	//FastSi-20161114-078 Added DISTINCT
            StringBuffer queryforcount = new StringBuffer("SELECT COUNT(DISTINCT F.FRANCHISEE_NO) ");

            //P_E_SelectDiv Nishant starts
            StringBuffer selectAllQuery = new StringBuffer();
            StringBuffer checkedIds = new StringBuffer();

            selectAllQuery.append("SELECT DISTINCT (F.FRANCHISEE_NO) AS SELECTEDIDS ");

            //P_E_SelectDiv ends

            StringBuffer fromClause = new StringBuffer();      //P_ENH_MYSQL55

            fromClause.append("FROM FRANCHISEE F ");
            //if ("renew".equals(fType) || "Corprenew".equals(fType) ){	    		   
            fromClause.append("LEFT JOIN FIM_LICENSE_AGREEMENT FLA ON F.FRANCHISEE_NO = FLA.ENTITY_ID ");
            //}
            fromClause.append("LEFT JOIN MASTER_DATA MT ON MT.MASTER_DATA_ID = F.TRANSACTION_TYPE ");
            fromClause.append("LEFT JOIN  OWNERS O ON F.FRANCHISEE_NO = O.FRANCHISEE_NO ");
            fromClause.append("LEFT JOIN FIM_OWNERS FO ON O.OWNER_ID = FO.FRANCHISE_OWNER_ID ");
            fromClause.append("LEFT JOIN AREAS A ON A.AREA_ID = F.AREA_ID ");
            fromClause.append("LEFT JOIN FIM_ENTITY_LOCATION_MAPPING FELM ON FELM.FRANCHISEE_NO=F.FRANCHISEE_NO LEFT JOIN FIM_ENTITY_DETAIL FED ON FED.FIM_ENTITY_ID=FELM.FIM_ENTITY_ID ");
            if("groupSummaryFim".equals(from)) {
                fromClause.append("LEFT JOIN FIM_FRANCHISEE_MAPPING FFM ON FFM.FRANCHISEE_ID = F.FRANCHISEE_NO ");
            }
            if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED)){
  			  fromClause.append(" LEFT JOIN LOCATION_DIVISIONS_MAPPING LDM ON LDM.FRANCHISEE_NO=F.FRANCHISEE_NO ");
			  }
            //fromClause.append("LEFT JOIN FIM_RENEWAL FR ON FR.ENTITY_ID = F.FRANCHISEE_NO ");
            StringBuffer whereClause = new StringBuffer("WHERE F.FRANCHISEE_NO = O.FRANCHISEE_NO AND O.OWNER_ID = FO.FRANCHISE_OWNER_ID AND F.IS_ADMIN='N'  ");
         // BB-20150427-346 starts
            String[] configuredCriteriaArr = null;
			String topSearchSubMenu = (String)StrutsUtil.getHttpSession().getAttribute("subMenuName");
			if(StringUtil.isValid(topSearchStatus)){
				topSearchSubMenu = topSearchStatus;
			}
			if("topSearch".equals(from)) {
	    		if(StringUtil.isValid(configuredCriteria)) {
	    			configuredCriteriaArr = configuredCriteria.split(",");
	    		}
	    		
	    		if(StringUtil.isValid(configuredCriteria)) {
	    			
	    			if(configuredCriteria.contains("fimInDevelopment") && configuredCriteriaArr.length>1) {		//WirelessZone-20160120-744
	    				whereClause.append("AND ( (F.IS_FRANCHISEE='Y' ");
	    				if(StringUtil.isValid(status))
	    				{
	    				whereClause.append("AND F.STATUS IN(" + status + ") ");
	    				}
	    				whereClause.append(") OR (F.IS_FRANCHISEE='N' AND IS_STORE ='Y'  AND IS_STORE_ARCHIVED='N' AND F.STATUS IN(1,3)) )");
	    			} else if ("fimInDevelopment".equals(configuredCriteria) ){		//WirelessZone-20160120-744
	    					whereClause.append("AND F.IS_FRANCHISEE='N' AND IS_STORE ='Y'  AND IS_STORE_ARCHIVED='N' ");
	    			}else
	    			{
	        			whereClause.append("AND F.IS_FRANCHISEE='Y' ");
	        			if(StringUtil.isValid(status))
	    				{
	    				whereClause.append("AND F.STATUS IN(" + status + ") ");
	    				}
	        		}
	    			status="";			//WirelessZone-20160120-744
	    		}
	 		} else if("fimInDevelopment".equals(from)) {
                whereClause.append("AND F.IS_FRANCHISEE='N' AND IS_STORE ='Y' ");
                if("2".equals(inDevelopmentStatusFilter)){ //P_FIM_Independent InDev
                	whereClause.append("AND IS_STORE_ARCHIVED='Y' ");
                }else {
                	whereClause.append("AND IS_STORE_ARCHIVED='N' ");
                }
            }else if("groupSummaryFim".equals(from)) {
                whereClause.append("AND FFM.GROUP_ID="+groupId+" AND ((IS_FRANCHISEE='Y' AND STATUS IN(1,3,0,4)) OR (IS_FRANCHISEE='N' AND IS_STORE ='Y'  AND IS_STORE_ARCHIVED='N' AND STATUS IN(1,3))) ");
            }else if("smartconnect".equals(from)){
            	whereClause.append("AND (F.IS_FRANCHISEE='Y' OR (F.IS_FRANCHISEE='N' AND IS_STORE ='Y'  AND IS_STORE_ARCHIVED='N')) "); // P_B_78943
            }
            else{
            	whereClause.append("AND (F.IS_FRANCHISEE='Y') "); //Bug 79368
            }
			// BB-20150427-346 ends
            

            if(!"groupSummaryFim".equals(from)){
                if(StringUtil.isValid(status))
                {
                    if(status.equals("0"))//||status.equals("4"))
                        whereClause.append("AND F.STATUS IN(" + status + ",4) ");
                    else
                        whereClause.append("AND F.STATUS IN(" + status + ") ");
                }
            }
            if (StringUtil.isValidNew(countryId)){
                whereClause.append("AND F.COUNTRY_ID IN (" +countryId+") ");
            }

            //P_E_FIM_StateCombo
            if (StringUtil.isValidNew(stateId))
                whereClause.append("AND F.REGION_NO IN (" + stateId + ") ");
            if (StringUtil.isValidNew(city)){
            	String[] cityArr =city.split(",");
            	for(int i=0;i<cityArr.length;i++){
            		if( i == 0){
            			whereClause.append(" AND ( ");
            		}else{
            			whereClause.append(" OR  ");
            		}
                whereClause.append(" F.CITY = '" +PortalUtils.forSpecialCharForDB(cityArr[i])+"' ");
            	}
            	whereClause.append(" )  ");
            }
          if (StringUtil.isValidNew(areaId))
               whereClause.append("AND A.AREA_ID IN (" + areaId + ") ");
           
           if(StringUtil.isValid(divisionIds)){//DIVISION_LABEL starts
        	   whereClause.append("  AND F.FRANCHISEE_NO IN ("+DivisionUtil.getAllDivisionFranchiseeNos(divisionIds)+") ");
           }//DIVISION_LABEL ends
            // Request come from fim Home page
            if("new".equals(fType) || "newCorp".equals(fType)){
                if("1month".equals(duration)){
                    whereClause.append(" AND DATE(F.OPENING_DATE) > DATE_SUB(CURDATE(),INTERVAL 1 MONTH) AND DATE(F.OPENING_DATE) <= CURDATE()");
                }else if("6months".equals(duration)){
                    whereClause.append(" AND DATE(F.OPENING_DATE) > DATE_SUB(CURDATE(),INTERVAL 6 MONTH) AND DATE(F.OPENING_DATE) <= CURDATE()");
                }else if("1year".equals(duration)){
                    whereClause.append(" AND DATE(F.OPENING_DATE) > DATE_SUB(CURDATE(),INTERVAL 1 YEAR) AND DATE(F.OPENING_DATE) <= CURDATE()");
                }
            }else if ("renew".equals(fType) || "Corprenew".equals(fType)){
                if("1month".equals(duration)){
                    whereClause.append(" AND DATE(FLA.FIM_DD_EXPIRATION_DATE) <= DATE_ADD(CURDATE(), INTERVAL 1 MONTH) AND  DATE(FLA.FIM_DD_EXPIRATION_DATE) >=  CURDATE() ");
                }else if("6months".equals(duration)){
                    whereClause.append(" AND DATE(FLA.FIM_DD_EXPIRATION_DATE) <= DATE_ADD(CURDATE(), INTERVAL 6 MONTH) AND  DATE(FLA.FIM_DD_EXPIRATION_DATE) >=  CURDATE() ");
                }else if("1year".equals(duration)){
                    whereClause.append(" AND DATE(FLA.FIM_DD_EXPIRATION_DATE) <= DATE_ADD(CURDATE(), INTERVAL 12 MONTH) AND DATE(FLA.FIM_DD_EXPIRATION_DATE) >=  CURDATE() ");
                }else{
                    whereClause.append(" AND DATE(FLA.FIM_DD_EXPIRATION_DATE) >=  CURDATE() ");
                }
            }else if ("terminated".equals(fType)){
                if("1month".equals(duration)){
                    whereClause.append(" AND DATE(F.DEACTIVATION_DATE) > DATE_SUB(CURDATE(),INTERVAL 1 MONTH) ");
                }else if("6months".equals(duration)){
                    whereClause.append(" AND DATE(F.DEACTIVATION_DATE) > DATE_SUB(CURDATE(),INTERVAL 6 MONTH) ");
                }else if("1year".equals(duration)){
                    whereClause.append(" AND DATE(F.DEACTIVATION_DATE) > DATE_SUB(CURDATE(),INTERVAL 1 YEAR) ");
                }
            }

            if (StringUtil.isValidNew(franchiseeNo))
                whereClause.append("AND F.FRANCHISEE_NO IN ( " + franchiseeNo + ") ");

            if (StringUtil.isValid(muID))
                whereClause.append("AND F.MU_ID = " + muID + " ");

            if(StringUtil.isValidNew(ownerId)){
                fromClause.append(",OWNERS O1 ");
                whereClause.append("AND O1.OWNER_ID IN ( " + ownerId + " ) AND F.FRANCHISEE_NO = O1.FRANCHISEE_NO ");
            }
         // FIM_SAVE_VIEW_FILTER starts
            String name[] = new String[3] ;
            String contactname[]=new String[3] ;
        	int nameParts = 0 ;
        	int contactnameParts = 0 ;
            
            if("yes".equals(checkValue)){
            	//if(!("null").equals(spouseNameId) && !("").equals(spouseNameId)){
            	if(StringUtil.isValidNew(spouseNameId)) {
                    StringTokenizer st = new StringTokenizer(StringUtil.byPassQuotesInQuery(StringUtil.encodeEscapeCharacter(spouseNameId,'\\')));//P_FIM_B_31066
                    while(st.hasMoreTokens() && nameParts<3){
                        name[nameParts++] = st.nextToken();
                    }
                }
            	
            	if(!("null").equals(spouseNameId) && !("").equals(spouseNameId)){
                if(name[0]!=null) {
                    whereClause.append(" AND ( FO.SPOUSE_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.SPOUSE_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                }
                if(name[1]!=null) {
                    whereClause.append(" OR FO.SPOUSE_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.SPOUSE_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                }
                if(name[0]!=null ||  name[1]!=null)
                whereClause.append(" )");
            	}
            	
            }else{
            	// FIM_SAVE_VIEW_FILTER ends

            if(StringUtil.isValidNew(spouseNameId)){
                fromClause.append(",OWNERS O2 ");
                whereClause.append("AND O2.OWNER_ID = " + spouseNameId + " AND F.FRANCHISEE_NO = O2.FRANCHISEE_NO ");
            }

           
            }// FIM_SAVE_VIEW_FILTER starts
            if("yes".equals(checkValue)){
            	
            	if(StringUtil.isValidNew(contactNameId)){
            		//name = null;
                   // nameParts = 0 ;
                    StringTokenizer st = new StringTokenizer(StringUtil.byPassQuotesInQuery(StringUtil.encodeEscapeCharacter(contactNameId,'\\')));//P_FIM_B_31066
                    while(st.hasMoreTokens() && contactnameParts<3){
                    	contactname[contactnameParts++] = st.nextToken();
                    }
                }
            	if(!("null").equals(contactNameId) && !("").equals(contactNameId)){
            	if(contactname[0]!=null) {
                    whereClause.append(" AND ( F.CONTACT_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_LAST_NAME LIKE ? ");
                    paramsList.add("%"+contactname[0]+"%");
                    paramsList.add("%"+contactname[0]+"%");
                    paramsList.add("%"+contactname[0]+"%");
                }
                if(contactname[1]!=null) {
                    whereClause.append(" OR F.CONTACT_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_LAST_NAME LIKE ? ");
                    paramsList.add("%"+contactname[1]+"%");
                    paramsList.add("%"+contactname[1]+"%");
                    paramsList.add("%"+contactname[1]+"%");
                }
                if(contactname[2]!=null) {
                    whereClause.append(" OR F.CONTACT_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_LAST_NAME LIKE ? ");
                    paramsList.add("%"+contactname[2]+"%");
                    paramsList.add("%"+contactname[2]+"%");
                    paramsList.add("%"+contactname[2]+"%");
                }
                if(contactname[0]!=null ||  contactname[1]!=null || contactname[2]!=null)
                whereClause.append(" )");
            	}	
            }
            else{
            	
            	if(StringUtil.isValidNew(contactNameId)){
                    whereClause.append("AND F.FRANCHISEE_NO IN(" + contactNameId +") ");
                }// FIM_SAVE_VIEW_FILTER ends
            
            }
            //P_FIM_B_FILTERS_25678
//            if(StringUtil.isValidNew(companyNameId)) {
//            	if(StringUtil.isInt(companyNameId)) {
//            		companyNameId = SQLUtil.getColumnValue("FIM_ENTITY_DETAIL", "FIM_TT_ENTITY_NAME", "ENTITY_ID", companyNameId);
//            		System.out.println("companyNameId**********************"+companyNameId);
//            	}
//                fromClause.append(" , FIM_ENTITY_DETAIL ED ");
//                whereClause.append(" AND ED.FIM_ENTITY_ID=FELM.FIM_ENTITY_ID ");
//                whereClause.append(" AND ( ED.FIM_TT_ENTITY_NAME LIKE \""+StringUtil.byPassQuotesInQuery(StringUtil.reversesAppostrophiSpecial(companyNameId))+"\" "); //P_FIM_B_30849
//                whereClause.append(" ) ");
//            }
            if(StringUtil.isValidNew(companyNameId)) {
                fromClause.append(" , FIM_ENTITY_DETAIL ED ");
                whereClause.append(" AND ED.FIM_ENTITY_ID=FELM.FIM_ENTITY_ID ");
                whereClause.append(" AND ( ED.ENTITY_ID IN ("+companyNameId+") "); //P_FIM_B_30849
                whereClause.append(" ) ");
            }
            
            if(StringUtil.isValidNew(adId)){
                whereClause.append("AND A.AREA_DEVELOPER_ID IN (" + adId +") ");
            }

            if (StringUtil.isValidNew(storeTypeId))
                whereClause.append("AND F.ST_ID IN ( " + storeTypeId + ") ");
            
            if(StringUtil.isValid(searchCriteria)){
                StringTokenizer st = new StringTokenizer(StringUtil.byPassQuotesInQuery(StringUtil.encodeEscapeCharacter(searchCriteria,'\\')));//P_FIM_B_31066
                while(st.hasMoreTokens() && nameParts<3){
                    name[nameParts++] = st.nextToken();
                }
            }
            if(customsearch != null && customsearch.equals("Owner Name")) {
                if(StringUtil.isValid(name[0])) {
                    whereClause.append(" AND ( FO.OWNER_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.OWNER_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR FO.OWNER_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                }
                if(StringUtil.isValid(name[1])) {
                    whereClause.append(" OR FO.OWNER_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.OWNER_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR FO.OWNER_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                }
                if(StringUtil.isValid(name[2])) {
                    whereClause.append(" OR FO.OWNER_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.OWNER_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR FO.OWNER_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[2]+"%");
                    paramsList.add("%"+name[2]+"%");
                    paramsList.add("%"+name[2]+"%");
                }
                if(StringUtil.isValid(name[0]) ||  StringUtil.isValid(name[1]) || StringUtil.isValid(name[2]))
                    whereClause.append(" )");
            } else if(customsearch != null && customsearch.equals("Spouse Name")) {
                if(StringUtil.isValid(name[0])) {
                    whereClause.append(" AND ( FO.SPOUSE_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.SPOUSE_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                }
                if(StringUtil.isValid(name[1])) {
                    whereClause.append(" OR FO.SPOUSE_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR FO.SPOUSE_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                }
                if(StringUtil.isValid(name[0]) ||  StringUtil.isValid(name[1]))
                whereClause.append(" )");
            } else if(customsearch != null && customsearch.equals("Area / Region Owner")) {
                fromClause.append(" , AREA_DEVELOPER AD ");
                whereClause.append(" AND A.AREA_DEVELOPER_ID = AD.AREA_DEVELOPER_ID ");
                if(StringUtil.isValid(name[0])) {
                    whereClause.append(" AND ( AD.FIRST_NAME LIKE ? ");
                    whereClause.append(" OR AD.MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR AD.LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                }
                if(StringUtil.isValid(name[1])) {
                    whereClause.append(" OR AD.FIRST_NAME LIKE ? ");
                    whereClause.append(" OR AD.MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR AD.LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                }
                if(StringUtil.isValid(name[2])) {
                    whereClause.append(" OR AD.FIRST_NAME LIKE ? ");
                    whereClause.append(" OR AD.MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR AD.LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[2]+"%");
                    paramsList.add("%"+name[2]+"%");
                    paramsList.add("%"+name[2]+"%");
                }
                if(StringUtil.isValid(name[0])) {
                whereClause.append(" )");
                }
            } else if(customsearch != null && customsearch.equals("Company Name")) {
                name[0] = searchCriteria ;
                fromClause.append(" , FIM_ENTITY_DETAIL ED ");
                whereClause.append(" AND ED.FIM_ENTITY_ID=FELM.FIM_ENTITY_ID ");
                if(StringUtil.isValid(name[0])){
                    whereClause.append(" AND ( ED.FIM_TT_ENTITY_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    whereClause.append(" )");
                }
            } else if(customsearch != null && customsearch.equals("Primary Contact Name")) {
                if(StringUtil.isValid(name[0])) {
                    whereClause.append(" AND ( F.CONTACT_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                    paramsList.add("%"+name[0]+"%");
                }
                if(StringUtil.isValid(name[1])) {
                    whereClause.append(" OR F.CONTACT_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                    paramsList.add("%"+name[1]+"%");
                }
                if(StringUtil.isValid(name[2])) {
                    whereClause.append(" OR F.CONTACT_FIRST_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_MIDDLE_NAME LIKE ? ");
                    whereClause.append(" OR F.CONTACT_LAST_NAME LIKE ? ");
                    paramsList.add("%"+name[2]+"%");
                    paramsList.add("%"+name[2]+"%");
                    paramsList.add("%"+name[2]+"%");
                }
                if(StringUtil.isValid(name[0]) ||  StringUtil.isValid(name[1]) || StringUtil.isValid(name[2]))
                whereClause.append(" )");
            }

            else if(customsearch != null && customsearch.equals("City")) {
                name[0] = searchCriteria ;
                if(StringUtil.isValid(name[0])){
                    whereClause.append("AND ( F.CITY LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    whereClause.append(" )");
                }
            }
            else if(customsearch != null && customsearch.equals("Franchise ID")) {
                name[0] = searchCriteria ;
                if(StringUtil.isValid(name[0])){
                    whereClause.append("AND ( F.FRANCHISEE_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    whereClause.append(" )");
                }
            }
            else if(customsearch != null && customsearch.equals("Country")) {
                name[0] = searchCriteria ;
                if(StringUtil.isValid(name[0])){
                    whereClause.append("AND ( F.COUNTRY LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    whereClause.append(" )");
                }
            }
            else if(customsearch != null && customsearch.equals("Area / Region")) {
                name[0] = searchCriteria ;
                if(StringUtil.isValid(name[0])){
                    whereClause.append("AND ( A.AREA_NAME LIKE ? ");
                    paramsList.add("%"+name[0]+"%");
                    whereClause.append(" )");
                }
            }
            if(alphaKey != null && !alphaKey.equals("")){
                whereClause.append("AND F.FRANCHISEE_NO IN ( SELECT DISTINCT O.FRANCHISEE_NO FROM OWNERS O,FIM_OWNERS FO WHERE O.OWNER_ID=FO.FRANCHISE_OWNER_ID AND (");
                whereClause.append("LOWER(FO.OWNER_FIRST_NAME) LIKE '%").append(alphaKey.substring(0,1)).append("%' ");
                if(alphaKey.length()==3){
                    whereClause.append("OR LOWER(FO.OWNER_FIRST_NAME) LIKE '%").append(alphaKey.substring(1,2)).append("%' ");
                    whereClause.append("OR LOWER(FO.OWNER_FIRST_NAME) LIKE '%").append(alphaKey.substring(2)).append("%'  ");
                }else{
                    whereClause.append("OR LOWER(FO.OWNER_FIRST_NAME) LIKE '%").append(alphaKey.substring(1)).append("%'  ");
                }
                whereClause.append(") ) ");
            }

            //Sperry-20140204-132 after discuss with priyank starts
            name = null;
            nameParts = 0 ;
                                		/*if(searchString != null && !searchString.equals("")){
                                			StringTokenizer st = new StringTokenizer(searchString);
                                			while(st.hasMoreTokens() && nameParts<3){
                                				name[nameParts++] = st.nextToken();
                                			}
                                			st = null;
                                		} */

            if(StringUtil.isValid(searchString)){

                try {
                    name=searchString.split(" ");
                    //BB-20150427-345 starts
                    Map<String,String> searchConfigMap = getFIMSearchQueryMap(searchString,paramsList);
                    StringBuffer ownerQuery=new StringBuffer();
                    ownerQuery.append(" OR F.FRANCHISEE_NO IN( SELECT DISTINCT O.FRANCHISEE_NO FROM OWNERS O,FIM_OWNERS FO WHERE O.OWNER_ID=FO.FRANCHISE_OWNER_ID ");

                    int nameLength =name.length;

                                				/*if(nameLength==2) {
                                					whereClause.append(" AND ( F.FRANCHISEE_NAME LIKE ? ");
                                					paramsList.add("%"+name[0]+"%");

                                					whereClause.append(" OR F.FRANCHISEE_NAME LIKE ? ");
                                					paramsList.add("%"+name[1]+"%");

                                					whereClause.append(" OR F.FRANCHISEE_NAME LIKE ? ");
                                					paramsList.add("%"+searchString+"%");

                                					ownerQuery.append("AND ((FO.OWNER_FIRST_NAME LIKE ? AND  FO.OWNER_LAST_NAME LIKE ?) ");
                                					paramsList.add(name[0]+"%");
                                					paramsList.add(name[1]+"%");
                                					ownerQuery.append(" OR ");
                                					ownerQuery.append(" (FO.OWNER_FIRST_NAME LIKE ? AND FO.OWNER_LAST_NAME LIKE ?) ");
                                					paramsList.add(name[1]+"%");
                                					paramsList.add(name[0]+"%");

                                					ownerQuery.append("OR (FO.OWNER_FIRST_NAME LIKE ?  OR FO.OWNER_LAST_NAME  LIKE ? )");
                                					paramsList.add(searchString+"%");
                                					paramsList.add(searchString+"%");
                                				} else {*/
                    if(StringUtil.isValid(searchConfigMap.get("whereClause"))){
                    	whereClause.append(" AND (");
                    	whereClause.append(searchConfigMap.get("whereClause"));
                    	whereClause.append(" )");
                    	
                    } else {//BB-20150427-345 ends
                    	for(int i=0 ;i<name.length; i++) {
                    		if(i==0) {
                    			whereClause.append(" AND (");
                    		} else {
                    			whereClause.append(" AND ");
                    		}
                    		whereClause.append(" F.FRANCHISEE_NAME LIKE ? ");
                    		paramsList.add("%"+name[i]+"%");
                    	}
                    	/*if(nameLength!=1) {
	                                						whereClause.append(" OR F.FRANCHISEE_NAME LIKE ? ");
	                                						paramsList.add("%"+searchString+"%");
	                                					}*/

                    	for(int i=0 ;i<name.length; i++) {
                    		if(i==0) {
                    			ownerQuery.append("AND (");
                    		} else {
                    			ownerQuery.append("AND ");
                    		}
                    		ownerQuery.append(" (FO.OWNER_FIRST_NAME LIKE ? OR FO.OWNER_LAST_NAME  LIKE ?) ");
                    		paramsList.add("%"+name[i]+"%");
                    		paramsList.add("%"+name[i]+"%");
                    	}

                    	/*if(nameLength!=1) {
	                                						ownerQuery.append("OR (FO.OWNER_FIRST_NAME LIKE ?  OR FO.OWNER_LAST_NAME  LIKE ? )");
	                                						paramsList.add(searchString+"%");
	                                						paramsList.add(searchString+"%");
	                                					}*/
                    	//}

                    	//whereClause.append(" )");
                    	//ownerQuery.append(" )");
                    	whereClause.append(ownerQuery).append(") ))");
                    }
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            //Sperry-20140204-132 after discuss with priyank ends 
            name = null;

            queryforcount.append(fromClause).append(whereClause);

            ResultSet rscount = QueryUtil.getResult(queryforcount.toString(), paramsList.toArray());
            //totalRecords = 0;

            if(rscount.next()) {
                settotalRecords(Integer.parseInt(rscount.getString(1)));
            }

            //P_E_SelectDiv Nishant starts
            selectAllQuery.append(fromClause).append(whereClause);

            if("true".equals(selectAll)){
                rscount = QueryUtil.getResult(selectAllQuery.toString(), paramsList.toArray());
                while(rscount.next()){
                    checkedIds.append(rscount.getString("SELECTEDIDS")).append(",");
                }
                map.put("SELECTEDIDS",checkedIds.substring(0,checkedIds.length()-1));
            }

            if(queryParamList!= null){
                queryParamList.add(selectAllQuery);
                queryParamList.add(paramsList.toArray());
            }
            //P_E_SelectDiv ends

            rscount = null;
            QueryUtil.releaseResultSet(rscount);
            StringBuffer sortByClause = null;
                       
            if(gettotalRecords() != 0) {
                sortByClause = new StringBuffer(" ORDER BY ");
                if (StringUtil.isValidNew(sortKey)) {
                    if (sortKey.equals("F"))
                        sortByClause.append("F.FRANCHISEE_NAME ");
                    if (sortKey.equals("C"))
                        sortByClause.append("F.CITY ");
                    if (sortKey.equals("DDATE"))
                        sortByClause.append("F.DEACTIVATION_DATE ");
                    if (sortKey.equals("A"))
                        sortByClause.append("A.AREA_NAME ");
                    // P_FIM_E_stateSorting By Nikhil Verma
                    if (sortKey.equals("state"))
                        sortByClause.append("F.STATE ");
                    //P_FIM_E_ownerSorting By Nikhil Verma
                    if (sortKey.equals("MN"))
                        sortByClause.append("OWNERNAME ");
                    //P_FIM_E_LocationEntity By Ram Avtar
                    if (sortKey.equals("openingDate"))
                    {
                            					/*if("fimInDevelopment".equals(from)) {   //B_FIM50013
                            						sortByClause.append("F.GRAND_STORE_OPENING_DATE ");//B_FIM50013
                            					}else*/
                        sortByClause.append("F.OPENING_DATE ");
                    }
                    if (sortKey.equals("centre_name"))
                        sortByClause.append("F.CENTER_NAME ");
                    if (sortKey.equals("renewal_date"))
                        sortByClause.append("EXPIRATION_DATE ");
                    if("license_type".equals(sortKey)) {
                        sortByClause.append("MT.DATA_VALUE ");
                    }

                    //P_FIM_B_75682 By Pritam
                    if (sortKey.equals("FIM_TT_ENTITY_NAME") || sortKey.equals("ENTITY"))
                        sortByClause.append("FED.FIM_TT_ENTITY_NAME ");
                    //P_B_59259 STARTS
                    if (sortKey.equals("franchiseeType"))
                        sortByClause.append("FRANCHISEE_TYPE ");
                    //P_B_59259 ENDS
                    
                }else sortByClause.append("F.FRANCHISEE_NAME ");

                if(StringUtil.isValidNew(sortOrder))
                    sortByClause.append(sortOrder);
                else
                    sortByClause.append("ASC");

                //P_FIM_E_ownerSorting By Nikhil Verma
                query.append(fromClause).append(whereClause).append(" GROUP BY F.FRANCHISEE_NO ");

                if (sortByClause != null) {
                    query.append(sortByClause);
                }
                //P_FIM_E_ownerSorting By Nikhil Verma
                if("smartconnect".equals(from))
                {
                    query.append(" LIMIT 0,1");
                }
                else if(!"0".equals(pageId))
                    query.append(" LIMIT " + offset + "," + limit);
                System.out.print("\n\n\nsortoderd..." +sortOrder+ "/////////\n\n\n sortkey is " + sortKey+"bcbnhbcnds\n\n\n\n" + query.toString() );
                
                ResultSet rs = QueryUtil.getResult(query.toString(), paramsList.toArray());
                
                //P_FIM_B_31066 ends
                String passwordFunctionality = "off";
                passwordFunctionality = AccessControlMgr.newInstance().getAccessControlDAO().getPasswordFunctionalityValue();
                FieldMappings mappings	= null;
                mappings				= DBUtil.getInstance().getFieldMappings("franchisee");
                Field[] fields				= mappings.getSummaryFieldsArray();
                Info info;
                Info franInfo;
                String ownerName;
                while(rs.next()){
                    info=new Info();
                    String franchiseIdDispName = NewPortalUtils.getFranchiseIdDisplayName(rs.getString("FRANCHISEE_NO"),rs.getString("FRANCHISEE_NAME")); //P_ENH_FRAN_ID_DISPLAY_NAME
                    info.set(FieldNames.FRANCHISEE_NO, rs.getString("FRANCHISEE_NO"));
                    info.set(FieldNames.FRANCHISEE_NAME+"forAjax", rs.getString("FRANCHISEE_NAME"));
                    info.set(FieldNames.FRANCHISEE_NAME+"Excel", franchiseIdDispName);
                    info.set(FieldNames.AREA_NAME+"Excel", rs.getString("AREA_NAME"));
                    // P_FIM_E_stateSorting By Nikhil Verma
                    if(!StringUtil.isValid(rs.getString("STATE")) && !StringUtil.isValid(rs.getString("CITY")))
                    {
                        info.set(FieldNames.CITY, "");
                    }
                    else
                    {
                        info.set(FieldNames.CITY,( PortalUtils.toTitleCase(rs.getString("CITY")).equals("") ? "--" : PortalUtils.toTitleCase(rs.getString("CITY")) )+" / "+ (!StringUtil.isValid(rs.getString("STATE")) ? "--" : rs.getString("STATE")));
                    }

                    if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED)){
                    String divisions = rs.getString("DIVISION_ID");
                    divisions = NewPortalUtils.removeDuplicate(divisions);
    					info.set("division",StringUtil.isValidNew(DivisionUtil.getAllDivisionNames(divisions))?DivisionUtil.getAllDivisionNames(divisions):"--");
    				}
                    //P_SC_E_18052010 Vikram
                    //P_E_FIM_7.1.0.10 modified by neeti starts
                    
                    //COMMENTS FOR P_B_59996 STARTS 
                    /*if ("Yes".equalsIgnoreCase(MasterDataMgr.newInstance().getMasterDataDAO().getValueByType(MasterEntities.ENABLE_SMARTCONNECT)) && !MultiTenancyUtil.getTenantConstants().ENABLE_SMART_SWITCH) {//ENH_SMARTCONNECT_SEP
                        info.set(FieldNames.FRANCHISEE_NAME, "<a href=\"javascript:openSmartConnect('"+rs.getString("FRANCHISEE_NO")+"')\" onmouseover='javascript:showCenterDetails("+rs.getString("FRANCHISEE_NO")+")' onmouseout='javascript:hideCenterDetails()'>"+rs.getString("FRANCHISEE_NAME")+"</a>");
                    }else{
                    */
                    boolean isStore = false;
                	String submenu = "fimfran";
                	String franStatus = rs.getString("STATUS");
                	if("Y".equals(rs.getString("IS_STORE")) && "N".equals(rs.getString("IS_FRANCHISEE"))) {
                    	isStore = true;
                    	submenu = "fimInDevelopment";
                    }else if("0".equals(franStatus) || "4".equals(franStatus)){
                    	submenu = "fimtfran";
                    }else if("3".equals(franStatus)){
                    	submenu = "fimcfran";
                    }
                    //COMMENTS FOR P_B_59996 ENDS
                	//P_FIM_Independent InDev starts
                	
                	if("2".equals(inDevelopmentStatusFilter)){ 
                		
                		info.set(FieldNames.FRANCHISEE_NAME, rs.getString("FRANCHISEE_NAME"));
                	}else{
                		info.set(FieldNames.FRANCHISEE_NAME, "<a href=\"javascript:openCenterInfo('"+rs.getString("FRANCHISEE_NO")+"','"+submenu+"')\" onmouseover='javascript:showCenterDetails("+rs.getString("FRANCHISEE_NO")+")' onmouseout='javascript:hideCenterDetails()'>"+franchiseIdDispName+"</a>");
                	}//P_FIM_Independent InDev ends
                    //} COMMENTS FOR P_B_59996 
                    
                    
                    //P_E_FIM_7.1.0.10 modified by neeti ends
                    //P_E_SelectDiv Nishant Added onClick emethod

                    if("fromSearchFilter".equals(from) || "topSearch".equals(from)){// P_FIM_B_62348

                        info.set("selectedItem" ,"<input type='checkbox' name='selectedItem' value="+rs.getString("FRANCHISEE_NO")+" onClick='unCheckBox(this)'><input type='hidden' id='"+rs.getString("FRANCHISEE_NO")+"_franchiseeType' value="+rs.getString("FRANCHISEE_TYPE")+"><input type='hidden' name='emailval' value="+rs.getString("EMAIL_ID")+"><input type=\"hidden\" name=\"nameval\" value=\"" + rs.getString("FRANCHISEE_NAME") + "\">");
                    }else{
                        info.set("selectedItem" ,"<input type='checkbox' name='selectedItem' value="+rs.getString("FRANCHISEE_NO")+" onClick='uncheckAllTag(this.selected,this.form,this)'><input type='hidden' id='"+rs.getString("FRANCHISEE_NO")+"_franchiseeType' value="+rs.getString("FRANCHISEE_TYPE")+"><input type='hidden' name='emailval' value="+rs.getString("EMAIL_ID")+"><input type=\"hidden\" name=\"nameval\" value=\"" + rs.getString("FRANCHISEE_NAME") + "\">");
                    }
                    info.set(FieldNames.STORE_PHONE, PortalUtils.formatPhoneNo(rs.getString("STORE_PHONE"), rs.getString("COUNTRY") ));
                    //info.set(FieldNames.AREA_NAME, rs.getString("AREA_NAME"));
                  //P_FIM_Independent InDev starts
                    if( fimLeftUserRoleMap!=null && fimLeftUserRoleMap.isPrivilegeInMap("/fimAllArea") && !"2".equals(inDevelopmentStatusFilter)){
                        info.set(FieldNames.AREA_NAME, "<a href=\"javascript:openAreas('"+rs.getString("AREA_ID")+"','"+rs.getString("AREA_NAME")+"')\">"+rs.getString("AREA_NAME")+"</a>");
                    } else {
                        info.set(FieldNames.AREA_NAME,rs.getString("AREA_NAME"));
                    }//P_FIM_Independent InDev ends
                    //info.set(FieldNames.AREA_NAME, "<a href=\"javascript:openAreas('"+rs.getString("AREA_ID")+"','"+rs.getString("AREA_NAME")+"')\">"+rs.getString("AREA_NAME")+"</a>");
                    //P_FIM_E_LocationEntity start
                    //info.set(FieldNames.FIM_TT_ENTITY_NAME,(rs.getString("FIM_TT_ENTITY_NAME").equals("") || rs.getString("FIM_TT_ENTITY_NAME").equals("NULL")) ? "NA" : rs.getString("FIM_TT_ENTITY_NAME"));
                    //P_FIM_B_55131 Modified By Vikram Raj
                    String entityName=rs.getString("FIM_TT_ENTITY_NAME") !=null ? rs.getString("FIM_TT_ENTITY_NAME") : "";
                    info.set(FieldNames.FIM_TT_ENTITY_NAME,entityName);
                    String entityId=rs.getString("FIM_ENTITY_ID") !=null ? rs.getString("FIM_ENTITY_ID") : "";
                    info.set("FIM_ENTITY_ID",entityId);
                    //P_FIM_E_LocationEntity ends
                    //Sanjeev k date Format Config
                    info.set(FieldNames.DEACTIVATION_DATE,com.home.builderforms.DateUtil.getDisplayDate(rs.getString("DEACTIVATION_DATE")));
                    //P_FIM_E_ownerSorting By Nikhil Verma
                    info.set(FieldNames.OWNER_NAME, rs.getString("OWNERNAME"));
                            				/*if("fimInDevelopment".equals(from)) {
                            					info.set(FieldNames.OPENING_DATE, rs.getString("GRAND_STORE_OPENING_DATE"));
                            				} else {*/
                    info.set(FieldNames.OPENING_DATE, rs.getString("OPENING_DATE"));//P_FIM_B_75682 By Pritam

                    info.set(FieldNames.IS_STORE, rs.getString("IS_STORE"));//P_E_FIM_MOVETOFO
                    // BB-20141017-177  starts
                    info.set("ownerId",rs.getString("OWNER_ID"));

                    info.set("centre_name", rs.getString("CENTER_NAME"));
                    info.set("mobile", rs.getString("MOBILE"));
                    info.set("fax", rs.getString("FAX"));
                    info.set("email", rs.getString("EMAIL_ID"));
                    info.set("status", rs.getString("STATUS"));
                            				/*if("1".equals(rs.getString("STATUS")) || "3".equals(rs.getString("STATUS"))){
                            					info.set("statusName", "Active");
                            				}else{
                            					info.set("statusName", "Terminated");
                            				}*/
                    if(StringUtil.isValid(rs.getString("STORE_STATUS"))){
                        info.set("statusName",(String)CacheDataUtil.getMasterDataMap().get(rs.getString("STORE_STATUS")));
                    }
                    info.set("license_no",rs.getString("LICENSE_NO"));
                    String expirationDate = "";
                    if( rs.getString("EXPIRATION_DATE") != null && !(rs.getString("EXPIRATION_DATE").equals("00/00/0000") || (rs.getString("EXPIRATION_DATE")).equals("0000-00-00"))) {
                    	expirationDate=DateUtil.getDisplayDate(rs.getString("EXPIRATION_DATE")) ;
                    }
                    info.set("renewal_date",expirationDate);

                    info.set("license_type",rs.getString("DATA_VALUE"));
                    if(StringUtil.isValidArray(customFields)) { //BB-20141017-177 starts //711-20160920-245 starts 
                    	String syncfranchiseeNo =  rs.getString("FRANCHISEE_NO");
                    	CommonUtil.setCustomFieldValue(customarray,customFieldTypeArray,customFieldNameArray,"franchisees",fields,syncfranchiseeNo,"fim","franchisee",info,null,rs,passwordFunctionality);
                    	/*Map<String, String> syncFieldMap = DataCollector.getAllSyncValuesWithFieldMap("franchisees", "fim", syncfranchiseeNo);
                    	String tempValue ="";
                        for(int i=0;i<customarray.length;i++) {
                            String fieldValue = rs.getString(customarray[i]);
                            fieldValue = CommonUtil.transformCustomFieldValue(fieldValue, customFieldTypeArray[i], customFieldNameArray[i], "franchisees");
                            fieldValue=StringUtil.isValid(fieldValue)?fieldValue:"";
                            for(int j =0; j<fields.length; j++) { // BB-20150525-360 starts
                            	if ( customFieldNameArray[i].equals(fields[j].getFieldName()) && "Date".equals(fields[j].getDataType())&&fields[j].isPiiEnabled()) {
                            	fieldValue=com.home.builderforms.DateUtil.getDisplayDate(fieldValue);
                            	}else if(customFieldNameArray[i].equals(fields[j].getFieldName()) && StringUtil.isValid(fields[j].getSyncWithField()) ) { //BUG_72964
                            		tempValue =fieldValue ;
                            		if(syncFieldMap !=null && syncFieldMap.size() >0){    
                            			tempValue = DataCollector.getSyncFieldInFormPage(fields[j], syncFieldMap, fieldValue.equals("0")?"-1":fieldValue);
                            		}
                            		if(StringUtil.isValidNew(fields[j].getTransformMethod())){
                            			Class clsArr[] = new Class[] { String.class };
                            			Object valArr[] = new Object[] { tempValue };
                            			Method method = DataManipulator.getInstance().getClass().getDeclaredMethod(fields[j].getTransformMethod(), clsArr);
                            			fieldValue = (String) method.invoke(null, valArr);
                            			fieldValue = StringUtil.isValid(fieldValue) ? fieldValue : "";
                            		}else{
                            			fieldValue = tempValue;
                            		}
                            	}else{
                            		fieldValue=StringUtil.isValidWithZero(fieldValue)?fieldValue:"";
                            	}
                            	if("on".equals(passwordFunctionality)){
                            		
                            		if(customFieldNameArray[i].equals(fields[j].getFieldName())&&fields[j].isPiiEnabled()){
                                		if("no".equals(fromPiiAction)){
                                			fieldValue= PortalUtils.getPrivateFieldFormat(fieldValue, null) ;
                                		}else if("yes".equals(fromPiiAction)&&piiMap!=null&&"no".equals(piiMap.get(customarray[i]))){
                                		fieldValue= PortalUtils.getPrivateFieldFormat(fieldValue, null) ;
                                		}
                                  	 }// BB-20150525-360 ends
                            	}
                            }
                            info.set(customarray[i],StringUtil.isValidNew(fieldValue) ? fieldValue : "");
                        }
                    */}//711-20160920-245 ends 
                    // BB-20141017-177  ends

                    // BB-20141017-177  ends
                    
                    //P_B_59259
                    //info.set("franchiseeType",getFranchiseeType(rs.getString("STATUS"),rs.getString("IS_FRANCHISEE")));// BB-20150427-346 
                    info.set("franchiseeType",rs.getString("FRANCHISEE_TYPE"));	//P_B_59259
                    info.set("submenu",submenu);
                    
                    info.set(FieldNames.IS_FRANCHISEE,rs.getString("IS_FRANCHISEE"));// BB-20150427-346 
                    map.put(rs.getString("FRANCHISEE_NO"),info);
                }
                info		= null;
                franInfo	= null;
                ownerName	= null;
                rs			= null;
                query		= null;
                fromClause	= null;
                whereClause	= null;
                sortByClause	= null;
                queryforcount	= null;
            }

        }catch(Exception e){
            logger.error("\nException in com/appnetix/app/components/fimmgr/manager/dao - FIMDAO.java -->searchFranchisees: " ,e);
        }


        return map;
    }
 // BB-20150427-346 starts
    public static String getFranchiseeType(String status, String isFranchisee){
		
		String franchiseeType = FieldNames.EMPTY_STRING;
		if("1".equals(status) && "Y".equals(isFranchisee)) {
			franchiseeType = "Active";
			
		} else if(("0".equals(status)|| "4".equals(status))){
			franchiseeType = "Terminated";
		} else if("3".equals(status) && "Y".equals(isFranchisee) ) {
			franchiseeType = "Corporate Location";
			
		} else if("N".equals(isFranchisee)) {
			franchiseeType = "In Development";
		}
		
		return franchiseeType;
	}
 // BB-20150427-346 ends
    //setting the count of records
    private static void settotalRecords(int no) {
        //totalRecords = no;
        ParamResolver.getResolver().put("commonUtilTotalRecords", no);
    }
    //gettter method for totalRecords count
    public static int gettotalRecords() {
        //return totalRecords;
        return (Integer)ParamResolver.getResolver().get("commonUtilTotalRecords");
    }
    //ENH_SMARTCONNECT_SEP ends
    /**
     * Return header to be dispalyed at the top of Report
     * @author anubhav
     * @param matchType
     * @param startDate
     * @param endDate
     * @param date1
     * @return
     */
    public static String getReportHeader(String matchType,String startDate,String endDate,String date1){
        String header=FieldNames.EMPTY_STRING;
        startDate=DateUtil.formatDate(startDate);
        endDate=DateUtil.formatDate(endDate);
        date1=DateUtil.formatDate(date1);
        if(StringUtil.isValid(matchType) ||(StringUtil.isValid(startDate) && StringUtil.isValid(endDate))){
            header="(";
            if("55".equals(matchType)){
                header+=LanguageUtil.getString("All");
            }
            else if("46".equals(matchType)){
                header+=LanguageUtil.getString("After")+" - "+date1;
            }
            else if("45".equals(matchType)){
                header+=LanguageUtil.getString("Before")+" - "+date1;
            }
            else if("44".equals(matchType)){
                header+=LanguageUtil.getString("On")+" - "+date1;
            }
            else{
                header+=startDate + " - " + endDate;
            }
            header+=")";
        }
        return header;
    }
    //P_B_28946 starts
                                /*
                                 * method made to check whether for muid all locations are FO or not
                                 * if all are FO then return false
                                 * else if even a single is non-FO then return true
                                 */
    //For Product_Seperation_BL this method moved to BaseUtils By Amar Singh.
    public static boolean notAllFO(String franchiseeNos)
    {
        return BaseUtils.notAllFO(franchiseeNos);
                            		/*StringBuilder query = new StringBuilder("SELECT COUNT(IS_FRANCHISEE) AS COUNT FROM FRANCHISEE WHERE FRANCHISEE_NO IN ("+franchiseeNos+") and IS_FRANCHISEE='Y'");
                            		ResultSet resultSet = null;
                            		try 
                            		{
                           				resultSet = QueryUtil.getResult(query.toString(),null);

                            			if(resultSet!=null && resultSet.next()){
                            				String count = resultSet.getString("COUNT");
                            				if(StringUtil.isValid(count))
                            				{
                            					if(Integer.parseInt(count) > 0)
                            					{
                            						return true;
                            					}
                            				}
                            			}
                            		}  catch (Exception e) {
                            			return false;
                            		} finally {
                            			QueryUtil.releaseResultSet(resultSet);
                            		}

                            		return false;*/
    }
    //P_B_28946 ends

    //PC_CM_B_29013 by Ravi


    //P_E_MUID_EMPLOYEE_ASSOCIATION starts
    /**
     * Returns combo of existying employees
     */
    public static String getExistingEmployees(String fimFranchiseeNo,String areaID,boolean fromAdmin){

        StringBuffer employeeCombo =null;
        String query;
        String employeeId = "";
        String firstName="";
        String lastName="";
        ResultSet rs=null;
        try{
            query="SELECT FE.EMPLOYEE_ID, FE.FIRST_NAME, FE.LAST_NAME FROM FRANCHISEE F, FIM_EMPLOYEES FE, FIM_EMPLOYEES_MAPPING FEM WHERE F.FRANCHISEE_NO=FEM.FRANCHISEE_NO AND FEM.EMPLOYEE_ID=FE.EMPLOYEE_ID AND FE.IS_DELETED='N' AND FE.EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM FIM_EMPLOYEES_MAPPING WHERE FRANCHISEE_NO="+fimFranchiseeNo+" AND EMPLOYEE_ID IS NOT NULL) AND F.FRANCHISEE_NO IN(SELECT DISTINCT FRANCHISEE_NO FROM OWNERS WHERE OWNER_ID IN(  SELECT DISTINCT OWNER_ID FROM OWNERS WHERE FRANCHISEE_NO="+fimFranchiseeNo+" ))  ";    //P_FIM_B_3990
            if(areaID!=null && !areaID.equals(""))
                query = query + " AND F.AREA_ID= "+areaID;

            query = query + " GROUP BY FE.EMPLOYEE_ID ORDER BY FIRST_NAME, LAST_NAME";

            logger.info("QUERY IN FIM DAO --------->"+query);
            rs = QueryUtil.getResult(query,null);
            String notAvailable=LanguageUtil.getString("Not Available");//P_FIM_B_5764  
            if(MultiTenancyUtil.getTenantConstants().MUID_ACTIVE){
                employeeCombo= new StringBuffer("<Select name=\"exEmployeeIDs\" id=\"exEmployeeIDs\" onChange=\"showMuid()\"  class=\"form-control\" style=\"width: 200\" multiple size=\"4\">") ;//P_ADMIN_E_MUID
            }
            else{
                employeeCombo= new StringBuffer("<Select name=\"exEmployeeIDs\" id=\"exEmployeeIDs\"  class=\"form-control\" style=\"width: 200\" multiple size=\"4\">") ;//P_ADMIN_E_MUID
            }
            if(rs == null || rs.size()<1){
                employeeCombo.append("<option value='0' disabled>"+notAvailable+"</option>");//P_FIM_B_5764  
            }

            while (rs.next()) {
                String employeeName ="";
                employeeId	= rs.getString("EMPLOYEE_ID");
                firstName=rs.getString("FIRST_NAME");
                lastName =rs.getString("LAST_NAME");

                if( lastName !=null || !lastName.equals("") )
                    employeeName = firstName + " " + lastName;
                else
                    employeeName =firstName;


                if(firstName == null || firstName.equals(""))
                    if(!employeeName.equals("") && employeeName != null)
                        //  	 CR:503_MultipleEmployeeLogin starts- changes done as there is no comma seperated First Name and last name initially  
                        employeeName= lastName;
                //  CR:503_MultipleEmployeeLogin ends
                if(!employeeName.equals("")) {
                    employeeCombo.append("<option value=\"");
                    employeeCombo.append(employeeId);
                    employeeCombo.append("\">");
                    employeeCombo.append(employeeName);
                    employeeCombo.append("</option>");
                }
            }

            employeeCombo.append("</Select>");

        } catch(Exception e) {
            logger.error("Exception in getExistingEmployees"+e.getMessage());
        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }
        return 	employeeCombo.toString();
    }


    // P_B_SUPP_35393
    public static Info getInfoForAnyCombo(String tableName, String keyField,
                                          String valueField, String whereCondition, String sortByField,
                                          String sortOrder) {
        return getInfoForAnyCombo(tableName, keyField, valueField,
                whereCondition, sortByField, sortOrder, null);
    }
    // P_B_SUPP_35393
    // START : P_ENH_SUPP : 060314 : 06/03/2014 : Neeraj Kumar
    public static Info getInfoForAnyCombo(String tableName, String keyField,
                                          String valueField, String whereCondition, String sortByField,
                                          String sortOrder, String sortType) {
        Info comboInfo = new Info();
        ResultSet result = null;
        try {
            if (StringUtil.isValid(tableName) && StringUtil.isValid(keyField)
                    && StringUtil.isValid(valueField)) {
                StringBuffer queryBuff = new StringBuffer("SELECT " + keyField
                        + "," + valueField + "  FROM " + tableName);
                if (StringUtil.isValid(whereCondition)) {
                    queryBuff.append(" WHERE " + whereCondition);
                }

                // P_B_SUPP_35393
                if (StringUtil.isValid(sortType) && "Y".equals(sortType)) {

                    if (StringUtil.isValid(valueField)) {
                        queryBuff.append(" ORDER BY " + valueField);
                        logger.info("records444 for vendors::::" + sortType);
                    }
                }
                // P_B_SUPP_35393
                else {
                    if (StringUtil.isValid(sortByField)) {
                        queryBuff.append(" ORDER BY " + sortByField);
                    }
                }

                if (StringUtil.isValid(sortOrder)) {
                    queryBuff.append(" " + sortOrder);
                }
                result = QueryUtil.getResult(queryBuff.toString(),
                        new Object[] {});
                if (result != null) {
                    while (result.next()) {
                        comboInfo.set(result.getString(keyField),
                                result.getString(valueField));
                    }
                }
            }
        } catch (Exception e) {
            logger.error("exception while getting records for vendors", e);
        } finally {
            QueryUtil.releaseResultSet(result);
        }
        return comboInfo;
    }

    /**
     * This function is used for checking recent PPC calls on bottom bar jsp
     * @see SMC-20140313-420
     * @author Deepak Gangore                           
     */
    public static boolean recentPPCCalls(String userLevel, String franchiseeNo){
        int recentCallCount = 0;
        ResultSet result = null;
        boolean callExists = false;
        String accountId = SQLUtil.
                getColumnValue("ADWORDS_ACCOUNTS_MAPPING", "TW_SID",
                        "FRANCHISE_NO", franchiseeNo);
        StringBuilder query = null;
        if(StringUtil.isValidNew(accountId)){
            query = new StringBuilder("SELECT COUNT(ATC1.CALL_ID) " +
                    "AS RECENT_CALL_COUNT FROM (SELECT CALL_ID,FROM_CALLER, " +
                    "END_TIME, SID FROM ADWORDS_TW_CALL_DETAILS WHERE " +
                    "DIRECTION = 'outbound-dial' AND TYPE='call' AND CONTACT_ID " +
                    "IS NULL AND VIEW_FLAG = 0) AS ATC1 INNER JOIN " +
                    "(SELECT CALL_ID, FROM_CALLER, END_TIME FROM " +
                    "ADWORDS_TW_CALL_DETAILS WHERE DIRECTION = 'inbound'  " +
                    "AND TYPE='call' AND CONTACT_ID IS NULL AND VIEW_FLAG = 0) " +
                    "AS ATC2 ON ATC1.END_TIME = ATC2.END_TIME AND " +
                    "ATC1.FROM_CALLER = ATC2.FROM_CALLER JOIN " +
                    "ADWORDS_ACCOUNTS_MAPPING AAM ON AAM.TW_SID=ATC1.SID JOIN " +
                    "FRANCHISEE F ON F.FRANCHISEE_NO=AAM.FRANCHISE_NO  WHERE 1=1 ");
            if("1".equals(userLevel)){
                query.append(" AND  F.FRANCHISEE_NO IN ("+franchiseeNo+") ");
            }
            try{
                result = QueryUtil.getResult(query.toString(), null);
                while(result.next()){
                    recentCallCount = result.getInteger(1);
                }
            }catch(Exception e){
                logger.error("Exception in  getting recent calls count "+e);
            }
        }
        if(recentCallCount > 0){
            callExists = true;
        }
        return callExists;
    }
    //Valvol-20140310-006 startrs
    //Valvol-20140310-006 ends

    /*
  	  * @author Teena Sharma   
  	  */
    public static boolean getScopeCheck() {
        return  "Y".equalsIgnoreCase(MultiTenancyUtil.getTenantConstants().SCOPE_CONFIGURATION)?true:false;
    }

    /**
     * @author Naman Jain
     * @param request
     * @param fromWhere
     * @return HashMap<String, Info>
     * @desc this will return the HashMap for the login logs in Admin section
     */
    public static HashMap<String, Info> getLoginLogsFilterMap(HttpServletRequest request, String fromWhere) {
        HashMap<String, Info> fieldsMap = new HashMap<String, Info>();

        Info infoLoginDetailForm			= new Info();
        Info info1				= new Info();
        HttpSession ses				= request.getSession();
        //Date todayDate=com.home.builderforms.DateUtil.getCurrentDate();
        Date backDate =com.home.builderforms.DateUtil.getCurrentDate();
        backDate=com.home.builderforms.DateUtil.addDate(backDate,-1,"m");

        String dateFrom = (String)ses.getAttribute("dateFrom");
        String dateTo	= (String)ses.getAttribute("dateTo");



        info1 = new Info();
        info1.set("displayName","From Date");
        info1.set("htmlDisplayName","<span class='urgent_fields'>*</span>displayName");
        info1.set("type","date");
        if("userNotLoggedIn".equals(fromWhere)) {
            info1.set("formname","logoutListForm");
        } else {
            info1.set("formname","chooseForm");
        }
        info1.set("contextname",request.getContextPath());
        info1.set("value",com.home.builderforms.DateUtil.getDisplayDate(dateFrom));
        infoLoginDetailForm.set(FieldNames.FROM_DATE,info1);

        info1 = new Info();
        info1.set("displayName","To Date:");
        info1.set("htmlDisplayName","<span class='urgent_fields'>*</span>displayName");
        info1.set("type","date");
        if("userNotLoggedIn".equals(fromWhere)) {
            info1.set("formname","logoutListForm");
        } else {
            info1.set("formname","chooseForm");
        }
        info1.set("contextname",request.getContextPath());
        info1.set("value",com.home.builderforms.DateUtil.getDisplayDate(dateTo));
        infoLoginDetailForm.set(FieldNames.LAST_DATE,info1);

        if("userLoggedIn".equals(fromWhere) || "userNotLoggedIn".equals(fromWhere)) {
            String userdetails = request.getParameter("userdetails");
            if("userNotLoggedIn".equals(fromWhere)) {
                userdetails	= (String)request.getAttribute("userType1");
            }
            String sortKey = (request.getParameter("sortKey")==null?"name":request.getParameter("sortKey"));
            info1 = new Info();
            Combo combo = new Combo("System Users");
            combo.setOption("-1", LanguageUtil.getString("System Users"));
			combo.setOption("0", LanguageUtil.getString("Corporate Users"));
			if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED)){
				combo.setOption("6", LanguageUtil.getString(MultiTenancyUtil.getTenantConstants().DIVISION_USER_LABEL));
			}
			combo.setOption("2", LanguageUtil.getString("Regional Users"));
			if (ModuleUtil.franchiseModules() && (!(ModuleUtil.onlyfimImplemented() || ModuleUtil.onlyFSDashBoardImplemented()) || MultiTenancyUtil.getTenantConstants().WS_SYNC )) {
				combo.setOption("1", LanguageUtil.getString("Franchise Users"));
            }
            combo.setShowDefault(false);
            //P_B_46917
			/*if("userLoggedIn".equals(fromWhere)) {
				combo.setJScript("onChange = changeuserdetail('"+sortKey+"')");
			} else if("userNotLoggedIn".equals(fromWhere)) {
				combo.setJScript("onChange = 'changeuserdetail(this.value)'");
			}*///P_B_46917
            info1.set("value", userdetails);
            info1.set("type", combo);
            if("userLoggedIn".equals(fromWhere)) {
                infoLoginDetailForm.set("userdetails", info1);
            } else if("userNotLoggedIn".equals(fromWhere)) {
                infoLoginDetailForm.set("userType", info1);
            }
        }

        fieldsMap.put("row1", infoLoginDetailForm);

        infoLoginDetailForm = new Info();
        info1 = new Info();
        info1.set("displayName", "");
        info1.set("type", "button");
        info1.set("value", "Search");
        info1.set("colspan","4");
        info1.set("jsFunction", "onclick=\"return validateForm();\"");
        infoLoginDetailForm.set("searchButton", info1);

        info1 = new Info();
        info1.set("displayName", "");
        info1.set("type", "button");
        info1.set("value", "Cancel");
        info1.set("colspan","4");
        info1.set("jsFunction", "onclick=\"javascript:window.location='administration?cft="+java.net.URLEncoder.encode((String)request.getSession().getAttribute("csrfToken"))+"#Access_Control'\"");
        infoLoginDetailForm.set("cancelButton", info1);

        fieldsMap.put("row2", infoLoginDetailForm);

        return fieldsMap;
    }

    /**
     * This function is used to populate the combo for fieldName by the response of the parent field.
     * BB-20150203-259 (Dynamic Response based on parent field response)
     * @author Naman Jain
     * @param parentFieldValue
     * @param fieldNameTarget
     * @param selectedValue
     * @return
     */
    public static StringBuffer getDependentComboData(String parentFieldValue, String fieldNameTarget, String selectedValue, String tableAliasName) 
    {
    	return getDependentComboData(parentFieldValue,fieldNameTarget,selectedValue,tableAliasName,false);
    }

    public static StringBuffer getDependentComboData(String parentFieldValue, String fieldNameTarget, String selectedValue, String tableAliasName, boolean isMultiSelectCombo) {
        StringBuffer returnValue = new StringBuffer();
        selectedValue = URLDecoder.decode(selectedValue);
        parentFieldValue = URLDecoder.decode(parentFieldValue);
        String query = "SELECT OPTION_ID,OPTION_VALUE FROM FIM_BUILDER_MASTER_DATA  WHERE FIELD_NAME = '"+fieldNameTarget+"' AND (IS_ACTIVE = 'Y' ";
        
        if(StringUtil.isValid(selectedValue)) {
        	query+=" OR  OPTION_ID IN ("+selectedValue+")";
        }
        if(parentFieldValue.indexOf(',') != -1) {
        	query+=") AND DEPENDENT_VALUE IN ("+parentFieldValue+") ORDER BY ORDER_NO"; //P_Enh_Form_Builder_Option_Sequence
        } else {
        	query+=") AND DEPENDENT_VALUE = '"+parentFieldValue+"' ORDER BY ORDER_NO"; //P_Enh_Form_Builder_Option_Sequence
        }
        
        Info info = SQLUtil.getInfoFromQuery("OPTION_ID","OPTION_VALUE",query,false);
        SequenceMap resultMap = info.getSequenceMap();// CommonUtil.getComboMap("OPTION_ID", "OPTION_VALUE", "FIM_BUILDER_MASTER_DATA",  new String[]{"FIELD_NAME", "DEPENDENT_VALUE", "IS_ACTIVE"}, new String[]{fieldNameTarget, parentFieldValue, "Y"}, "OPTION_ID");
        
        if("cmCompanyInfo_0".equals(tableAliasName)) {
        	fieldNameTarget = tableAliasName + fieldNameTarget;
        } else if(StringUtil.isValidNew(tableAliasName)) {
            fieldNameTarget = tableAliasName + "_" + fieldNameTarget;
        }
        String selectvalue = "[\"-1\",\""+LanguageUtil.getString("Select")+"\"]";
        
        if(isMultiSelectCombo && resultMap!= null && resultMap.size() > 0){ // To remove the Select All option from multi-select combi in mobile version.
        	selectvalue = null;
        }
        if (resultMap != null) {
            boolean selectFlag=false;
            int selectedIndex = 0;
            ArrayList  keys = (ArrayList)resultMap.keys();
            ArrayList  values = (ArrayList)resultMap.values();
            returnValue.append("var _targ=document.getElementsByName(\"" + fieldNameTarget + "\")[0];");
            returnValue.append("var i = 0;");
            returnValue.append("while (true){ ");
            returnValue.append("if (_targ.type == 'select-one' || _targ.type == 'select-multiple')");
            returnValue.append("break;");
            returnValue.append(" _targ=document.getElementsByName(\"" + fieldNameTarget + "\")[i++];");
            returnValue.append(" }");

            returnValue.append("_targ.options.length=0;");
            returnValue.append("var _keys=[");
            if(selectvalue!=null && !"".equals(selectvalue)) {
                selectFlag=true;
            } else {
                selectFlag=false;
            }

            if(selectFlag) {
                returnValue.append(selectvalue);
            }
            
            if(StringUtil.isValidNew(selectedValue)){
            	selectedValue = ","+selectedValue.replaceAll(" ", "").trim()+",";
			}
            String matchingKey = "";
            StringBuffer selectingString = new StringBuffer();
            
            for (int i = 0; i < keys.size(); i++) {
            	matchingKey = (String)keys.get(i);
                if(selectFlag) {
                	if(selectedValue.indexOf(","+matchingKey+",")!= -1){
						selectedIndex = i+1;
						selectingString.append("_targ["+selectedIndex+"].selected=true;");
					}	
                    
                } else {
                    if(selectedValue.indexOf(","+matchingKey+",")!= -1){
						selectedIndex = i;
						selectingString.append("_targ["+selectedIndex+"].selected=true;");
					}	
                }

                if(selectFlag || i>0) {
                    returnValue.append(",");
                }
                returnValue.append("[\"" + keys.get(i) + "\",\"" + StringUtil.replaceAppostrophiWithSlashesForJS(values.get(i)+"") + "\"]");
            }
            returnValue.append("];");
            returnValue.append("for( var i=0; i < _keys.length; i++ ) {");
            returnValue.append(" _targ.options[ i ] = new Option( _keys[i][1], _keys[i][0] ); ");
            returnValue.append("};");
            returnValue.append("_targ.options.length=_keys.length;");
            returnValue.append(selectingString);
            //returnValue.append("_targ.selectedIndex="+selectedIndex+";");
            returnValue.append(" if( typeof numberOfAjaxCombos !=\"undefined\" ){ numberOfAjaxCombos = numberOfAjaxCombos +1;  enableButtonsAJAXComplete();}");
        }
        return returnValue;
    }

    /**
     * Sourabh MultiSelect
     * @param parentFieldValue
     * @param fieldNameTarget
     * @param selectedValue
     * @param tableAliasName
     * @param mainTableName
     * @param Param1
     * @param param2
     * @param whereColumn1
     * @param whereColumn2
     * @param parentID
     * @return
     */
    public static StringBuffer getDependentMultiSelectData(String parentFieldValue, String fieldNameTarget, String selectedValue, String tableAliasName, String mainTableName, String Param1, String param2, String whereColumn1, String whereColumn2, String parentID) 
    {
        StringBuffer returnValue = new StringBuffer();
        SequenceMap resultMap = new SequenceMap();
        String whereClause = " WHERE 1=1 ";
        if("FS_LEAD_SOURCE3".equals(mainTableName))
        {
        	whereClause += " AND FLAG = 'Y' ";
        }
        if(StringUtil.isValid(selectedValue))
        {
        	selectedValue = URLDecoder.decode(selectedValue);
        	if(selectedValue.indexOf(":")!=-1)
        	{
        		selectedValue = selectedValue.replaceAll(":", ",");
        	}
        }
        if(StringUtil.isValid(parentFieldValue))
        {
        	parentFieldValue = URLDecoder.decode(parentFieldValue);
        	if(parentFieldValue.indexOf(":")!=-1)
        	{
        		parentFieldValue = parentFieldValue.replaceAll(":", ",");
        	}

        	if(parentFieldValue.indexOf(",")!=-1)
        	{
        		String[] arr = parentFieldValue.split(",");
        		parentFieldValue = "";
        		for(int i=0; i< arr.length; i++)
        		{
        			arr[i] = arr[i].trim();
        			if(arr[i].indexOf("B7_") != -1)
        			{
        				arr[i] = "7";
        			}
        		}
        		parentFieldValue = StringUtil.toCommaSeparatedSpaceLess(arr);
        	}else
        	{
        		if(parentFieldValue.indexOf("B7_") != -1)
        		{
        			parentFieldValue = "7";
        		}
        	}
        }
        
        if(StringUtil.isValid(parentID))
        {
        	parentID = URLDecoder.decode(parentID);
        	parentID = StringUtil.toCommaSeparatedSpaceLess(parentID.split(","));
        }
        
        StringBuilder query = new StringBuilder("SELECT ");
        query.append(Param1).append(", ").append(param2);
        query.append(" FROM ").append(mainTableName).append(whereClause);
        
        if(StringUtil.isValid(parentFieldValue))
        {
        	if("-1".equals(parentFieldValue))
        	{
        		//do nothing
        	}else
        	{
        		query.append(" AND ").append(whereColumn1).append(" IN (").append(parentFieldValue).append(")");
        	}
        }else
        {
        	query = null;
        }
        
        if(StringUtil.isValid(parentID) && query != null)
        {
        	if("-1".equals(parentID))
        	{
        		//do nothing
        	}else
        	{
        		query.append(" AND ").append(whereColumn2).append(" IN (").append(parentID).append(")");
        	}
        }
        if("REGIONS".equals(mainTableName)){ //BUG_82302
        	query.append(" ORDER BY REGION_NAME");
        }
        	
        if(query != null)
        {
        	Info info = SQLUtil.getInfoFromQuery(Param1,param2,query.toString(),false);
        	resultMap = info.getSequenceMap();
        }
        if(StringUtil.isValidNew(tableAliasName))
        {
        	fieldNameTarget = tableAliasName + "_" + fieldNameTarget;
        }
        String selectvalue = "[\"-1\",\""+LanguageUtil.getString("Select")+"\"]";

        return getComboJavaScript(resultMap,fieldNameTarget,selectedValue);
    }

    /**
     * Sourabh MultiSelect
     * @param dataset
     * @param key
     * @param key1
     * @param target
     * @param selectedValue
     * @return
     */
    public static StringBuffer getBrokerDetailsMultiSelectCombo(String dataset,String key,String key1,String target,String selectedValue) 
    {
    	String newKey1 = key1;
    	String newKey = key;
    	SequenceMap resultMap = new SequenceMap();
    	String[] key1Val = null;
    	String[] keyVal = null;
    	StringBuffer returnValue =  new StringBuffer();
    	String selectvalue = null;
    	if(StringUtil.isValid(key) && StringUtil.isValid(key1))
    	{
    		try {
				key1 = key1.replaceAll(":", ",");
				key = key.replaceAll(":", ",");
				if(key1.indexOf(",")!= -1)
				{
					key1Val = key1.split(",");
					newKey1 = "";
					for(int i=0; i<key1Val.length; i++)
					{
						if(key1Val[i].indexOf("B7_")!=-1)
						{
							newKey1 += key1Val[i].substring(key1Val[i].indexOf("_")+1) + ",";
							//key1Val[i] = key1Val[i].substring(key1Val[i].indexOf("_")+1);
						}else{
							newKey1 = "7";									//P_B_78737   
						}
					}
					newKey1 = newKey1.substring(0, newKey1.length()-1);
				}else if(key1.indexOf("_")!=-1)
				{
					newKey1=key1.substring(key1.indexOf("_")+1);
				}
				
				if(key.indexOf(",")!= -1)
				{
					keyVal = key.split(",");
					for(int i=0; i<keyVal.length; i++)
					{
						if(keyVal[i].indexOf("_")!=-1)
						{
							keyVal[i] = keyVal[i].substring(keyVal[i].indexOf("_")+1);
						}
					}
					newKey = "";
					newKey = StringUtil.toCommaSeparatedSpaceLess(keyVal);
				}else if(key.indexOf("_")!=-1)
				{
					newKey=key.substring(key.indexOf("_")+1);
				}
				if("7".equals(newKey1))
				{
					resultMap = getComboMap("BROKER_ID", "CONCAT(FIRST_NAME,\" \", LAST_NAME) AS BROKER_NAME", "BROKER_DETAILS, FS_LEAD_SOURCE3", new String[]{"FS_LEAD_SOURCE3.BROKER_NO=BROKER_DETAILS.BROKER_AGENCY_ID AND FS_LEAD_SOURCE3.LEAD_SOURCE3_ID "}, new String[]{newKey}, "FIRST_NAME");
				}else
				{
					resultMap = getComboMap("BROKER_ID", "CONCAT(FIRST_NAME,\" \", LAST_NAME) AS BROKER_NAME", "BROKER_DETAILS, FS_LEAD_SOURCE3", new String[]{"FS_LEAD_SOURCE3.BROKER_NO=BROKER_DETAILS.BROKER_AGENCY_ID AND FS_LEAD_SOURCE3.LEAD_SOURCE3_ID ","CONTACT_TYPE"}, new String[]{newKey,newKey1}, "FIRST_NAME");
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    	return getComboJavaScript(resultMap,target,selectedValue);
    }

    public static StringBuffer getComboJavaScript(  SequenceMap resultMap,String fieldNameTarget, String selectedValue) {
        StringBuffer returnValue = new StringBuffer();
        
        String selectvalue = "[\"-1\",\""+LanguageUtil.getString("Select")+"\"]";

        if (resultMap != null) {
            boolean selectFlag=false;
            int selectedIndex = 0;
            ArrayList  keys = (ArrayList)resultMap.keys();
            ArrayList  values = (ArrayList)resultMap.values();
            returnValue.append("var _targ=document.getElementsByName(\"" + fieldNameTarget + "\")[0];");
            returnValue.append("var i = 0;");
            returnValue.append("if(_targ){");  //P_B_81302
            returnValue.append("while (true){ ");
            returnValue.append("if (_targ.type == 'select-one' || _targ.type == 'select-multiple')");
            returnValue.append("break;");
            returnValue.append(" _targ=document.getElementsByName(\"" + fieldNameTarget + "\")[i++];");
            returnValue.append(" }");

            returnValue.append("_targ.options.length=0;");
            returnValue.append("var _keys=[");
            if(selectvalue!=null && !"".equals(selectvalue)) {
                selectFlag=true;
            } else {
                selectFlag=false;
            }

            if(selectFlag) {
                returnValue.append(selectvalue);
            }
            
            if(StringUtil.isValidNew(selectedValue)){
            	selectedValue = URLDecoder.decode(selectedValue);
            	selectedValue = ","+selectedValue.replaceAll(" ", "").trim()+",";
			}
            String matchingKey = "";
            StringBuffer selectingString = new StringBuffer();
            
            for (int i = 0; i < keys.size(); i++) {
            	
            	matchingKey = (String)keys.get(i);
                if(selectFlag) {
                	if(selectedValue.indexOf(","+matchingKey+",")!= -1){
						selectedIndex = i+1;
						selectingString.append("_targ["+selectedIndex+"].selected=true;");
					}	
                    
                } else {
                    if(selectedValue.indexOf(","+matchingKey+",")!= -1){
						selectedIndex = i;
						selectingString.append("_targ["+selectedIndex+"].selected=true;");
					}	
                }

                if(selectFlag || i>0) {
                    returnValue.append(",");
                }
                returnValue.append("[\"" + keys.get(i) + "\",\"" + StringUtil.replaceAppostrophiWithSlashesForJS(values.get(i)+"") + "\"]");
            }
            returnValue.append("];");
            returnValue.append("for( var i=0; i < _keys.length; i++ ) {");
            returnValue.append(" _targ.options[ i ] = new Option( _keys[i][1], _keys[i][0] ); ");
            returnValue.append("};");
            returnValue.append("_targ.options.length=_keys.length;");
            returnValue.append(selectingString);
            returnValue.append(" if( typeof numberOfAjaxCombos !=\"undefined\" ){ numberOfAjaxCombos = numberOfAjaxCombos +1;  enableButtonsAJAXComplete();}");
            returnValue.append("}");       //P_B_81302
        }
        return returnValue;
    }
    
    /**
     * This function is used to enable/disable the radio for parent field.
     * @param parentFieldValue
     * @param fieldNameTarget
     * @param selectedValue
     * @return
     */
    public static StringBuffer getDisabledEnabledCustomData(String parentFieldValue, String fieldNameTarget, String selectedValue) {
        StringBuffer returnValue = new StringBuffer();
        selectedValue = URLDecoder.decode(selectedValue);
        String query = "SELECT OPTION_ID,OPTION_VALUE FROM FIM_BUILDER_MASTER_DATA  WHERE FIELD_NAME = '"+fieldNameTarget+"' AND (IS_ACTIVE = 'Y' ";
        
        if(StringUtil.isValid(selectedValue)) {
        	query+=" OR  OPTION_ID IN ("+selectedValue+")";
        }
        if(parentFieldValue.indexOf(',') != -1) {
        	query+=") AND DEPENDENT_VALUE IN ("+parentFieldValue+") ORDER BY ORDER_NO"; //P_Enh_Form_Builder_Option_Sequence
        } else {
        	query+=") AND DEPENDENT_VALUE = '"+parentFieldValue+"' ORDER BY ORDER_NO"; //P_Enh_Form_Builder_Option_Sequence
        }
        
        Info info = SQLUtil.getInfoFromQuery("OPTION_ID","OPTION_VALUE",query,false);
        SequenceMap resultMap = info.getSequenceMap();
        //SequenceMap resultMap =  CommonUtil.getComboMap("OPTION_ID", "OPTION_VALUE", "FIM_BUILDER_MASTER_DATA",  new String[]{"FIELD_NAME", "DEPENDENT_VALUE", "IS_ACTIVE"}, new String[]{fieldNameTarget, parentFieldValue, "Y"}, "OPTION_ID");
        if(resultMap != null && resultMap.size() > 0) {
            returnValue.append(",");
            for(int i=0; i<resultMap.size(); i++) {
                returnValue.append(resultMap.getKey(i)).append(",");
            }
        }
        return returnValue;
    }

    //Added by Anuj 2006-01-11 for Audit History
    // P_E_FIM_58658 By Nikhil Verma
    public Info convertIdFields(Info infoToConvert,HttpServletRequest request,String tableAnchor){
        Info convertedInfo = new Info();

        try{
            if (infoToConvert != null){
                for (Iterator it = infoToConvert.getKeySetIterator(); it.hasNext();){
                    String key = (String) it.next();
                    Field fld = DBUtil.getInstance().getFieldMappings(tableAnchor).getField(key);
                    if (fld != null){
                        // P_E_FIM_58658 By Nikhil Verma
                        ExportDataCollector exportDCol=  new ExportDataCollector();
                        exportDCol.init(request,tableAnchor);
                        String newValue ="";
                        String paramData ="";
                        String sDisType	= fld.getDisplayTypeField();
                        DataManipulator manipulator = DataManipulator.getInstance();
                        // Added by Veerpal Singh against Bug#10464
                        if(fld.isBuildField()) {
                            if(fld.getTransformMethodParam()!=null && !"".equals(fld.getTransformMethodParam()))
                            {
                                try {
                                    /**
                                     * Check whether Param Field value exist in FieldNames otherwise get default Param value from Field Object as added through XML 
                                     */
                                    if(StringUtil.isValid(FieldNames.getVal(fld.getTransformMethodParam()))) {
                                        newValue = exportDCol.transform1(fld,infoToConvert.get(key),infoToConvert.getString(FieldNames.getVal(fld.getTransformMethodParam())));
                                    } else {
                                        newValue = exportDCol.transform1(fld,infoToConvert.get(key),infoToConvert.getString(fld.getTransformMethodParam()));
                                    }
                                } catch(Exception e) {
                                    logger.error(e);
                                }
                            }
                            else if(fld.getTransformMethod()!=null && !"".equals(fld.getTransformMethod()))
                            {
                                newValue = exportDCol.transform1(fld,infoToConvert.get(key));
                            }else{
                                newValue=infoToConvert.get(key);
                            }
                        }else{
                            if(sDisType != null && (sDisType.equals("Text") || sDisType.equals("Numeric") || sDisType.equals("Date"))){
                                newValue = manipulator.transform(fld,infoToConvert.get(key),fld.getTransformMethodParam(),null);
                            }
                            else if(sDisType != null && sDisType.equals("Checkbox")){
                                String chkBVal =infoToConvert.get(key);
                                if(chkBVal != null) {
                                    newValue = BuilderFormWebImpl.getInstance().getCheckboxOptionsValueForId(fld.getFieldName(),tableAnchor, infoToConvert.get(key));
                                }
                            }else if(sDisType != null && sDisType.equals("Radio")) {
                                if(infoToConvert.get(key) != null) {
                                    newValue = BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fld.getFieldName(),tableAnchor, infoToConvert.get(key));
                                }
                            }else if(sDisType != null && sDisType.equals("Combo")) {
                                if(!StringUtil.isValid(fld.getTransformMethod())){
                                	//if(!infoToConvert.get(key).equals("-1")) {//RPM-20150626-618 starts
									//if(!"-1".equals(infoToConvert.get(key))) {//RPM-20150626-618 ends
                                	if(StringUtil.isValidNew(infoToConvert.getString(key))) {//RPM-20150626-618 ends		//dki-20160912-591 Udai Agarwal
                                        newValue = BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fld.getFieldName(),tableAnchor, infoToConvert.get(key));
                                        if(newValue== null)				//dki-20160912-591 Udai Agarwal
                                        {
                                        	newValue = "";
                                        }
                                    }
                                } else if(StringUtil.isValid(fld.getTransformMethod())) {
                                    String valFld = infoToConvert.get(key);
                                    if(fld.getComboSourceMethodOtherField() != null && fld.getComboSourceMethodOtherFieldType().equals(valFld.trim())) {
                                        newValue = fld.getComboSourceMethodOtherField();
                                    } else {

                                        if(StringUtil.isValid(fld.getComboMethodParam()))
                                            newValue = manipulator.transform(fld,infoToConvert.get(key),fld.getComboMethodParam(),null);
                                        else
                                            newValue	= 	manipulator.transform(fld,infoToConvert.get(key),"",null);
                                    }
                                }
                            }else
                            {
                                newValue=infoToConvert.get(key);

                            }
                        }
                        convertedInfo.set(key, newValue);
                    }else{

                        convertedInfo.set(key, infoToConvert.get(key));
                    }
                }
            }
        }catch(Exception e){
            logger.error(e,e);
        }
        return convertedInfo;
    }

    /**
     * Added by Sunilk on 24 Feb 2006 to convert the date format for Audit History.
     * To taken care of false audit hsitory on date fields.
     * To taken care of false trigger mails send for date fields.
     */

    public Info convertDateFields(Info infoToConvert,String tableAnchor){
        Info convertedInfo = new Info();
        try{
            if (infoToConvert != null){
                for (Iterator it = infoToConvert.getKeySetIterator(); it.hasNext();){
                    String key = (String) it.next();
                    Field fld = DBUtil.getInstance().getFieldMappings(tableAnchor).getField(key);
                    if (fld != null && fld.getDataType() != null && fld.getDataType().equals("Date")){
                        //Sanjeev  37002_date_format
                        String newValue = PortalUtils.getAuditFormatDate(infoToConvert.get(key));
                        //String newValue = infoToConvert.get(key);
                        convertedInfo.set(key, newValue);
                    }else{
                        convertedInfo.set(key, infoToConvert.get(key));
                    }
                }
            }
        }catch(Exception e){
            logger.error(e,e);
        }
        return convertedInfo;
    }



    /**
     * Responsible for decryption
     * @param strText
     * @return
     */
    public static String decrypt(String strText) {
        try{
            String strPwd = "cryptmahimtextpritishdvishal";
            char full[]=new char[strText.length()];
            for(int i=0;i<strText.length();i++) {
                int c=(int)strText.charAt(i);
                float div = (float)strPwd.charAt(((i) % strPwd.length())+1)/43;
                c=c - Math.round(div);
                full[i]= (char)(c & 255);
            }
            return (new String(full));
        } catch(Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static Privileges initializeSystemPrivileges(ServletContext context, String file) 
    {
    	return initializeSystemPrivileges(context, file,0);
    }
    
    public static Privileges initializeSystemPrivileges(ServletContext context, String file,int status) 
    {	
    	Privileges _privileges = null;
        try
        {	
        	URL url = context.getResource((status == 1?"/tenants/"+MultiTenancyUtil.getTenantName():"/WEB-INF")+"/xml/"+ file);
            
        	if(url!=null)
            {
        		_privileges = PrivilegesMgr.getInstance().loadPrivileges(url.toString(),status==1?MultiTenancyUtil.getTenantName():status==0?"base":null);	
            }
        }
        catch(Exception ex)
        {
        	logger.error("Initializing System Privileges : exception occured while initializing "+file+".Either file does not exists or the URL is incorrect."+ex);
        }
        return _privileges;
    }


    //SYNC_REASSIGN_USER_ISSUE starts
    /**
     * Returns map of url and name of synced builds
     * @return
     */
    public static Map<String,String> getSyncURLMap(){
        Map<String,String> urlMap = new LinkedHashMap<String,String>();
        ResultSet result=null;
        try{
            result=QueryUtil.getResult("SELECT TAB_URL,TAB_NAME FROM WS_MASTER_DATA", null);
            while(result.next()){
                urlMap.put(result.getString("TAB_URL"), result.getString("TAB_NAME"));
            }
        }catch(Exception e){
            logger.error("Exception inside baseportalUtils",e);
        }
        finally {
            QueryUtil.releaseResultSet(result);
        }
        return urlMap;
    }
    public static Map<String,String> getSyncKeyMap(){
        Map<String,String> urlMap = new LinkedHashMap<String,String>();
        ResultSet result=null;
        try{
            result=QueryUtil.getResult("SELECT WS_URL,CLIENT_KEY,TAB_URL FROM WS_MASTER_DATA", null);
            while(result.next()){
                urlMap.put(result.getString("TAB_URL"), result.getString("WS_URL")+"_"+result.getString("CLIENT_KEY"));
            }
        }catch(Exception e){
            logger.error("Exception inside baseportalUtils",e);
        }
        finally {
            QueryUtil.releaseResultSet(result);
        }
        return urlMap;
    }
    /**
     * Return Map of data count retrieved from differnt builds
     * @param totalCount
     * @param userNo
     * @param userLevel
     * @param franchiseeNo
     * @param operation
     * @return
     */
    //P_B_CM_65645 starts
    public static Map<String,Map<String,String>> getSyncDataMap(int totalCount,String userNo,String userLevel,String franchiseeNo,String operation){
        return getSyncDataMap(totalCount,userNo,userLevel,franchiseeNo,operation,null);
    }
    public static Map<String,Map<String,String>> getSyncDataMap(int totalCount,String userNo,String userLevel,String franchiseeNo,String operation,String fromWhere){
    	//P_B_CM_65645 ends
        Map<String,String> urlMap=getSyncURLMap();
        String url=null,buildName=null;
        URL redirectURL=null;
        BufferedReader in =null;
        String returnData=null;
        String userCounts[]=null;
        Map<String,String> userCountMap =null;
        Map<String,Map<String,String> > otherBuildCountMap = NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
        int length=0;
        String keyValue[]=null;
        int mboCount = 0;
        String mboStudioId="";
        String cmLeadCount="";//ZCUB-20151124-197
        String cmLeadTaskCount="";//ZCUB-20151124-197
        String isDefaultCMLocOwner="";//P_B_CM_65256
        try{
            for(Map.Entry<String, String> entry : urlMap.entrySet()){
                length=0;
                url=entry.getKey();
                buildName=entry.getValue();
                userCountMap= NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
                redirectURL= new URL(url+"/getSyncUserDataCount.jsp?userNo="+userNo+"&userLevel="+userLevel+"&franchiseeNo="+franchiseeNo+"&fromWhere="+fromWhere);//P_B_CM_65645 starts
                in = new BufferedReader(new InputStreamReader(redirectURL.openStream()));
                while((returnData=in.readLine())!=null){
                    if(StringUtil.isValid(returnData)){
                        returnData=returnData.trim();
                        userCounts = returnData.split("####");
                        length=userCounts.length;
                        if(userCounts!=null && userCounts.length>0){
                            for(String countData:userCounts){
                                keyValue = countData.split("=");
                                userCountMap.put(keyValue[0], keyValue[1]);
                                if("totalCount".equals(keyValue[0]) && StringUtil.isValidNew(keyValue[1])){
                                    totalCount+= Integer.parseInt(keyValue[1]);
                                }
                                if("mboCount".equals(keyValue[0]) && StringUtil.isValidNew(keyValue[1])){
                                    mboCount= Integer.parseInt(keyValue[1]);
                                }
                                if("mboStudioId".equals(keyValue[0]) && StringUtil.isValidNew(keyValue[1])){
                                    mboStudioId= keyValue[1];
                                }
                                if("isDefaultCMLocOwner".equals(keyValue[0]) && StringUtil.isValidNew(keyValue[1])){//P_B_CM_65256
                                	isDefaultCMLocOwner= keyValue[1];//P_B_CM_65256
                                }
                                //ZCUB-20151124-197 starts
                                if("cmLeadCount".equals(keyValue[0]) && StringUtil.isValidNew(keyValue[1]))
                                {
                                	cmLeadCount=keyValue[1];
                                }
                                if("cmLeadTaskCount".equals(keyValue[0]) && StringUtil.isValidNew(keyValue[1]))
                                {
                                	cmLeadTaskCount=keyValue[1];
                                }
                                //ZCUB-20151124-197 ends
                            }
                        }
                    }
                }
                in.close();
                userCountMap.put("message", getDeactivateDeleteMessage(userCountMap,operation,userLevel));
                userCountMap.put("mboMessage", getDeactivateMboDeleteMessage(userCountMap,operation,userLevel));
                	otherBuildCountMap.put(buildName, userCountMap);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        finally{
            userCounts=null;
            keyValue=null;
            url=null;
            buildName=null;
            returnData=null;
            try{
                if(in!=null){
                    in.close();
                }
            }catch(Exception ew){

            }

        }
        if(otherBuildCountMap!=null){
            Map<String,String> countMap=new HashMap<String,String>();
            countMap.put("totalCount",String.valueOf(totalCount));
            otherBuildCountMap.put("totalCount",countMap);
            countMap=new HashMap<String,String>();
            countMap.put("mboCount",String.valueOf(mboCount));
            otherBuildCountMap.put("mboCount",countMap);
            countMap=new HashMap<String,String>();
            countMap.put("mboStudioId",String.valueOf(mboStudioId));
            otherBuildCountMap.put("mboStudioId",countMap);
            countMap.put("cmLeadCount",String.valueOf(cmLeadCount));//ZCUB-20151124-197
            otherBuildCountMap.put("cmLeadCount",countMap);//ZCUB-20151124-197
            
        }
        return otherBuildCountMap;
    }
    /**
     * Returns contact data in case of muid user
     * @param userNo
     * @param muid
     * @return
     */
    public static Map<String,Map<String,Map<String,Object>>> getSyncContactDataMap(String userNo,String muid){

        Map<String,String> urlMap=getSyncURLMap();
        String url=null,buildName=null;
        URL redirectURL=null;
        BufferedReader in =null;
        String returnData=null,tempString=null;
        String userCounts[]=null;
        Map<String,Object> userDataMap =null;
        Map<String,Map<String,Object>> userDataMap2 =null;
        Map<String,String> franchiseeUserMap=null;
        Map<String,Map<String,Map<String,Object>> > userContactMap = NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
        int count=0;
        String keyValue[]=null,dataValue[]=null,userValue[]=null,tempValue[]=null;
        try{
            for(Map.Entry<String, String> entry : urlMap.entrySet()){
                count=0;
                url=entry.getKey();
                buildName=entry.getValue();
                userDataMap2= NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
                redirectURL= new URL(url+"/getSyncUserContactData.jsp?userNo="+userNo.trim()+"&muid="+muid+"&fromWhere=contactReassign");
                in = new BufferedReader(new InputStreamReader(redirectURL.openStream()));
                while((returnData=in.readLine())!=null){
                    if(StringUtil.isValid(returnData)){
                        returnData=returnData.trim();
                        userCounts = returnData.split("####");
                        if(userCounts!=null && userCounts.length>0){
                            for(String countData:userCounts){
                                userDataMap= NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
                                keyValue = countData.split(",");
                                for(String contactData:keyValue){
                                    dataValue=contactData.split("=");
                                    if("CONTACTIDS".equals(dataValue[0]))
                                    	dataValue[1].replaceAll("#@#",",");
                                    if("CM_LEAD_LEADIDS".equals(dataValue[0]))//ZCUB-20151124-197
                                    	dataValue[1].replaceAll("#@#",",");//ZCUB-20151124-197
                                    if(contactData.indexOf("franchiseeUsersMap")!=-1){
                                        franchiseeUserMap= NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
                                        tempString = dataValue[1].trim();
                                        tempString = tempString.replace("(", "");
                                        tempString = tempString.replace(")", "");
                                        userValue = tempString.split("##");
                                        for(String user : userValue){
                                            tempValue=user.split("-");
                                            if(tempValue.length>1)
                                            	franchiseeUserMap.put(tempValue[0].trim(),tempValue[1].trim());
                                        }
                                        userDataMap.put("franchiseeUsersMap", franchiseeUserMap);
                                    }else{
                                        userDataMap.put(dataValue[0].trim(), dataValue[1].trim());
                                    }
                                }
                                userDataMap2.put(String.valueOf(count++), userDataMap);
                            }
                        }
                    }
                }
                in.close();
                userContactMap.put(buildName, userDataMap2);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        finally{
            userCounts=null;
            keyValue=null;
            url=null;
            buildName=null;
            dataValue=null;
            userValue=null;
            tempValue=null;
            returnData=null;
            tempString=null;
            try{
                if(in!=null){
                    in.close();
                }
            }catch(Exception ew){

            }

        }
        return userContactMap;
    }
    /**
     * returns map for support tickets user assignment
     * MT_PHASE2
     * @param userNo
     * @return
     */
    public static Map<String,Map<String,String>> getSyncUserTicketsCombo(String userNo){

        Map<String,String> urlMap=getSyncURLMap();
        String url=null,buildName=null;
        URL redirectURL=null;
        BufferedReader in =null;
        String returnData=null,tempString=null;
        String userCounts[]=null;
        Map<String,String> userDataMap =null;
        Map<String,Map<String,String> > userTicketMap = NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
        try{
            for(Map.Entry<String, String> entry : urlMap.entrySet()){
                url=entry.getKey();
                buildName=entry.getValue();
                userDataMap= NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
                redirectURL= new URL(url+"/getSyncUserTicketsCombo.jsp?userNo="+userNo+"&buildName="+buildName);
                in = new BufferedReader(new InputStreamReader(redirectURL.openStream()));
                while((returnData=in.readLine())!=null){
                    if(StringUtil.isValid(returnData)){
                        returnData=returnData.trim();
                        userCounts = returnData.split("####");
                        if(userCounts!=null && userCounts.length>0 && userCounts.length==2){
                            userDataMap.put("comboTickets", userCounts[0]);
                            userDataMap.put("comboArchiveTickets", userCounts[1]);
                        }else{
                            userDataMap.put("comboTickets", "");
                            userDataMap.put("comboArchiveTickets", "");
                        }
                    }
                }
                in.close();
                userTicketMap.put(buildName, userDataMap);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        finally{
            userCounts=null;
            url=null;
            buildName=null;
            returnData=null;
            tempString=null;
            try{
                if(in!=null){
                    in.close();
                }
            }catch(Exception ew){

            }

        }
        return userTicketMap;
    }

    /**
     * Returns message to be displayed on user deactivation / deletion.
     * @param userCountMap
     * @param operation
     * @return
     */
    public static String getDeactivateDeleteMessage(Map<String,String> userCountMap,String operation,String fromWhere){
        StringBuilder message=new StringBuilder("");
        if(userCountMap!=null && !userCountMap.isEmpty()){
            if(userCountMap.containsKey("totalCount") && !"0".equals(userCountMap.get("totalCount"))) {
            	int check=0;
                if ("location".equals(fromWhere)) {
                    message.append(LanguageUtil.getString("This Location is associated with"));
                } else {
                    message.append(LanguageUtil.getString("It is associated with"));
                }//P_B_CM_65256 strats
                if (userCountMap.containsKey("activeLeadCount") && !"0".equals(userCountMap.get("activeLeadCount"))) {
                    message.append(" ").append(userCountMap.get("activeLeadCount")).append(" ").append(LanguageUtil.getString("Active Lead(s)")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("archiveLeadCount") && !"0".equals(userCountMap.get("archiveLeadCount"))) {
                    message.append(" ").append(userCountMap.get("archiveLeadCount")).append(" ").append(LanguageUtil.getString("Archive Lead(s)")).append(", ");
                    check=1;
                }

                if (userCountMap.containsKey("cpQuesAnsCount") && !"0".equals(userCountMap.get("cpQuesAnsCount"))) {
                    message.append(" ").append(userCountMap.get("cpQuesAnsCount")).append(" ").append(LanguageUtil.getString("Unanswered Question(s) on Candidate Portal")).append(", ");
                    check=1;
                }

                if (userCountMap.containsKey("fieldManagerCount") && !"0".equals(userCountMap.get("fieldManagerCount"))) {
                    message.append(" ").append(userCountMap.get("fieldManagerCount")).append(" ").append(LanguageUtil.getString("Region(s) as a Field Manager")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("suppTicketCount") && !"0".equals(userCountMap.get("suppTicketCount"))) {
                    message.append(" ").append(userCountMap.get("suppTicketCount")).append(" ").append(LanguageUtil.getString("Ticket(s)")).append(", ");
                    check=1;
                }

                if (userCountMap.containsKey("completedSuppTicketCount") && !"0".equals(userCountMap.get("completedSuppTicketCount"))) {
                    message.append(" ").append(userCountMap.get("completedSuppTicketCount")).append(" ").append(LanguageUtil.getString("Archived or Closed Ticket(s)")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("contactCount") && !"0".equals(userCountMap.get("contactCount"))) {
                    message.append(" ").append(userCountMap.get("contactCount")).append(" ").append(LanguageUtil.getString("Contact(s)")).append(", ");
                    check=1;
                }
                //ZCUB-20151124-197  tarts
                if (userCountMap.containsKey("cmLeadCount") && !"0".equals(userCountMap.get("cmLeadCount"))) {
                    message.append(" ").append(userCountMap.get("cmLeadCount")).append(" ").append(LanguageUtil.getString("CRM Lead(s)")).append(", ");
                    check=1;
                }
                //ZCUB-20151124-197ends
                if (userCountMap.containsKey("storeCount") && !"0".equals(userCountMap.get("storeCount"))) {
                    message.append(" ").append(userCountMap.get("storeCount")).append(" ").append(LanguageUtil.getString("Franchise Opener Checklist(s)",null,Constants.KEYVAL_STORE_OPENER)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("fsTaskCount") && !"0".equals(userCountMap.get("fsTaskCount"))) {
                    message.append(" ").append(userCountMap.get("fsTaskCount")).append(" ").append(LanguageUtil.getString("Franchise Sales Task(s)",null,com.home.builderforms.Constants.KEYVAL_FS)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("fsCompletedTaskCount") && !"0".equals(userCountMap.get("fsCompletedTaskCount"))) {
                    message.append(" ").append(userCountMap.get("fsCompletedTaskCount")).append(" ").append(LanguageUtil.getString("Franchise Sales Completed Task(s)",null,com.home.builderforms.Constants.KEYVAL_FS)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("territoriesCount") && !"0".equals(userCountMap.get("territoriesCount"))) {
                    message.append(" ").append(userCountMap.get("territoriesCount")).append(" ").append(LanguageUtil.getString("Sales Territories / Assignment Scheme")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("sourceOwnerCount") && !"0".equals(userCountMap.get("sourceOwnerCount"))) {
                    message.append(" ").append(userCountMap.get("sourceOwnerCount")).append(" ").append(LanguageUtil.getString("Lead Source / Assignment Scheme")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("fimTaskCount") && !"0".equals(userCountMap.get("fimTaskCount"))) {
                    message.append(" ").append(userCountMap.get("fimTaskCount")).append(" ").append(LanguageUtil.getString("FIM Task(s)",null,Constants.KEYVAL_FIM)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("fimCompletedTaskCount") && !"0".equals(userCountMap.get("fimCompletedTaskCount"))) {
                    message.append(" ").append(userCountMap.get("fimCompletedTaskCount")).append(" ").append(LanguageUtil.getString("FIM Completed Task(s)",null,Constants.KEYVAL_FIM)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("cmTaskCount") && !"0".equals(userCountMap.get("cmTaskCount"))) {
                    message.append(" ").append(userCountMap.get("cmTaskCount")).append(" ").append(LanguageUtil.getString("Contact Manager Task(s)")).append(", ");
                    check=1;
                }
                //ZCUB-20151124-197 starts
                if (userCountMap.containsKey("cmLeadTaskCount") && !"0".equals(userCountMap.get("cmLeadTaskCount"))) {
                    message.append(" ").append(userCountMap.get("cmLeadTaskCount")).append(" ").append(LanguageUtil.getString("CRM Lead Task(s)")).append(", ");
                    check=1;
                }
                //ZCUB-20151124-197ends
                if (userCountMap.containsKey("profileCount") && !"0".equals(userCountMap.get("profileCount"))) {
                    message.append(" ").append(LanguageUtil.getString("Custom Profile(s) of ")).append(userCountMap.get("profileCount")).append(" ").append(LanguageUtil.getString("Franchise Location(s)")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("deptCount") && !"0".equals(userCountMap.get("deptCount"))) {
                    message.append(" ").append(userCountMap.get("deptCount")).append(" ").append(LanguageUtil.getString("Department(s)")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("courseCount") && !"0".equals(userCountMap.get("courseCount"))) {
                    message.append(" ").append(userCountMap.get("courseCount")).append(" ").append(LanguageUtil.getString("Course(s)")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("fsTaskTriggerCount") && !"0".equals(userCountMap.get("fsTaskTriggerCount"))) {
                    message.append(" ").append(userCountMap.get("fsTaskTriggerCount")).append(" ").append(LanguageUtil.getString("Franchise Sales Task Trigger Count(s)",null,com.home.builderforms.Constants.KEYVAL_FS)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("auditVisits") && !"0".equals(userCountMap.get("auditVisits"))) {
                    message.append(" ").append(userCountMap.get("auditVisits")).append(" ").append(LanguageUtil.getString(Constants.FRANCHISE_AUDIT + " " + MultiTenancyUtil.getTenantConstants().LBL_VISIT + "(s)",null,Constants.KEYVAL_AUDIT)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("auditTaskCount") && !"0".equals(userCountMap.get("auditTaskCount"))) {
                    message.append(" ").append(userCountMap.get("auditTaskCount")).append(" ").append(LanguageUtil.getString(Constants.FRANCHISE_AUDIT + " Task(s)",null,Constants.KEYVAL_AUDIT)).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("jobsCount") && !"0".equals(userCountMap.get("jobsCount"))) {
                    message.append(" ").append(userCountMap.get("jobsCount")).append(" ").append(LanguageUtil.getString("Job(s)")).append(", ");
                    check=1;
                }
                if (userCountMap.containsKey("isDefaultCMLocOwner") && "yes".equals(userCountMap.get("isDefaultCMLocOwner"))) {
                	message.append(" ").append("").append("Default Contact Owner").append(", ");
                	check=1;
                }
                if (message.indexOf(",") != -1) {
                    if (message.toString().endsWith(", ")) {
                        message = new StringBuilder(message.substring(0, message.lastIndexOf(",")));
                    }
                    int index = message.lastIndexOf(",");
                    if (index != -1) {
                        message = message.replace(index, index + 1, LanguageUtil.getString(" and"));
                    }
                }
                if ("location".equals(fromWhere)) {
                	/*MBO_ISSUE_FIXED Starts*/
                	if(check==1){
                		message.append(LanguageUtil.getString(". If you wish you can reassign these records to users of some other location before Deactivation."));
                	}else{
                		message = new StringBuilder("");
                	}
                } else {
                	if(check==1){
	                    message.append(". ").append(LanguageUtil.getString("If you wish you can reassign these records to some other")).append(" user ");
	                    if ("delete".equalsIgnoreCase(operation)) {
	                        message.append(LanguageUtil.getString("before Deletion."));
	                    } else {
	                        message.append(LanguageUtil.getString("before Deactivation."));
	                    }
                	}else{
                		message = new StringBuilder("");
                	}
                	/*MBO_ISSUE_FIXED Ends*/
                    if (userCountMap.containsKey("isDefaultCMOwner") && !"0".equals(userCountMap.get("isDefaultCMOwner")) ) {
                        
                    	if(check==0)
                    		message=new StringBuilder();
                    	else
                    		message.append("</br>");
                    	//P_B_CM_65256 ends
                    	message.append(LanguageUtil.getString("This user is the Default Contact Owner and can not be "));
                        if ("delete".equalsIgnoreCase(operation)) {
                            message.append("Deleted.");
                        } else {
                            message.append("Deactivated.");
                        }
                        message.append("Please reassign the Default Contact Owner before ");
                        if ("delete".equalsIgnoreCase(operation)) {
                            message.append("Deleting");
                        } else {
                            message.append("Deactivating");
                        }
                        message.append("this user.");
                    }
                }
            }
        }

        return message.toString();
    }

    public static void sendMail(String ownerID,String contactIDs,Info mailInfo)//SYNC_REASSIGN_USER_ISSUE
    {

        String from="";
        String[] emailContents=(String[])CommonMgr.newInstance().getCommonCmDAO().getAlertEmailContent();
        if(emailContents[3]!=null && !emailContents[3].equals(""))
            from=emailContents[3];
        else
            from="support@franconnect.com";

        Map<String,String> ccBccMap = NewPortalUtils.getCcBccMailID("CM");
        String cc		= ccBccMap.get(FieldNames.MAIL_CC);
        String bcc		= ccBccMap.get(FieldNames.MAIL_BCC);
        Vector  user_vect     = new Vector();
        int count=0;
        if(cc != null)
        {
            StringTokenizer		st	 =	new StringTokenizer(cc,",");
            while(st.hasMoreTokens()){
                user_vect.addElement(st.nextToken());
                count++;
            }
        }
        String[] mailCC = new String[count];
        try
        {
            if(cc != null && cc.length() > 0){
                StringTokenizer		stCc	 =	new StringTokenizer(cc,",");
                for(int i=0;i<user_vect.size();i++)
                    mailCC[i] = stCc.nextToken();
            }
        }catch(Exception ccx){
            logger.info("Exception in getting cc "+ccx);
        }
        user_vect     = new Vector();
        count=0;
        if(bcc != null  && bcc.length() > 0){
            StringTokenizer		st	 =	new StringTokenizer(bcc,",");
            while(st.hasMoreTokens()){
                user_vect.addElement(st.nextToken());
                count++;
            }
        }
        String[] mailBCC = new String[count];
        try
        {
            if(bcc != null  && bcc.length() > 0){
                StringTokenizer		stBcc	 =	new StringTokenizer(bcc,",");
                for(int i=0;i<user_vect.size();i++)
                    mailBCC[i] = stBcc.nextToken();
            }
        }catch(Exception ex){
        }

        String subject="Contact Assigned";
        String context = MultiTenancyUtil.getTenantConstants().HOST_NAME;

        StringBuffer mailContent = new StringBuffer();
        mailContent.append("<html>");
        mailContent.append("<head>");
        mailContent.append("<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />");
        mailContent.append("<title></title>");
        mailContent.append("</head>");
        mailContent.append("<body style='margin:4px;'>");
        mailContent.append("<table width='600' border='0' cellspacing='0' cellpadding='0'>");
        mailContent.append("<tr>");
        mailContent.append("<td style='border: 4px solid #c5d8e5; padding: 15px;'><table width='550' border='0' cellspacing='1' cellpadding='2'>");
        mailContent.append("<tr><td style='font-family: Arial,helvetica,sans-serif; color: rgb(0, 141, 168); font-size: 15px; padding-bottom: 5px; padding-top: 12px; border-bottom: 2px solid #008DA8'><strong>");
        mailContent.append("Contact Assigned</strong></td></tr>");

        mailContent.append("<tr>");
        mailContent.append("<td style='padding-top:15px; font-family: Arial,helvetica,sans-serif; font-size:13px;'>Dear ").append(mailInfo.getString("NAME")).append(",");
        mailContent.append("<p>Following Contact(s) has been assigned to you :</p></td>");
        mailContent.append("</tr>");

        mailContent.append("<tr><td>");
        mailContent.append("<table border='1' cellspacing='1' cellpadding='4' width='100%' style='border-collapse: collapse;'>");

        mailContent.append("<tr style='background-color:#E8F0FA;font-size: 9pt; text-align: center;'>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Name</th>");
        mailContent.append("<th width='20%' style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Address</th>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Email</th>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Contact Type</th>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Status</th>");
        mailContent.append("</tr>");

        contactIDs=contactIDs.substring(contactIDs.indexOf(',')+1);
        StringTokenizer stk=new StringTokenizer(contactIDs,",");

        Info contactNameInfo=new Info();
        while(stk.hasMoreTokens())
        {
            String contactID=stk.nextToken();
            contactNameInfo = CommonMgr.newInstance().getCommonCmDAO().quickaddContactDetails(contactID);

            mailContent.append("<tr valign='top' style='background-color:#C5D8E5;'>");
            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px;  LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>");
            if(StringUtil.isValid(contactNameInfo.get(FieldNames.CONTACT_FIRST_NAME))) 
            	mailContent.append(contactNameInfo.get(FieldNames.CONTACT_FIRST_NAME)+"&nbsp;");
            else
            	mailContent.append("");	
            if(StringUtil.isValid(contactNameInfo.get(FieldNames.CONTACT_LAST_NAME)))
            	mailContent.append(contactNameInfo.get(FieldNames.CONTACT_LAST_NAME));
            else
            	mailContent.append("");
            mailContent.append("</td>");

            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>");

            if(StringUtil.isValid(contactNameInfo.get(FieldNames.ADDRESS))){
                mailContent.append(contactNameInfo.get(FieldNames.ADDRESS)).append("&nbsp;&nbsp;");
            }
            mailContent.append("</td>");
            String contactType=contactNameInfo.get(FieldNames.CONTACT_TYPE);
            String leadStatus= contactNameInfo.get(FieldNames.CM_LEAD_STATUS_ID);

            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>");
            
            if(StringUtil.isValid(contactNameInfo.get(FieldNames.EMAIL_IDS)))
            	mailContent.append(contactNameInfo.get(FieldNames.EMAIL_IDS));
            else
            	mailContent.append("");
            
            mailContent.append("</td>");

            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>"+ CommonMgr.newInstance().getCommonCmDAO().getContactTypeNames(contactType)+"</td>");
            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>"+CommonMgr.newInstance().getCommonCmDAO().getContactStatusName(leadStatus)+"</td>");
            mailContent.append("</tr>");
        }
        mailContent.append("</table></td></tr>");
        mailContent.append("<tr><td style='border-color:#C5D8E5;FONT-SIZE: 13px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;'>");
        mailContent.append("<p></br>Please <a href=" + context + ">click here</a> to view Contact details.</p>"); //P_B_dki-20160825-569
        mailContent.append("<p>"+CommonUtil.getFooter()+"</p>");
        mailContent.append("</td></tr>");

        mailContent.append("</table></td></tr>");
        mailContent.append("</table></td>");
        mailContent.append("</tr>");
        mailContent.append("</table>");
        mailContent.append("</body>");
        mailContent.append("</html><br><br>");

        com.home.builderforms.mail.MailSender mailer =new com.home.builderforms.mail.MailSender();
        try
        {
            mailer.init();
            mailer.sendMail(from,new String[] {mailInfo.getString(FieldNames.EMAIL_ID)},null,null,subject,mailContent.toString(),"text/html"); //P_BB_ENH_EMAILSIGN
        }catch (Exception e)
        {
            logger.error("Exception in sending mail");
        }finally
        {
            mailer.close();
        }
        subject=null;
        mailInfo = null;
        contactNameInfo = null;
        from=null;
        mailContent=null;
    }

    //ZCUB-20151124-197 starts
    public static void sendMailToLead(String ownerID,String leadIDs,Info mailInfo)//SYNC_REASSIGN_USER_ISSUE
    {

        String from="";
        String[] emailContents=(String[])CommonMgr.newInstance().getCommonCmDAO().getAlertEmailContent();
        if(emailContents[3]!=null && !emailContents[3].equals(""))
            from=emailContents[3];
        else
            from="support@franconnect.com";

        Map<String,String> ccBccMap = NewPortalUtils.getCcBccMailID("CM");
        String cc		= ccBccMap.get(FieldNames.MAIL_CC);
        String bcc		= ccBccMap.get(FieldNames.MAIL_BCC);
        Vector  user_vect     = new Vector();
        int count=0;
        if(cc != null)
        {
            StringTokenizer		st	 =	new StringTokenizer(cc,",");
            while(st.hasMoreTokens()){
                user_vect.addElement(st.nextToken());
                count++;
            }
        }
        String[] mailCC = new String[count];
        try
        {
            if(cc != null && cc.length() > 0){
                StringTokenizer		stCc	 =	new StringTokenizer(cc,",");
                for(int i=0;i<user_vect.size();i++)
                    mailCC[i] = stCc.nextToken();
            }
        }catch(Exception ccx){
            logger.info("Exception in getting cc "+ccx);
        }
        user_vect     = new Vector();
        count=0;
        if(bcc != null  && bcc.length() > 0){
            StringTokenizer		st	 =	new StringTokenizer(bcc,",");
            while(st.hasMoreTokens()){
                user_vect.addElement(st.nextToken());
                count++;
            }
        }
        String[] mailBCC = new String[count];
        try
        {
            if(bcc != null  && bcc.length() > 0){
                StringTokenizer		stBcc	 =	new StringTokenizer(bcc,",");
                for(int i=0;i<user_vect.size();i++)
                    mailBCC[i] = stBcc.nextToken();
            }
        }catch(Exception ex){
        }

        String subject="CRM Lead Assigned";
        String context = MultiTenancyUtil.getTenantConstants().HOST_NAME;

        StringBuffer mailContent = new StringBuffer();
        mailContent.append("<html>");
        mailContent.append("<head>");
        mailContent.append("<meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />");
        mailContent.append("<title></title>");
        mailContent.append("</head>");
        mailContent.append("<body style='margin:4px;'>");
        mailContent.append("<table width='600' border='0' cellspacing='0' cellpadding='0'>");
        mailContent.append("<tr>");
        mailContent.append("<td style='border: 4px solid #c5d8e5; padding: 15px;'><table width='550' border='0' cellspacing='1' cellpadding='2'>");
        mailContent.append("<tr><td style='font-family: Arial,helvetica,sans-serif; color: rgb(0, 141, 168); font-size: 15px; padding-bottom: 5px; padding-top: 12px; border-bottom: 2px solid #008DA8'><strong>");
        mailContent.append("CRM Lead Assigned</strong></td></tr>");

        mailContent.append("<tr>");
        mailContent.append("<td style='padding-top:15px; font-family: Arial,helvetica,sans-serif; font-size:13px;'>Dear ").append(mailInfo.getString("NAME")).append(",");
        mailContent.append("<p>Following CRM Lead(s) has been assigned to you :</p></td>");
        mailContent.append("</tr>");

        mailContent.append("<tr><td>");
        mailContent.append("<table border='1' cellspacing='1' cellpadding='4' width='100%' style='border-collapse: collapse;'>");

        mailContent.append("<tr style='background-color:#E8F0FA;font-size: 9pt; text-align: center;'>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Name</th>");
        mailContent.append("<th width='20%' style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Address</th>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Email</th>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Lead Type</th>");
        mailContent.append("<th style='border-color:#C5D8E5;FONT-WEIGHT: bold; FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' align='left' nowrap>");
        mailContent.append("Status</th>");
        mailContent.append("</tr>");

        leadIDs=leadIDs.substring(leadIDs.indexOf(',')+1);
        StringTokenizer stk=new StringTokenizer(leadIDs,",");

        Info leadNameInfo=new Info();
        while(stk.hasMoreTokens())
        {
            String leadID=stk.nextToken();
            leadNameInfo = CommonMgr.newInstance().getCommonCmDAO().quickaddLeadDetails(leadID);

            mailContent.append("<tr valign='top' style='background-color:#C5D8E5;'>");
            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px;  LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>");
            if(StringUtil.isValid(leadNameInfo.get(FieldNames.LEAD_FIRST_NAME))) 
            	mailContent.append(leadNameInfo.get(FieldNames.LEAD_FIRST_NAME)+"&nbsp;");
            else
            	mailContent.append("");	
            if(StringUtil.isValid(leadNameInfo.get(FieldNames.LEAD_LAST_NAME)))
            	mailContent.append(leadNameInfo.get(FieldNames.LEAD_LAST_NAME));
            else
            	mailContent.append("");
            mailContent.append("</td>");

            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>");

            if(StringUtil.isValid(leadNameInfo.get(FieldNames.ADDRESS))){
                mailContent.append(leadNameInfo.get(FieldNames.ADDRESS)).append("&nbsp;&nbsp;");
            }
            mailContent.append("</td>");
            String leadType=leadNameInfo.get(FieldNames.LEAD_TYPE);
            String leadStatus= leadNameInfo.get(FieldNames.CM_LEAD_STATUS_ID);

            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>");
            
            if(StringUtil.isValid(leadNameInfo.get(FieldNames.EMAIL_IDS)))
            	mailContent.append(leadNameInfo.get(FieldNames.EMAIL_IDS));
            else
            	mailContent.append("");
            
            mailContent.append("</td>");

            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>"+ CommonMgr.newInstance().getCommonCmDAO().getContactTypeNames(leadType)+"</td>");
            mailContent.append("<td style='border-color:#C5D8E5;FONT-SIZE: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;' vAlign=top align='left' nowrap>"+CommonMgr.newInstance().getCommonCmDAO().getContactStatusName(leadStatus)+"</td>");
            mailContent.append("</tr>");
        }
        mailContent.append("</table></td></tr>");
        mailContent.append("<tr><td style='border-color:#C5D8E5;FONT-SIZE: 13px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;'>");
        mailContent.append("<p></br>Please <a href=" + context + ">click here</a> to view Contact details.</p>");
        mailContent.append("<p>"+CommonUtil.getFooter()+"</p>");
        mailContent.append("</td></tr>");

        mailContent.append("</table></td></tr>");
        mailContent.append("</table></td>");
        mailContent.append("</tr>");
        mailContent.append("</table>");
        mailContent.append("</body>");
        mailContent.append("</html><br><br>");

        com.home.builderforms.mail.MailSender mailer =new com.home.builderforms.mail.MailSender();
        try
        {
            mailer.init();
            mailer.sendMail(from,new String[] {mailInfo.getString(FieldNames.EMAIL_ID)},null,null,subject,mailContent.toString(),"text/html"); //P_BB_ENH_EMAILSIGN
        }catch (Exception e)
        {
            logger.error("Exception in sending mail");
        }finally
        {
            mailer.close();
        }
        subject=null;
        mailInfo = null;
        leadNameInfo = null;
        from=null;
        mailContent=null;
    }
    //ZCUB-20151124-197ends
    
    /**
     * This function is used to transform the value of the custom fields
     * added using the form builder in the system.
     * BB-20141017-177
     * @author Naman Jain
     * @param fieldValue
     * @param fieldType
     * @param fieldName
     * @param tableAnchor
     * @return
     * @throws Exception
     */
    public static String transformCustomFieldValue(String fieldValue, String fieldType, String fieldName, String tableAnchor)throws Exception {
        String newValue = fieldValue;

        if("checkbox".equalsIgnoreCase(fieldType)) { //checkbox
            newValue = BuilderFormWebImpl.getInstance().getCheckboxOptionsValueForId(fieldName, tableAnchor, newValue);
        } else if("radio".equalsIgnoreCase(fieldType)) { //radio
            newValue = BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fieldName, tableAnchor, newValue);
        }else if("combo".equalsIgnoreCase(fieldType) || "multiselect".equalsIgnoreCase(fieldType)) { //combo only //P_CM_B_57376
            newValue= BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fieldName, tableAnchor, newValue);
        } else if("combocountry".equalsIgnoreCase(fieldType)) { //for custom country
            newValue = PortalUtils.getCountryNameById(newValue);
        } else if("combostate".equalsIgnoreCase(fieldType)) { //for custom state
            newValue = RegionMgr.newInstance().getRegionsDAO().getStateName(newValue);
        }
        if(ModuleUtil.zcubatorImplemented())
        {
        	Field fld = DBUtil.getInstance().getFieldMappings(tableAnchor).getField(fieldName);
        	if(fld.isPiiEnabled()) {
        		//	fieldValue = AESencrypt.decrypt(fieldValue);
        		newValue = PortalUtils.getPrivateFieldFormat(fieldValue);
        	}
        }
        
        return newValue;
    }

    // returns the current db hour.
    public static String getDBHour()
    {
        String dbHour = "01" ;

        ResultSet result= null;
        try{
            result	= QueryUtil.getResult("SELECT hour(now())  AS DB_HOUR", null);
            if(result!=null && result.next())
            {
                dbHour = result.getString("DB_HOUR") ;
            }
        }catch(Exception e){
            logger.error("Exception in getDBHour  ",e);
        } finally {
            if(result != null) {
                result.release();
            }
        }
        return dbHour ;
    }

    
    /**
     * This function will provide country as a tranform so that it can be used while formatting phone nos
     * @param contactId
     * @return
     */
	private static HashMap<String, String> getMainDetailsForContact(String contactId) {
		HashMap<String, String> contactMap = new HashMap<String, String>();
		StringBuilder sbQuery = new StringBuilder();
		sbQuery.append("SELECT * FROM CM_CONTACT_DETAILS, ADDRESS WHERE CONTACT_ID = FOREIGN_ID AND FOREIGN_TYPE = 'cmContactDetails' AND CONTACT_ID = "+contactId);
		ResultSet result = null;
		try {
        	result = QueryUtil.getResult(sbQuery.toString(), null);
			while (result.next()) {
				contactMap.put("CM_CONTACT_DETAILS_country", StringUtil.isValid(result.getString("COUNTRY")) ? result.getString("COUNTRY") : " ");
				contactMap.put("CM_CONTACT_DETAILS_stateId", StringUtil.isValid(result.getString("STATE")) ? result.getString("STATE_ID") : " ");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			QueryUtil.releaseResultSet(result);
		}
		return contactMap;
	}
	
	private static HashMap<String, String> getMainDetailsForCmLead(String leadId) {
		HashMap<String, String> leadMap = new HashMap<String, String>();
		StringBuilder sbQuery = new StringBuilder();
		sbQuery.append("SELECT F.FRANCHISEE_NAME,A.AREA_NAME, CONCAT(U.USER_FIRST_NAME,U.USER_LAST_NAME) AS USER_NAME,CLD.TITLE FROM CM_LEAD_DETAILS CLD LEFT JOIN FRANCHISEE F ON CLD.FRANCHISEE_NO = F.FRANCHISEE_NO LEFT JOIN AREAS A ON CLD.AREA_ID=A.AREA_ID LEFT JOIN USERS U ON U.USER_NO=CLD.LEAD_OWNER_ID WHERE CLD.LEAD_ID = "+leadId);
		ResultSet result = null;
		try {
        	result = QueryUtil.getResult(sbQuery.toString(), null);
			while (result.next()) {
				leadMap.put("CM_LEAD_DETAILS_franchiseeNo", StringUtil.isValid(result.getString("FRANCHISEE_NAME")) ? result.getString("FRANCHISEE_NAME") : " ");
				leadMap.put("CM_LEAD_DETAILS_areaID", StringUtil.isValid(result.getString("AREA_NAME")) ? result.getString("AREA_NAME") : " ");
				leadMap.put("CM_LEAD_DETAILS_ownerType", StringUtil.isValid(result.getString("USER_NAME")) ? result.getString("USER_NAME") : " ");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			QueryUtil.releaseResultSet(result);
		}
		return leadMap;
	}
	
	
	/**
	 * This function will provide the basic details about lead like First Name, Last Name, Country and State.
	 * @param leadId
	 * @return
	 */
	private static HashMap<String, String> getMainDetailsForLead(String leadId) {
		HashMap<String, String> leadMap = new HashMap<String, String>();
		StringBuilder sbQuery = new StringBuilder();
		sbQuery.append("SELECT FIRST_NAME, LAST_NAME, COUNTRY, STATE_ID FROM FS_LEAD_DETAILS WHERE LEAD_ID =" + leadId);
		ResultSet result = null;
        try {
        	result = QueryUtil.getResult(sbQuery.toString(), null);
			while (result.next()) {
				leadMap.put("FS_LEAD_DETAILS_COUNTRY", StringUtil.isValid(result.getString("COUNTRY")) ? result.getString("COUNTRY") : " ");
				leadMap.put("FS_LEAD_DETAILS_STATE_ID", StringUtil.isValid(result.getString("STATE_ID")) ? result.getString("STATE_ID") : " ");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			QueryUtil.releaseResultSet(result);
		}
		return leadMap;
	}
    
    //BB-20150203-259 Starts (To make available all the fields of Form builder as keyword.)
    private static SequenceMap<String,String> getDetailsMapForLead(String moduleId,String id)
    {
        ResultSet rs = null;
        ResultSet result = null;
        StringBuffer queryString = new StringBuffer(); //P_Enh_COMMON_Task_Mails
        boolean isDataExist = false;		//P_B_71103
        FieldMappings mappings	= null;
        String tableAnchor=null;
        Field fld =null;
        String fieldName=null;
        SequenceMap<String,String> userMap = new SequenceMap<String,String>();
        try
        {
            if(StringUtil.isValidNew(moduleId))
            {
                rs = getKeywordsValues(moduleId);
            }
            ArrayList<String> columnNamesList = new ArrayList<String>();
            ArrayList<String> tableNamesList = new ArrayList<String>();
            ArrayList<String> joinClauseList = new ArrayList<String>();
            ArrayList<String> childColumnNamesList = new ArrayList<String>();
            ArrayList<String> childTableNamesList = new ArrayList<String>();
            ArrayList<String> childJoinClauseList = new ArrayList<String>();
            ArrayList<String> orderClauseList = new ArrayList<String>();
            if(rs != null)
            {
                while(rs.next())
                {
                	isDataExist = true;		//P_B_71103
                	tableAnchor=(String)rs.getString("TABLE_ANCHOR");// BB-20150525-360 starts
                	fieldName=(String)rs.getString("FIELD_NAME");
                	if(StringUtil.isValidNew(tableAnchor)){
                		mappings				= DBUtil.getInstance().getFieldMappings(tableAnchor);
                	if(mappings!=null&&StringUtil.isValidNew(fieldName)){
                		 fld = mappings.getField(fieldName);
                	}
                	}// BB-20150525-360 ends
                    if(StringUtil.isValidNew(moduleId) && "2".equals(moduleId) && fld!=null)
                    {
                        if(StringUtil.isValidNew((String)rs.getString("DB_CHILD_TABLE")))
                        { 	
                        	//METHOD FOR CHILD_TABLE FIELD FS
                        	if(fld!=null&&fld.isPiiEnabled()){// BB-20150525-360
                        		childColumnNamesList.add("AES_DECRYPT("+rs.getString("DB_CHILD_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}else{
                        		childColumnNamesList.add(rs.getString("DB_CHILD_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}
                            if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                            	if(StringUtil.isValidNew(rs.getString("DB_MAIN_TABLE"))) {
                            		if(!"FS_LEAD_DETAILS".equals(rs.getString("DB_MAIN_TABLE")))
                            		{
                            			tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                            			joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".LEAD_ID = FS_LEAD_DETAILS.LEAD_ID ");

                            		}
                            	}
                            }
                            if(!childTableNamesList.contains(rs.getString("DB_CHILD_TABLE")))
                            {
                                childTableNamesList.add(rs.getString("DB_CHILD_TABLE"));
                                childJoinClauseList.add(" LEFT JOIN " + rs.getString("DB_CHILD_TABLE") +" ON "+ rs.getString("MAIN_CHILD_TABLE_MAPPING"));
                            }
                        }else
                        {																					//METHOD FOR SIMPLE FIELDS FS
                        	if(fld!=null&&fld.isPiiEnabled()){// BB-20150525-360
                        		columnNamesList.add("AES_DECRYPT("+rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	} else {
                        		columnNamesList.add(rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));	
                        	}
                        	if("LEAD_SOURCE2_ID".equals(rs.getString("DB_FIELD_NAME")) && "FS_LEAD_DETAILS".equals(rs.getString("DB_MAIN_TABLE"))) {
                        		columnNamesList.add(rs.getString("DB_MAIN_TABLE")+".SOURCE_CONTACT_TYPE AS "+rs.getString("DB_MAIN_TABLE")+"_sourceContactType");
                        	}
                            if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                            	if("FS_LEAD_REMARKS".equals(rs.getString("DB_MAIN_TABLE")) || "FS_LEAD_CALL".equals(rs.getString("DB_MAIN_TABLE"))) {
                            		tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                            		joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".LEAD_ID = FS_LEAD_DETAILS.LEAD_ID ");
                            		if("FS_LEAD_REMARKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                            			orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".DATE_ADDED DESC ");
                            		} else if("FS_LEAD_CALL".equals(rs.getString("DB_MAIN_TABLE"))) {
                            			orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".CREATION_DATE DESC ");
                            		}
                            	} else if("TASKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                            		tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                            		joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".FOREIGN_ID = FRANCHISEE.FRANCHISEE_NO ");
                            		orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".CREATION_DATE DESC ");
                            	} if(!"FS_LEAD_DETAILS".equals(rs.getString("DB_MAIN_TABLE")))
                                {
                                    tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                                    joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".LEAD_ID = FS_LEAD_DETAILS.LEAD_ID ");
                                }
                            }
                        }
                    }else if(StringUtil.isValidNew(moduleId) && "3".equals(moduleId))
                    {
                        if(StringUtil.isValidNew((String)rs.getString("DB_CHILD_TABLE")))
                        { 																						//METHOD FOR CHILD_TABLE FIELD FIM
                        	if(fld!=null&&fld.isPiiEnabled()){// BB-20150525-360
                            childColumnNamesList.add("AES_DECRYPT("+rs.getString("DB_CHILD_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}else{
                        	childColumnNamesList.add(rs.getString("DB_CHILD_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));	
                        	}
                        	
                        	if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                            	if(StringUtil.isValidNew(rs.getString("DB_MAIN_TABLE"))) {
                            		if(!"FRANCHISEE".equals(rs.getString("DB_MAIN_TABLE")))
                            		{
                                        tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                                        joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".ENTITY_ID = FRANCHISEE.FRANCHISEE_NO ");
                                       
                                        if(!"FIM_EMPLOYEES".equals(rs.getString("DB_MAIN_TABLE")) && !"FIM_OWNERS".equals(rs.getString("DB_MAIN_TABLE"))){//Bug 68440
                                        orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".CREATION_DATE DESC ");
                                        }
                                    }
                            	}
                            }

                            if(!childTableNamesList.contains(rs.getString("DB_CHILD_TABLE")))
                            {
                                childTableNamesList.add(rs.getString("DB_CHILD_TABLE"));
                                childJoinClauseList.add(" LEFT JOIN " + rs.getString("DB_CHILD_TABLE") +" ON "+ rs.getString("MAIN_CHILD_TABLE_MAPPING"));
                            }
                        }else
                        {					
                        	//METHOD FOR SIMPLE FIELDS FIM
                        	if(fld!=null&&fld.isPiiEnabled()){// BB-20150525-360
                            columnNamesList.add("AES_DECRYPT("+rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}else{
                        	columnNamesList.add(rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}
                            if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                            	if("FIM_OWNERS".equals(rs.getString("DB_MAIN_TABLE"))){
                            		tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                            		joinClauseList.add(" LEFT JOIN  OWNERS ON FRANCHISEE.FRANCHISEE_NO = OWNERS.FRANCHISEE_NO LEFT JOIN FIM_OWNERS ON  FIM_OWNERS.FRANCHISE_OWNER_ID = OWNERS.OWNER_ID ");
                            		 if(!"FIM_EMPLOYEES".equals(rs.getString("DB_MAIN_TABLE")) && !"FIM_OWNERS".equals(rs.getString("DB_MAIN_TABLE"))){//Bug 68440
                                         orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".CREATION_DATE DESC ");
                                     }
                            	} else if("FRANCHISEE_CALL".equals(rs.getString("DB_MAIN_TABLE")) || "FIM_FRANCHISEE_REMARKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                            		tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                            		joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".FRANCHISEE_NO = FRANCHISEE.FRANCHISEE_NO ");
                            		if("FRANCHISEE_CALL".equals(rs.getString("DB_MAIN_TABLE"))) {
                            			orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".DATE_TIME_STAMP DESC ");
                            		} else if("FIM_FRANCHISEE_REMARKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                            			orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".DATE_ADDED DESC ");
                            		}
                            	} else if("TASKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                            		tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                            		joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".FOREIGN_ID = FRANCHISEE.FRANCHISEE_NO ");
                            		orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".CREATION_DATE DESC ");
                            	}
                            	else if(!"FRANCHISEE".equals(rs.getString("DB_MAIN_TABLE")))
                                {
                                    tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                                    joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".ENTITY_ID = FRANCHISEE.FRANCHISEE_NO ");
                                    if(!"FIM_EMPLOYEES".equals(rs.getString("DB_MAIN_TABLE")) && !"FIM_OWNERS".equals(rs.getString("DB_MAIN_TABLE"))){//Bug 68440
                                        orderClauseList.add(rs.getString("DB_MAIN_TABLE")+".CREATION_DATE DESC ");
                                    }
                                }
                            }
                        }

                    }
                    else if(StringUtil.isValidNew(moduleId) && "4".equals(moduleId))
                    {
                        if(StringUtil.isValidNew((String)rs.getString("DB_CHILD_TABLE")))
                        { 	
                        	//METHOD FOR CHILD_TABLE FIELD CM
                        	if(fld!=null&&fld.isPiiEnabled()){// BB-20150525-360
                            childColumnNamesList.add("AES_DECRYPT("+rs.getString("DB_CHILD_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}else{
                        	childColumnNamesList.add(rs.getString("DB_CHILD_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));	
                        	}
                        	if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                            	if(StringUtil.isValidNew(rs.getString("DB_MAIN_TABLE"))) {
                            		if(!"CM_CONTACT_DETAILS".equals(rs.getString("DB_MAIN_TABLE")))
                            		{
                                        tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                                        if("CM_COMPANY_INFO".equals(rs.getString("DB_MAIN_TABLE"))) {
                                            joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".COMPANY_ID = CM_CONTACT_DETAILS.COMPANY_ID ");
                                        }else if("TASKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                                        	joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".FOREIGN_ID = CM_CONTACT_DETAILS.CONTACT_ID ");
                                        } else {
                                            joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".CONTACT_ID = CM_CONTACT_DETAILS.CONTACT_ID ");
                                        }
                                    }
                            	}
                            }
                        	
                            if(!childTableNamesList.contains(rs.getString("DB_CHILD_TABLE")))
                            {
                                childTableNamesList.add(rs.getString("DB_CHILD_TABLE"));
                                childJoinClauseList.add(" LEFT JOIN " + rs.getString("DB_CHILD_TABLE") +" ON "+ rs.getString("MAIN_CHILD_TABLE_MAPPING"));
                            }
                        }else
                        {																					//METHOD FOR SIMPLE FIELDS CM
                        	if(fld!=null&&fld.isPiiEnabled()){// BB-20150525-360
                            columnNamesList.add("AES_DECRYPT("+rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}else{
                        	columnNamesList.add(rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));	
                        	}
                            if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                                if(!"CM_CONTACT_DETAILS".equals(rs.getString("DB_MAIN_TABLE")))
                                {
                                    tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                                    if("CM_COMPANY_INFO".equals(rs.getString("DB_MAIN_TABLE"))) {
                                        joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".COMPANY_ID = CM_CONTACT_DETAILS.COMPANY_ID ");
                                    }else if("TASKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                                    	joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".FOREIGN_ID = CM_CONTACT_DETAILS.CONTACT_ID ");
                                    } else {
                                        joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".CONTACT_ID = CM_CONTACT_DETAILS.CONTACT_ID ");
                                    }
                                }
                            }
                        }
                      //module Id set to 7 for cmLeads
                    } else if(StringUtil.isValidNew(moduleId) && "7".equals(moduleId)) {
                        if(StringUtil.isValidNew((String)rs.getString("DB_CHILD_TABLE"))){
                        	
                        } else {																					//METHOD FOR SIMPLE FIELDS CM
                        	if(fld!=null&&fld.isPiiEnabled()){
                            columnNamesList.add("AES_DECRYPT("+rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+",'pvm@e20') "+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));
                        	}else{
                        	columnNamesList.add(rs.getString("DB_MAIN_TABLE")+"."+rs.getString("DB_FIELD_NAME")+" AS "+rs.getString("DB_MAIN_TABLE")+"_"+rs.getString("FIELD_NAME"));	
                        	}
                        	
                        	if(!tableNamesList.contains(rs.getString("DB_MAIN_TABLE")))
                            {
                                if(!"CM_LEAD_DETAILS".equals(rs.getString("DB_MAIN_TABLE")))
                                {
                                    tableNamesList.add(rs.getString("DB_MAIN_TABLE"));
                                    
                                    if("TASKS".equals(rs.getString("DB_MAIN_TABLE"))) {
                                    	joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".FOREIGN_ID = CM_LEAD_DETAILS.LEAD_ID ");
                                    } else {
                                        joinClauseList.add(" LEFT JOIN " + rs.getString("DB_MAIN_TABLE") +" ON "+ rs.getString("DB_MAIN_TABLE") + ".LEAD_ID = CM_LEAD_DETAILS.LEAD_ID ");
                                    }
                                }
                            }
                        }
                    }
                }
                queryString = new StringBuffer("SELECT ");
                if(columnNamesList != null && columnNamesList.size() > 0)
                {
                    boolean columnNameFlag = false;
                    for (String columnName : columnNamesList)
                    {
                        if (columnNameFlag)
                        {
                            queryString.append(" , ");
                        } else
                        {
                            columnNameFlag = true;
                        }
                        queryString.append(columnName);
                    }
                }
                if(childColumnNamesList != null && childColumnNamesList.size() > 0)
                {
                	if(columnNamesList != null && columnNamesList.size() > 0) {
                		queryString.append(" , ");
                	}
                	boolean childColumnNameFlag = false;
                	for (String columnName : childColumnNamesList)
                	{
                		if (childColumnNameFlag)
                		{
                			queryString.append(" , ");
                		} else
                		{
                			childColumnNameFlag = true;
                		}
                		queryString.append(columnName);
                	}
                }
                
                if(StringUtil.isValidNew(moduleId) && "2".equals(moduleId))
                {
                    queryString.append(" FROM FS_LEAD_DETAILS ");
                }else if(StringUtil.isValidNew(moduleId) && "3".equals(moduleId))
                {
                    queryString.append(" FROM FRANCHISEE ");
                }else if(StringUtil.isValidNew(moduleId) && "4".equals(moduleId))
                {
                    queryString.append(" FROM CM_CONTACT_DETAILS ");
                }else if(StringUtil.isValidNew(moduleId) && "7".equals(moduleId))
                {
                	//module Id set to 7 for cmLeads
                    queryString.append(" FROM CM_LEAD_DETAILS ");
                }
                
                if(joinClauseList != null && joinClauseList.size() > 0)
                {
                    for (String joinClause : joinClauseList)
                    {
                        queryString.append(joinClause);
                    }
                }
                if(childJoinClauseList != null && childJoinClauseList.size() > 0)
                {
                    for (String joinClause : childJoinClauseList)
                    {
                        queryString.append(joinClause);
                    }
                }
                if(StringUtil.isValidNew(moduleId) && "2".equals(moduleId))
                {
                    queryString.append(" WHERE FS_LEAD_DETAILS.LEAD_ID = '").append(id).append("' LIMIT 0, 1");
                }else if(StringUtil.isValidNew(moduleId) && "3".equals(moduleId))
                {
                	queryString.append(" WHERE FRANCHISEE.FRANCHISEE_NO = '").append(id).append("'");
                	StringBuffer orderString=new StringBuffer(" ");
                	if(orderClauseList != null && orderClauseList.size() > 0)
                	{
                		for (String orderClause : orderClauseList)
                		{
                			orderString.append(orderClause).append(",");
                		}
                	}
                	if(StringUtil.isValidNew(orderString.toString()) && orderString.toString().lastIndexOf(",")!=-1){
                		queryString.append(" ORDER BY ").append(StringUtil.removeLastComma(orderString));
                	}
                	queryString.append(" LIMIT 0, 1");
                }else if(StringUtil.isValidNew(moduleId) && "4".equals(moduleId))
                {
                    queryString.append(" WHERE CM_CONTACT_DETAILS.CONTACT_ID = '").append(id).append("' LIMIT 0, 1");
                }else if(StringUtil.isValidNew(moduleId) && "7".equals(moduleId))
                {
                    queryString.append(" WHERE CM_LEAD_DETAILS.LEAD_ID = '").append(id).append("' LIMIT 0, 1");
                }
                if(StringUtil.isValidNew(queryString.toString()) && isDataExist)		//P_B_71103
                {
                	result = QueryUtil.getResult(queryString.toString(), new String[]{});
                	if (result != null) 
                	{
                		while (result.next())
                		{
                			rs.first();
                			while (rs.next()) {
                				if ("LEAD_SOURCE2_ID".equals(rs.getString("DB_FIELD_NAME")) && "FS_LEAD_DETAILS".equals(rs.getString("DB_MAIN_TABLE"))) {
                					if ("0".equals(MasterDataMgr.newInstance().getMasterDataDAO().getValue(10014, 12585))) {
                						userMap.put(rs.getString("DB_MAIN_TABLE") + "_sourceContactType", result.getString(rs.getString("DB_MAIN_TABLE") + "_sourceContactType"));
                						userMap.put(rs.getString("DB_MAIN_TABLE") + "_" + rs.getString("FIELD_NAME"), result.getString(rs.getString("DB_MAIN_TABLE") + "_" + rs.getString("FIELD_NAME")));
                					} else {
                						userMap.put(rs.getString("DB_MAIN_TABLE") + "_" + rs.getString("FIELD_NAME"), result.getString(rs.getString("DB_MAIN_TABLE") + "_" + rs.getString("FIELD_NAME")));
                					}
                				} else {
                					String cname=rs.getString("DB_MAIN_TABLE") + "_" + rs.getString("FIELD_NAME");
                					userMap.put(cname, result.getString(cname));
                				}
                			}
                		}
                	}
                }
                if (result != null) {
                	QueryUtil.releaseResultSet(result);
                }
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
            logger.error("SQLException in CommonUtil Class in getDetailsMapForLead() Method11 :::" +e.getMessage());
            Debug.print(e);
            Debug.println("sql exception in mail"+e);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            logger.error("Exception in CommonUtil Class in getDetailsMapForLead() :::" +e.getMessage());
            Debug.print(e);
            Debug.println("sql exception "+e);
        }
        finally
        {
            QueryUtil.releaseResultSet(rs);
        }
        return userMap;
    }

    private static ResultSet getKeywordsValues(String moduleId) throws SQLException
    {
        ResultSet result = null;
        String query = "SELECT * FROM FORM_BUILDER_KEYWORDS_CONFIGURATION WHERE IS_ACTIVE = 'Y' AND MODULE_ID = ? AND  FORM_ID IN (SELECT BUILDER_FORM_ID from BUILDER_WEB_FORMS where BUILDER_WEB_FORMS.IS_ACTIVE='Y') ORDER BY FORM_ID";
        try
        {
            result = QueryUtil.getResult(query, new String[] {moduleId});
        }
        catch (Exception e) {
            logger.error("Exception in CommonUtil Class in getKeywordsFieldNames() : ", e);
        }
        return result;
    }

    
    private static String replaceOtherKeywords(String returnTemplate,String moduleId, String Id,boolean skipRecipNames,boolean forSubject) throws SQLException{
    	return replaceOtherKeywords(returnTemplate,moduleId,Id,skipRecipNames,forSubject,null);
    }
    private static String replaceOtherKeywords(String returnTemplate,String moduleId, String Id,boolean skipRecipNames,boolean forSubject,String countryName) throws SQLException
    {
        String value = "";
        ResultSet result= null;
        SequenceMap<String,String> userNewMap = getDetailsMapForLead(moduleId,Id);
        if("2".equals(moduleId)) { //getting basic details of lead
        	HashMap<String,String> leadMap = getMainDetailsForLead(Id);
        	userNewMap.putAll(leadMap);
        }
        
        if("4".equals(moduleId)) {
        	HashMap<String,String> contactMap = getMainDetailsForContact(Id);
        	userNewMap.putAll(contactMap);
        }
        
        if("7".equals(moduleId)) {
        	HashMap<String,String> leadMap = getMainDetailsForCmLead(Id);
        	userNewMap.putAll(leadMap);
        }
        
        String aliasName = "";
        try
        {
            result = getKeywordsValues(moduleId);
            if((userNewMap.size()>0 || userNewMap != null) && result!= null)
            {
                while(result.next())
                {
                    boolean  childflag = false;
                    aliasName = result.getString("DB_MAIN_TABLE")+"_"+result.getString("FIELD_NAME");
                    if(forSubject && StringUtil.isValidNew(result.getString("DB_FIELD_NAME")))
                    {
                        if(("EMAIL_ID").equals(result.getString("DB_FIELD_NAME")) || ("EMAIL_IDS").equals(result.getString("DB_FIELD_NAME")))
                        {
                            returnTemplate = PortalUtils.replaceAll(returnTemplate,
                                    result.getString("DISPLAY_VALUE"),
                                    userNewMap.get(aliasName) != null ? HtmlToText.htmlToPlainText(userNewMap.get(aliasName))
                                            : FieldNames.EMPTY_STRING);
                        }
                    }else{
                        if(("EMAIL_ID").equals(result.getString("DB_FIELD_NAME")) || ("EMAIL_IDS").equals(result.getString("DB_FIELD_NAME")))
                        {
                            returnTemplate = PortalUtils.replaceAll(returnTemplate,
                                    result.getString("DISPLAY_VALUE"),
                                    userNewMap.get(aliasName) != null ? userNewMap.get(aliasName)
                                            : FieldNames.EMPTY_STRING);
                        }
                    }
                    if(skipRecipNames)
                    {
                        if(StringUtil.isValidNew(result.getString("DB_MAIN_TABLE")) && StringUtil.isValidNew(result.getString("DB_FIELD_NAME")) && "FS_LEAD_DETAILS".equals(result.getString("DB_MAIN_TABLE")))
                        {
                            if("FIRST_NAME".equals(result.getString("DB_FIELD_NAME"))  || "LAST_NAME".equals(result.getString("DB_FIELD_NAME")))
                            {
                                returnTemplate = PortalUtils.replaceAll(returnTemplate,
                                        result.getString("DISPLAY_VALUE"),
                                        userNewMap.get(aliasName) != null ? userNewMap.get(aliasName)
                                                : FieldNames.EMPTY_STRING);
                            }

                        }
                    }
                    if(StringUtil.isValidNew(result.getString("DB_CHILD_TABLE")))
                    {
                        childflag = true;
                    }
                    value = getValueFromField(result.getString("FIELD_NAME"),userNewMap,aliasName,result.getString("DB_MAIN_TABLE"),result.getString("TABLE_ANCHOR"),childflag);
                    String a = StringUtil.isValidNew(value) ? value : FieldNames.EMPTY_STRING;

                    if("TASKS".equals(result.getString("DB_MAIN_TABLE"))) {
                    	if("START_TIME".equals(result.getString("DB_FIELD_NAME")) || "END_TIME".equals(result.getString("DB_FIELD_NAME"))) {
                    		value = DataManipulator.getInstance().transformTimeFormat(value, null);
                    	}

                    	if("REMINDER_TIME".equals(result.getString("DB_FIELD_NAME"))) {
                    		value = DataManipulator.getInstance().convertTime(value);
                    	}
                    }
                    
                    if("4".equals(moduleId) && "PHONE_NUMBERS".equals(result.getString("DB_FIELD_NAME"))){
                    	returnTemplate = PortalUtils.replaceAll(returnTemplate,result.getString("DISPLAY_VALUE"),PortalUtils.formatPhoneNo(value,countryName));
                    }
                    if("3".equals(moduleId) && "FIM_DD_OPENING_DATE".equals(result.getString("DB_FIELD_NAME"))){
                    	returnTemplate = PortalUtils.replaceAll(returnTemplate,result.getString("DISPLAY_VALUE"),SQLUtil.getColumnValue("FRANCHISEE", "OPENING_DATE", "FRANCHISEE_NO", Id));
                    }
                    returnTemplate = PortalUtils.replaceAll(returnTemplate,
                            result.getString("DISPLAY_VALUE"),
                            StringUtil.isValidNew(value) ? value
                                    : FieldNames.EMPTY_STRING);
                }
            }
        }

        catch (Exception e)
        {
            logger.error("Exception in CommonUtil Class in ReplaceOtherKeywords() :::" +e.getMessage());
            e.printStackTrace();
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return returnTemplate;
    }
    
    public static String replaceFSKeywords(String returnTemplate,	Map<String, String> userMap, boolean skipRecipNames,boolean forSubject, String leadId, String templateId ) {

    	//FitRev-20140106-160ends
    	BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
    	String currentDate = DateUtil.formatDate(DateUtil.getCurrentDateTime(),
    			_baseConstants.DISPLAY_FORMAT_HMA);
    	String phone = null, mobile = null;
    	//System.out.println("\n\n\n>>>>>>>>>returnTemplate>>>>>>>>>>>"+returnTemplate);
    	//System.out.println("\n\n\n>>>>>>>>>userMap>>>>>>>>>"+userMap);
    	if (userMap.get("PHONE1") != null) {
    		phone = PortalUtils.formatPhoneNo(userMap.get("PHONE1"),
    				userMap.get("COUNTRY"));
    	} else {
    		phone = FieldNames.EMPTY_STRING;
    	}

    	if (userMap.get("MOBILE") != null) {
    		mobile = PortalUtils.formatPhoneNo(userMap.get("MOBILE"),
    				userMap.get("COUNTRY"));
    	} else {
    		mobile = FieldNames.EMPTY_STRING;
    	}
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_FIRST_NAME$",
    			userMap.get("FIRST_NAME") != null ? userMap.get("FIRST_NAME")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_LAST_NAME$",
    			userMap.get("LAST_NAME") != null ? userMap.get("LAST_NAME")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_ADDRESS$",
    			userMap.get("ADDRESS") != null ? userMap.get("ADDRESS")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_CITY$",
    			userMap.get("CITY") != null ? userMap.get("CITY")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_STATE$",
    			userMap.get("STATE") != null ? userMap.get("STATE")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_ZIP$",
    			userMap.get("ZIPCODE") != null ? userMap.get("ZIPCODE")
    					: FieldNames.EMPTY_STRING);
    	//FitRev-20140106-160 satrts
    	if(forSubject){
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,
    				"$OWNERS_EMAIL$",
    				userMap.get("EMAIL_ID") != null ? HtmlToText.htmlToPlainText(userMap.get("EMAIL_ID"))
    						: FieldNames.EMPTY_STRING);
    	}
    	else{
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,
    				"$OWNERS_EMAIL$",
    				userMap.get("EMAIL_ID") != null ? userMap.get("EMAIL_ID")
    						: FieldNames.EMPTY_STRING);
    	}//FitRev-20140106-160
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_PHONE_EXTENSION$",
    			userMap.get("PHONE1_EXTN") != null ? userMap.get("PHONE1_EXTN")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_PHONE$", phone);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_MOBILE$", mobile);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_FAX$",
    			userMap.get("FAX") != null ? userMap.get("FAX")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_TITLE$",
    			userMap.get("JOB_TITLE") != null ? userMap.get("JOB_TITLE")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$DATE$",
    			currentDate);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$OWNERS_COUNTRY$",
    			userMap.get("COUNTRY") != null ? userMap.get("COUNTRY")
    					: FieldNames.EMPTY_STRING);


    	if (!skipRecipNames) {
    		returnTemplate = PortalUtils.replaceAll(
    				returnTemplate,
    				"$RECIPIENT_FIRST_NAME$",
    				userMap.get("RECIPIENT_FIRST_NAME") != null ? userMap
    						.get("RECIPIENT_FIRST_NAME")
    						: FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(
    				returnTemplate,
    				"$RECIPIENT_LAST_NAME$",
    				userMap.get("RECIPIENT_LAST_NAME") != null ? userMap
    						.get("RECIPIENT_LAST_NAME")
    						: FieldNames.EMPTY_STRING);
    	}

    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"$SENDER_NAME$",
    			userMap.get("SENDER_NAME") != null ? userMap.get("SENDER_NAME")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$VIRTUAL_BROCHURE_WEB_PAGE$",
    			userMap.get("VIRTUAL_BROCHURE_WEB_PAGE") != null ? userMap
    					.get("VIRTUAL_BROCHURE_WEB_PAGE")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$VIRTUAL_BROCHURE_PASSWORD$",
    			userMap.get("VIRTUAL_BROCHURE_PASSWORD") != null ? userMap
    					.get("VIRTUAL_BROCHURE_PASSWORD")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$VIRTUAL_BROCHURE_USER_ID$",
    			userMap.get("VIRTUAL_BROCHURE_USER_ID") != null ? userMap
    					.get("VIRTUAL_BROCHURE_USER_ID")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$CANDIDATE_PASSWORD$",
    			userMap.get("CANDIDATE_PASSWORD") != null ? userMap
    					.get("CANDIDATE_PASSWORD") : FieldNames.EMPTY_STRING);
    	//FitRev-20140106-160 starts
    	if(forSubject){
    		returnTemplate = PortalUtils.replaceAll(
    				returnTemplate,
    				"$OWNER_SIGNATURE$",
    				FieldNames.EMPTY_STRING);// P_ENH_AUTOMATIC_SIGNATURE:ANKIT
    		// SAINI
    		returnTemplate = PortalUtils.replaceAll(returnTemplate, "$NEXT_LINE$"," ");
    	}
    	else{
    		returnTemplate = PortalUtils.replaceAll(
    				returnTemplate,
    				"$OWNER_SIGNATURE$",
    				userMap.get("OWNER_SIGNATURE") != null ? userMap
    						.get("OWNER_SIGNATURE") : FieldNames.EMPTY_STRING);// P_ENH_AUTOMATIC_SIGNATURE:ANKIT
    		returnTemplate = PortalUtils.replaceAll(returnTemplate, "$NEXT_LINE$",
    		"<br/>\r\n");
    		// SAINI
    	}//FitRev-20140106-160
    	/*returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PARTIALLY_APPLICATION_FORM_URL$",
    			userMap.get("PARTIALLY_APPLICATION_FORM_URL") != null ? userMap
    					.get("PARTIALLY_APPLICATION_FORM_URL")
    					: FieldNames.EMPTY_STRING);*/
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$APPLICATION_PASSWORD$",
    			userMap.get("APPLICATION_PASSWORD") != null ? userMap
    					.get("APPLICATION_PASSWORD") : FieldNames.EMPTY_STRING);
    	//EXTERNAL_FORM_BUILDER : START
    	returnTemplate	=	NewPortalUtils.replaceExtFormsKeywords(returnTemplate, leadId, templateId, "fs",forSubject);
    	//EXTERNAL_FORM_BUILDER : END
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$CANDIDATE_WEB_PAGE$",
    			userMap.get("CANDIDATE_WEB_PAGE") != null ? userMap
    					.get("CANDIDATE_WEB_PAGE") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$FIRST_NAME$",
    			userMap.get("FIRST_NAME1") != null ? userMap.get("FIRST_NAME1")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$LAST_NAME$",
    			userMap.get("LAST_NAME1") != null ? userMap.get("LAST_NAME1")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$WEB_PAGE$",
    			userMap.get("WEB_PAGE") != null ? userMap.get("WEB_PAGE")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$URL_TO_DOWNLOAD_FDD$",
    			userMap.get("URL_TO_DOWNLOAD_FDD") != null ? userMap
    					.get("URL_TO_DOWNLOAD_FDD") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$PASSWORD$",
    			userMap.get("PASSWORD") != null ? userMap.get("PASSWORD")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USERID$",
    			userMap.get("USERID") != null ? userMap.get("USERID")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$CAPTIVATE_URL_ONLY$",
    			userMap.get("CAPTIVATE_URL_ONLY") != null ? userMap
    					.get("CAPTIVATE_URL_ONLY") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate,
    			"http://$SUB_URL$",
    			userMap.get("SUB_URL") != null ? userMap.get("SUB_URL")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(returnTemplate, "$SUB_URL$",
    			userMap.get("SUB_URL") != null ? userMap.get("SUB_URL")
    					: FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$CANDIDATE_USER_ID$",
    			userMap.get("CANDIDATE_USER_ID") != null ? userMap
    					.get("CANDIDATE_USER_ID") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$CONTACT_FIRST_NAME$",
    			userMap.get("CONTACT_FIRST_NAME") != null ? userMap
    					.get("CONTACT_FIRST_NAME") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$CONTACT_LAST_NAME$",
    			userMap.get("CONTACT_LAST_NAME") != null ? userMap
    					.get("CONTACT_LAST_NAME") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PREFERRED_CITY1$",
    			userMap.get("PREFERRED_CITY1") != null ? userMap
    					.get("PREFERRED_CITY1") : FieldNames.EMPTY_STRING);

    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PREFERRED_STATE_ID1$",
    			(userMap.get("PREFERRED_STATE_ID1") != null && !"Not Available".equals(userMap.get("PREFERRED_STATE_ID1"))) ? userMap
    					.get("PREFERRED_STATE_ID1") : FieldNames.EMPTY_STRING);
    	// FS_ENH_AddressKeywords  starts
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PREFERRED_COUNTRY1$",
    			(userMap.get("PREFERRED_COUNTRY1") != null && !"Not Available".equals(userMap.get("PREFERRED_COUNTRY1")))? userMap
    					.get("PREFERRED_COUNTRY1") : FieldNames.EMPTY_STRING);

    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PREFERRED_CITY2$",
    			userMap.get("PREFERRED_CITY2") != null ? userMap
    					.get("PREFERRED_CITY2") : FieldNames.EMPTY_STRING);

    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PREFERRED_STATE_ID2$",
    			(userMap.get("PREFERRED_STATE_ID2") != null && !"Not Available".equals(userMap.get("PREFERRED_STATE_ID2")))? userMap
    					.get("PREFERRED_STATE_ID2") : FieldNames.EMPTY_STRING);
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$PREFERRED_COUNTRY2$",
    			(userMap.get("PREFERRED_COUNTRY2") != null && !"Not Available".equals(userMap.get("PREFERRED_COUNTRY2")))? userMap
    					.get("PREFERRED_COUNTRY2") : FieldNames.EMPTY_STRING);	

    	if(forSubject && StringUtil.isValid(userMap.get("RECIPIENT_ADDRESS"))){
    		String add=PortalUtils.replaceAll(userMap.get("RECIPIENT_ADDRESS"),"\n", " ");
    		add=PortalUtils.replaceAll(userMap.get("RECIPIENT_ADDRESS"),"\r", " ");
    		returnTemplate = PortalUtils.replaceAll(
    				returnTemplate,
    				"$RECIPIENT_ADDRESS$",
    				add != null ?  add : FieldNames.EMPTY_STRING);
    	}
    	else{
    		returnTemplate = PortalUtils.replaceAll(
    				returnTemplate,
    				"$RECIPIENT_ADDRESS$",
    				userMap.get("RECIPIENT_ADDRESS") != null ? userMap
    						.get("RECIPIENT_ADDRESS") : FieldNames.EMPTY_STRING);
    	}
    	// FS_ENH_AddressKeywords ends

    	//BOEFLY_INTEGRATION : START
    	returnTemplate = PortalUtils.replaceAll(
    			returnTemplate,
    			"$BOEFLY_LINK$",
    			(userMap.get("BOEFLY_LINK") != null && "on".equals(_baseConstants.BOEFLY_INTEGRATION_STATUS)) ? userMap.get("BOEFLY_LINK") : FieldNames.EMPTY_STRING);
    	//BOEFLY_INTEGRATION : END

    	return returnTemplate;

    }
    
    public static String replaceKeywords(String returnTemplate, Map<String, String> userMap, String moduleId, String Id, boolean isBroker) {
        return replaceKeywords(returnTemplate,userMap,moduleId,Id,isBroker,false);
    }

    public static String replaceKeywords(String returnTemplate, Map<String, String> userMap, String moduleId, String Id, boolean isBroker, boolean skipRecipNames) {
        return replaceKeywords(returnTemplate,userMap,moduleId,Id,isBroker,skipRecipNames,false);
    }
    
    public static String replaceKeywords(String returnTemplate, Map<String, String> userMap, String moduleId, String Id, boolean isBroker, boolean skipRecipNames, boolean forSubject) {
        return replaceKeywords(returnTemplate, userMap, moduleId, Id, isBroker, skipRecipNames, forSubject,"","");
    }

    public static String replaceKeywords(String returnTemplate,	Map<String, String> userMap, String moduleId, String Id, boolean isBroker, boolean skipRecipNames, boolean forSubject, String leadId, String templateId) {
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        String currentDate = DateUtil.formatDate(DateUtil.getCurrentDateTime(),
                _baseConstants.DISPLAY_FORMAT_HMA);
        String phone = null, mobile = null;
        if (userMap.get("PHONE1") != null) {
            phone = PortalUtils.formatPhoneNo(userMap.get("PHONE1"),userMap.get("COUNTRY"));
        } else {
            phone = FieldNames.EMPTY_STRING;
        }

        if (userMap.get("MOBILE") != null) {
            mobile = PortalUtils.formatPhoneNo(userMap.get("MOBILE"),userMap.get("COUNTRY"));
        } else {
            mobile = FieldNames.EMPTY_STRING;
        }
        if("111111111".equals(userMap.get("USER_NO"))){
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_FIRST_NAME$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_LAST_NAME$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_ADDRESS$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_CITY$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_STATE$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_ZIP$",FieldNames.EMPTY_STRING);
    		
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_EMAIL$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_PHONE_EXTENSION$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_PHONE$", FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_MOBILE$", FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_FAX$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_TITLE$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_COUNTRY$",FieldNames.EMPTY_STRING);
    		}else{
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_FIRST_NAME$",userMap.get("FIRST_NAME") != null ? userMap.get("FIRST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_LAST_NAME$",userMap.get("LAST_NAME") != null ? userMap.get("LAST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_ADDRESS$",userMap.get("ADDRESS") != null ? userMap.get("ADDRESS") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_CITY$",userMap.get("CITY") != null ? userMap.get("CITY") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_STATE$",userMap.get("STATE") != null ? userMap.get("STATE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_ZIP$",userMap.get("ZIPCODE") != null ? userMap.get("ZIPCODE") : FieldNames.EMPTY_STRING);
        if(forSubject){
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_EMAIL$",userMap.get("EMAIL_ID") != null ? HtmlToText.htmlToPlainText(userMap.get("EMAIL_ID")) : FieldNames.EMPTY_STRING);
        }
        else
        {
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_EMAIL$",userMap.get("EMAIL_ID") != null ? userMap.get("EMAIL_ID") : FieldNames.EMPTY_STRING);
        }
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_PHONE_EXTENSION$",userMap.get("PHONE1_EXTN") != null ? userMap.get("PHONE1_EXTN") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_PHONE$", phone);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_MOBILE$", mobile);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_FAX$",userMap.get("FAX") != null ? userMap.get("FAX") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_TITLE$",userMap.get("JOB_TITLE") != null ? userMap.get("JOB_TITLE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_WEBPAGE$", userMap.get("OWNERS_WEBPAGE")!=null?(String)userMap.get("OWNERS_WEBPAGE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNERS_COUNTRY$",userMap.get("COUNTRY") != null ? userMap.get("COUNTRY") : FieldNames.EMPTY_STRING);
    	}
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$DATE$",currentDate);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$SENDER_NAME$",userMap.get("SENDER_NAME") != null ? userMap.get("SENDER_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$VIRTUAL_BROCHURE_WEB_PAGE$",userMap.get("VIRTUAL_BROCHURE_WEB_PAGE") != null ? userMap.get("VIRTUAL_BROCHURE_WEB_PAGE"): FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$VIRTUAL_BROCHURE_PASSWORD$",userMap.get("VIRTUAL_BROCHURE_PASSWORD") != null ? userMap.get("VIRTUAL_BROCHURE_PASSWORD"): FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$VIRTUAL_BROCHURE_USER_ID$",userMap.get("VIRTUAL_BROCHURE_USER_ID") != null ? userMap.get("VIRTUAL_BROCHURE_USER_ID"): FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$CANDIDATE_PASSWORD$",userMap.get("CANDIDATE_PASSWORD") != null ? userMap.get("CANDIDATE_PASSWORD") : FieldNames.EMPTY_STRING);
        if(forSubject){
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNER_SIGNATURE$",FieldNames.EMPTY_STRING);// P_ENH_AUTOMATIC_SIGNATURE:ANKIT
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$NEXT_LINE$"," ");
        }
        else
        {
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OWNER_SIGNATURE$",userMap.get("OWNER_SIGNATURE") != null ? userMap.get("OWNER_SIGNATURE") : FieldNames.EMPTY_STRING);// P_ENH_AUTOMATIC_SIGNATURE:ANKIT
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$NEXT_LINE$","<br/>\r\n");
        }

        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_NAME$",userMap.get("USER_NAME")!=null?(String)userMap.get("USER_NAME"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$COUNT$",userMap.get("COUNT")!=null?(String)userMap.get("COUNT"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CONTACTS$",userMap.get("CONTACTS")!=null?(String)userMap.get("CONTACTS"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_NAME$", userMap.get("CENTER_NAME")!=null?(String)userMap.get("CENTER_NAME"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_CONTACT_NAME$", userMap.get("CENTER_CONTACT_NAME")!=null?(String)userMap.get("CENTER_CONTACT_NAME"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_STREET_ADDRESS$", userMap.get("CENTER_STREET_ADDRESS")!=null?(String)userMap.get("CENTER_STREET_ADDRESS"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_CITY$", userMap.get("CENTER_CITY")!=null?(String)userMap.get("CENTER_CITY"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_STATE$",userMap.get("CENTER_STATE")!=null?(String)userMap.get("CENTER_STATE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_ZIP$", userMap.get("CENTER_ZIP")!=null?(String)userMap.get("CENTER_ZIP"):FieldNames.EMPTY_STRING);
        if(forSubject){
            returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_EMAIL$", userMap.get("CENTER_EMAIL")!=null?HtmlToText.htmlToPlainText((String)userMap.get("CENTER_EMAIL")):FieldNames.EMPTY_STRING);
            returnTemplate = PortalUtils.replaceAll(returnTemplate,"$NEXT_LINE$"," ");
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$BOEFLY_LINK$",(userMap.get("BOEFLY_LINK") != null && "on".equals(_baseConstants.BOEFLY_INTEGRATION_STATUS)) ? "Boefly Link" : FieldNames.EMPTY_STRING);
        }
        else{
            returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_EMAIL$", userMap.get("CENTER_EMAIL")!=null?(String)userMap.get("CENTER_EMAIL"):FieldNames.EMPTY_STRING);
            returnTemplate = PortalUtils.replaceAll(returnTemplate,"$NEXT_LINE$","<br/>\r\n");
            returnTemplate = PortalUtils.replaceAll(returnTemplate, "$BOEFLY_LINK$",(userMap.get("BOEFLY_LINK") != null && "on".equals(_baseConstants.BOEFLY_INTEGRATION_STATUS)) ? userMap.get("BOEFLY_LINK") : FieldNames.EMPTY_STRING);
        }
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_PHONE$", userMap.get("CENTER_PHONE")!=null?(String)userMap.get("CENTER_PHONE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_MOBILE$", userMap.get("CENTER_MOBILE")!=null?(String)userMap.get("CENTER_MOBILE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate,"$CENTER_FAX$",userMap.get("CENTER_FAX")!=null?(String)userMap.get("CENTER_FAX"):FieldNames.EMPTY_STRING);

        //returnTemplate = PortalUtils.replaceAll(returnTemplate, "$PARTIALLY_APPLICATION_FORM_URL$",userMap.get("PARTIALLY_APPLICATION_FORM_URL") != null ? userMap.get("PARTIALLY_APPLICATION_FORM_URL") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$APPLICATION_PASSWORD$",userMap.get("APPLICATION_PASSWORD") != null ? userMap.get("APPLICATION_PASSWORD") : FieldNames.EMPTY_STRING);
        //EXTERNAL_FORM_BUILDER : START
        if("4".equals(moduleId) || "7".equals(moduleId)) {
        	returnTemplate	=	NewPortalUtils.replaceExtFormsKeywords(returnTemplate, Id, templateId, "cm",forSubject);
        	returnTemplate	=	NewPortalUtils.replaceGeneralCMKeyWords(returnTemplate, Id, moduleId);
        }else if("3".equals(moduleId))
        {
        	returnTemplate	=	NewPortalUtils.replaceExtFormsKeywords(returnTemplate, leadId, templateId, "fim",forSubject);
        }
        else {
        	returnTemplate	=	NewPortalUtils.replaceExtFormsKeywords(returnTemplate, leadId, templateId, "fs",forSubject);
        }
		//EXTERNAL_FORM_BUILDER : END
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$CANDIDATE_WEB_PAGE$",userMap.get("CANDIDATE_WEB_PAGE") != null ? userMap.get("CANDIDATE_WEB_PAGE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$WEB_PAGE$",userMap.get("WEB_PAGE") != null ? userMap.get("WEB_PAGE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$URL_TO_DOWNLOAD_FDD$",userMap.get("URL_TO_DOWNLOAD_FDD") != null ? userMap.get("URL_TO_DOWNLOAD_FDD") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$PASSWORD$",userMap.get("PASSWORD") != null ? userMap.get("PASSWORD") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USERID$",userMap.get("USERID") != null ? userMap.get("USERID" ) : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$CAPTIVATE_URL_ONLY$",userMap.get("CAPTIVATE_URL_ONLY") != null ? userMap.get("CAPTIVATE_URL_ONLY") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "http://$SUB_URL$",userMap.get("SUB_URL") != null ? userMap.get("SUB_URL") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$SUB_URL$",userMap.get("SUB_URL") != null ? userMap.get("SUB_URL") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$CANDIDATE_USER_ID$",userMap.get("CANDIDATE_USER_ID") != null ? userMap.get("CANDIDATE_USER_ID") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$NEXT_LINE$",userMap.get("NEXT_LINE") != null ? userMap.get("NEXT_LINE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$CONTACT_FIRST_NAME$",userMap.get("CONTACT_FIRST_NAME") != null ? userMap.get("CONTACT_FIRST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$CONTACT_LAST_NAME$",userMap.get("CONTACT_LAST_NAME") != null ? userMap.get("CONTACT_LAST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$BROKER_FIRST_NAME$",userMap.get("BROKER_FIRST_NAME") != null ? userMap.get("BROKER_FIRST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$BROKER_LAST_NAME$",userMap.get("BROKER_LAST_NAME") != null ? userMap.get("BROKER_LAST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$RECIPIENT_EMAIL_ID$", userMap.get("RECIPIENT_EMAIL_ID")!=null?(String)userMap.get("RECIPIENT_EMAIL_ID"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$LEAD_ID$", userMap.get("LEAD_ID")!=null?(String)userMap.get("LEAD_ID"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OPT_IN_URL$",userMap.get("OPT_IN_URL")!=null?(String)userMap.get("OPT_IN_URL"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$OPT_OUT_URL$",userMap.get("OPT_OUT_URL")!=null?(String)userMap.get("OPT_OUT_URL"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$FIRST_NAME$", userMap.get("VFIRST_NAME")!=null?(String)userMap.get("VFIRST_NAME"):FieldNames.EMPTY_STRING);							returnTemplate = PortalUtils.replaceAll(returnTemplate,"$OWNERS_TITLE$", userMap.get("OWNERS_TITLE")!=null?(String)userMap.get("OWNERS_TITLE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$LAST_NAME$", userMap.get("VLAST_NAME")!=null?(String)userMap.get("VLAST_NAME"):FieldNames.EMPTY_STRING);
        //BB-20150320-274 starts
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$FDD_NAME$", userMap.get("FDD_NAME")!=null?(String)userMap.get("FDD_NAME"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$EXPIRY_DATE$", userMap.get("EXPIRY_DATE")!=null?(String)userMap.get("EXPIRY_DATE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$VERSION$", userMap.get("VERSION")!=null?(String)userMap.get("VERSION"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$UPLOADING_DATE$", userMap.get("UPLOADING_DATE")!=null?(String)userMap.get("UPLOADING_DATE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$SENDER_NAME$", userMap.get("SENDER_NAME")!=null ?  userMap.get("SENDER_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$SENDER_SIGNATURE$", userMap.get("SENDER_SIGNATURE")!=null ?  userMap.get("SENDER_SIGNATURE") : FieldNames.EMPTY_STRING);
        // BB-20150320-274 ends
        
        returnTemplate = replaceFSKeywords(returnTemplate, userMap, skipRecipNames, forSubject, leadId, templateId); //for templates of previous builds.
        
        if(isBroker)
        {
            try
            {
                returnTemplate = replaceBrokerKeywords(returnTemplate, moduleId);
            }catch(Exception e){
                logger.error("Exception in CommonUtil Class in replaceKeywords() 1 :::" +e.getMessage());
            }
        }else
        {
            try
            {
            	String country = userMap.get("COUNTRY");
            	if("4".equals(moduleId) || "7".equals(moduleId)) {
            		country = userMap.get("CONTACT_COUNTRY");
            	}
                returnTemplate = replaceOtherKeywords(returnTemplate, moduleId, Id, skipRecipNames, forSubject,country);
            }catch(Exception e){
                logger.error("Exception in CommonUtil Class in replaceKeywords() 2 :::" +e.getMessage());
            }
        }
        return returnTemplate;
    }
    
    public static String replaceUserKeywords(String returnTemplate,	Map<String, String> userMap){
    	
    	BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        String currentDate = DateUtil.formatDate(DateUtil.getCurrentDateTime(),
                _baseConstants.DISPLAY_FORMAT_HMA);
        String phone = null, mobile = null;
        if (userMap.get("PHONE1") != null) {
            phone = PortalUtils.formatPhoneNo(userMap.get("PHONE1"),userMap.get("COUNTRY"));
        } else {
            phone = FieldNames.EMPTY_STRING;
        }

        if (userMap.get("MOBILE") != null) {
            mobile = PortalUtils.formatPhoneNo(userMap.get("MOBILE"),userMap.get("COUNTRY"));
        } else {
            mobile = FieldNames.EMPTY_STRING;
        }
        if("111111111".equals(userMap.get("USER_NO"))){
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_FIRST_NAME$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_LAST_NAME$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_ADDRESS$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_CITY$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_STATE$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_ZIP$",FieldNames.EMPTY_STRING);
    		
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_EMAIL$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_PHONE_EXTENSION$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_PHONE$", FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_MOBILE$", FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_FAX$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_TITLE$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$USER_COUNTRY$",FieldNames.EMPTY_STRING);
    		returnTemplate = PortalUtils.replaceAll(returnTemplate,"$FRANCHISEE_ID$",FieldNames.EMPTY_STRING);
    		}else{
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_FIRST_NAME$",userMap.get("FIRST_NAME") != null ? userMap.get("FIRST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_LAST_NAME$",userMap.get("LAST_NAME") != null ? userMap.get("LAST_NAME") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_ADDRESS$",userMap.get("ADDRESS") != null ? userMap.get("ADDRESS") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_CITY$",userMap.get("CITY") != null ? userMap.get("CITY") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_STATE$",userMap.get("STATE") != null ? userMap.get("STATE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_ZIP$",userMap.get("ZIPCODE") != null ? userMap.get("ZIPCODE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_EMAIL$",userMap.get("EMAIL_ID") != null ? userMap.get("EMAIL_ID") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_PHONE_EXTENSION$",userMap.get("PHONE1_EXTN") != null ? userMap.get("PHONE1_EXTN") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_PHONE$", phone);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_MOBILE$", mobile);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_FAX$",userMap.get("FAX") != null ? userMap.get("FAX") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_TITLE$",userMap.get("JOB_TITLE") != null ? userMap.get("JOB_TITLE") : FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_WEBPAGE$", userMap.get("OWNERS_WEBPAGE")!=null?(String)userMap.get("OWNERS_WEBPAGE"):FieldNames.EMPTY_STRING);
        returnTemplate = PortalUtils.replaceAll(returnTemplate, "$USER_COUNTRY$",userMap.get("COUNTRY") != null ? userMap.get("COUNTRY") : FieldNames.EMPTY_STRING);
    	}
        
        return returnTemplate;
    }
    
    
    private static String replaceBrokerKeywords(String returnTemplate, String moduleId)
    {
        ResultSet result = null;
        try
        {
            result = getKeywordsValues(moduleId);
            while(result.next())
            {
                returnTemplate = PortalUtils.replaceAll(returnTemplate, result.getString("DISPLAY_VALUE"), FieldNames.EMPTY_STRING);
            }

        } catch (Exception e)
        {
            logger.error("Exception in CommonUtil Class in replaceBrokerKeywords() :::" +e.getMessage());
        }
        return returnTemplate;
    }


    private static String transform(Field pField, String psValue,String psDependentFieldValue,String paramData) throws Exception
    {
        String sMethodName 			= 	pField.getTransformMethod();
        String sMethodNameParam 		= 	pField.getTransformMethodParam();
        if (sMethodName == null) {
            return psValue;
        }
        Class clsArr[] 				= 	new Class[] { String.class};
        Object valArr[] 				= 	new Object[] { psValue};
        
        
        if (StringUtil.isValid(sMethodNameParam))
        {
            clsArr 			= 		new Class[] { String.class, String.class};
            valArr 			= 		new Object[] { psValue, psDependentFieldValue};
        }else  if (StringUtil.isValid(sMethodName) && StringUtil.isValid(paramData)) {
            clsArr 			= 		new Class[] { String.class, String.class};
            valArr 			= 		new Object[] { psValue, paramData};
        }
        
        if("transformLeadSource2".equals(pField.getTransformMethod()) && "leadSource2ID".equals(pField.getFieldName())) {
        	if(StringUtil.isInt(psValue)) {
        		clsArr = new Class[] { String.class, String.class};
        		valArr = new Object[] { psValue, paramData };
        	} else {
        		clsArr = 	new Class[] { String.class};
        		valArr = 	new Object[] { psValue};
        	}
        }
        
        DataManipulator manipulator = DataManipulator.getInstance();
        Method method = manipulator.getClass().getDeclaredMethod(pField.getTransformMethod(), clsArr);
        String sNewVal = (String) method.invoke(null, valArr);
        return sNewVal;
    }


    private static String getValueFromField(String fieldName,SequenceMap sMap,String aliasName, String mainTable, String tableAnchor,boolean flag)
    {
        String paramData = (String)sMap.get(aliasName);
        String otherTableAnchor = "";
        String sMethodNameParamValue = "";
        try
        {
            DataManipulator manipulator = DataManipulator.getInstance();
            FieldMappings mapping = DBUtil.getInstance().getFieldMappings(tableAnchor);
            Field fld = mapping.getField(fieldName);
            if(flag)
            {
                fld = mapping.getOtherTableField(fieldName);
            }
            String sDisType	= fld.getDisplayTypeField();
            if(sDisType != null && sDisType.equals("Checkbox"))
            {
                if(fld.isBuildField())
                {
                    if(fld.getTransformMethod() != null)
                    {
                        sMethodNameParamValue = (String)sMap.get(mainTable+"_"+fld.getTransformMethodParam());
                        if(!StringUtil.isValid(paramData))
                            paramData="-1";
                        paramData = transform(fld,paramData,sMethodNameParamValue,fld.getCheckboxSourceMethodArgs());
                    }
                } else
                {
                    if(paramData != null)
                    {
                        paramData = BuilderFormWebImpl.getInstance().getCheckboxOptionsValueForId(fld.getFieldName(),tableAnchor, paramData);
                    }
                }
            }else if(sDisType != null && sDisType.equals("Radio"))
            {
                if(fld.isBuildField())
                {
                    if(fld.getTransformMethod() != null)
                    {
                        sMethodNameParamValue = (String)sMap.get(mainTable+"_"+fld.getTransformMethodParam());
                        if(!StringUtil.isValid(paramData))
                            paramData="-1";
                        paramData = transform(fld,paramData,sMethodNameParamValue,fld.getRadioSourceMethodArgs());
                    }
                }else
                {
                    if(paramData != null)
                    {
                        paramData = BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fld.getFieldName(),tableAnchor, paramData);

                    }
                }
            }else if(sDisType != null && sDisType.equals("Combo"))
            {
                if(!fld.isBuildField() && !StringUtil.isValid(fld.getTransformMethod()))
                {
                    if(paramData != null)
                    {
                        paramData = BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fld.getFieldName(),tableAnchor, paramData);
                    }
                } else if(StringUtil.isValid(fld.getTransformMethod()))
                {
                	sMethodNameParamValue = (String)sMap.get(mainTable+"_"+fld.getComboMethodParam());
                	if("leadSource2ID".equals(fld.getFieldName())) {
                        if ("0".equals(MasterDataMgr.newInstance().getMasterDataDAO().getValue(10014, 12585))) {
                        	paramData = transform(fld, paramData, "", (String)sMap.get(mainTable+"_sourceContactType"));
                        } else {
                        	paramData = transform(fld, paramData, "", null);
                        }
                    } else {
                    	paramData = transform(fld,paramData,sMethodNameParamValue,null);
                    }
                }
            }else
            {
                if(fld.getTransformMethod() != null)
                {
                    sMethodNameParamValue = (String)sMap.get(mainTable+"_"+fld.getTransformMethodParam());
                    if(StringUtil.isValidNew(paramData))
                    paramData = transform(fld,paramData,sMethodNameParamValue,null);
                }
            }
            if(fld!=null &&  fld.isPiiEnabled()||("birthDate".equals(fld.getFieldName()) && "fsLeadQualificationDetail".equals(tableAnchor))||("spouseBirthDate".equals(fld.getFieldName()) && "fsLeadQualificationDetail".equals(tableAnchor))||("birthDate".equals(fld.getFieldName()) && "fsLeadPersonalProfile".equals(tableAnchor))){
            	if(!fld.isBuildField()&&"Date".equals(fld.getDisplayTypeField())){
            		paramData=DateUtil.getDisplayDate(paramData);
            		paramData=PortalUtils.getPrivateFieldFormat(paramData,"bDate");
            	}else{
            	paramData=PortalUtils.getPrivateFieldFormat(paramData);	
            	}
            }
        }
        catch (Exception e)
        {
            logger.error("Exception in CommonUtil Class in getValueFromField() :::",e);
        }
        return paramData;
    }
    //BB-20150203-259 Ends (To make available all the fields of Form builder as keyword.)

    // ZCB-20150120-071  starts
    /**
     * @author Divanshu
     * This funciton check whether perticular franchisee location is mapped into SM module or not
     * @param franchisee No
     */
    public static String checkMUIDCaseFBMapping(String smFranchiseID)
    {
        ResultSet rs=null;
        String result="no";
        String query=new String("SELECT FB_PAGE_PLACE_ID FROM FBPAGE_PLACES WHERE FRANCHISEE_NO IN("+smFranchiseID+")");
        rs = QueryUtil.getResult(query,null);
        if (rs!=null && rs.next()) {
            if(StringUtil.isValid(rs.getString("FB_PAGE_PLACE_ID"))){
                result="yes";
            }
        }

        return result;
    }

    // ZCB-20150120-071  ends

    public static StringBuffer validateBusinessCategoryIntegration(String businessCategoryId)
    {
        ResultSet rs=null;
        String result=new String();
        StringBuffer queryBuffer=new StringBuffer("SELECT BUSINESS_NAME FROM FRANCHISEE_LOCAL_LISTING WHERE CATEGORY LIKE '%"+businessCategoryId+"%'");
        rs=QueryUtil.getResult(queryBuffer.toString(),null);
        if (rs!=null && rs.next()) {
            result=rs.getString("BUSINESS_NAME");
        }
        if(!StringUtil.isValid(result.toString()))
        {
            result="";
        }
        StringBuffer output=new StringBuffer(result);
        return output;
    }
    //P_Enh_COMMON_Task_Mails starts
    public static SequenceMap getOwnersMap(String ownerId)
    {
        SequenceMap ownersMap = new SequenceMap();
        StringBuffer query = new StringBuffer();
        query.append("SELECT US.USER_NO, F.PHONE1_EXTN, F.PHONE1, US.USER_FIRST_NAME , US.USER_LAST_NAME, F.ADDRESS, F.JOB_TITLE, F.CITY, F.STATE, F.ZIPCODE, F.EMAIL_ID, F.MOBILE, F.FAX, S.SIGNATURE FROM USERS US  LEFT JOIN FRANCHISEE F ON F.FRANCHISEE_NO = US.FRANCHISEE_NO  LEFT JOIN MESSAGE_SIGNATURE S ON S.USER_NO = US.USER_NO WHERE US.USER_NO = ");
        query.append(ownerId + " LIMIT 1");
        ResultSet result = null;
        try {
            result = QueryUtil.getResult(query.toString(), null);
            if (result != null) {
                while (result.next()) {
                    Info info = new Info();
                    info.set("ownerFirstName", result.getString("USER_FIRST_NAME"));
                    info.set("ownerLastName", result.getString("USER_LAST_NAME"));
                    info.set("address", result.getString("ADDRESS"));
                    info.set("jobTitle", result.getString("JOB_TITLE"));
                    info.set("city", result.getString("CITY"));
                    info.set("state", result.getString("STATE"));
                    info.set("zipCode", result.getString("ZIPCODE"));
                    info.set("emailId", result.getString("EMAIL_ID"));
                    info.set("mobile", result.getString("MOBILE"));
                    info.set("fax", result.getString("FAX"));
                    info.set("phoneExt", result.getString("PHONE1_EXTN"));
                    info.set("phone", result.getString("PHONE1"));
                    info.set("ownerSignature", result.getString("SIGNATURE"));
                    ownersMap.put(result.getString("USER_NO"), info);
                }
            }
        } catch(Exception e){
            e.printStackTrace();
        }
        return ownersMap;
    }
//P_Enh_COMMON_Task_Mails ends

    /**
     * This function provides the map for the tabs present in the FIM/FS
     * BB-20150203-259 (Tab Rename)
     * @param mainTableAnchor
     * @return
     */
    public static SequenceMap getBuilderTabDataMap(String mainTableAnchor) {
        SequenceMap tableBuilderMap = new SequenceMap();
        String module = "'fim'";
        if(StringUtil.isValidNew(mainTableAnchor)) {
            	String moduleArray[]=mainTableAnchor.replaceAll(" ","").split(",");
            	mainTableAnchor="";
            	for(int i=0;i<moduleArray.length;i++)
            	{
            		if(i!=0)
            		{
            			mainTableAnchor=mainTableAnchor+",'"+moduleArray[i]+"'";
            		}
            		else
            		{
            			mainTableAnchor="'"+moduleArray[i]+"'";
            		}
            	}
            module = mainTableAnchor;
        }
        String whereClause=" MODULE IN ("+module+") ";
        if("'mu'".equals(mainTableAnchor)){
        	whereClause="( MODULE IN ("+module+") OR ( MODULE IN ('fim') AND TABLE_ANCHOR IN ('fimOwners','fimComplaint','fimEntityDetail','fimTraining','fimEmployees'))) ";
        }
        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("SELECT BUILDER_FORM_ID, FORM_NAME,MODULE, TABLE_ANCHOR, BUILDER_FIELD_NO, IS_CUSTOM, BUILDER_WEB_FORMS.MODULE, DISPLAY_NAME ");
        queryBuilder.append("FROM BUILDER_WEB_FORMS ");
        queryBuilder.append("WHERE "+whereClause+" AND BUILDER_WEB_FORMS.IS_ACTIVE='Y' AND BUILDER_WEB_FORMS.CAPTIVATE_SECTION_ID IS NULL ");
        queryBuilder.append("ORDER BY FORM_NAME ");
        ResultSet result = null;
        Info tabInfo = null;
        try {
            result = QueryUtil.getResult(queryBuilder.toString(), null);
            while(result.next()) {
                tabInfo = new Info();
                tabInfo.set("BUILDER_FORM_ID", result.getString("BUILDER_FORM_ID"));
                tabInfo.set(FieldNames.FORM_NAME, result.getString("FORM_NAME"));
                tabInfo.set(FieldNames.MODULE_NAME, result.getString("MODULE"));
                tabInfo.set(FieldNames.DISPLAY_NAME, result.getString("DISPLAY_NAME"));
                tabInfo.set(FieldNames.IS_CUSTOM, result.getString("IS_CUSTOM"));
                tableBuilderMap.put(result.getString("BUILDER_FORM_ID"), tabInfo);
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        } finally {
            QueryUtil.releaseResultSet(result);
        }
        return tableBuilderMap;
    }

    public static Info viewTaskDetails(String taskID,String userNo){
        return viewTaskDetails( taskID, userNo,null);
    }

    public static Info viewTaskDetails(String taskID,String userNo,String forArchived){
        return viewTaskDetails(taskID, userNo, forArchived, null);
    }

    public static Info viewTaskDetails(String taskID,String userNo,String forArchived, String timeZoneUserNo)
    {

        com.appnetix.app.components.taskmgr.manager.TaskMgr taskmgr=com.appnetix.app.components.taskmgr.manager.TaskMgr.newInstance();
        String tZConvertedDateTime = null;
        String userTimezone = null;
        String userLevel = null;
        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        //getting user time zone
        userTimezone = UserTimezoneMap.newInstance().getTimezone(userNo);

        String showEstimateParam = getShowEstimateParam();
        //String tStamp=null;
        int year=0;
        String moduleName												=	"";
        String moduleTableName										=	"";
        String moduleTablePrimaryKey							=	"";
        String moduleFirstNameValue								=	"";
        String moduleLastNameValue								=	"";

        Info info= null;
        String query= "SELECT CMD.FRANCHISEE_NO AS CONTACT_FRANCHISEE_NO, CONCAT(U.USER_FIRST_NAME,' ',U.USER_LAST_NAME) AS ASSIGNED_BY_USER,T.*,CMD.CONTACT_OWNER_ID,U.FRANCHISEE_NO,U1.USER_LEVEL,TT.TASK_TYPE_NAME,TD.OPEN_BALANCE,SUM(TD.TOTAL_AMOUNT_PAID) TOTAL_AMOUNT_PAID,TP.PAYMENT_STATUS,TS.TASK_STATUS_NAME 'DATA_VALUE1',MD2.DATA_VALUE 'DATA_VALUE2' FROM SERVICE314_TASKS T LEFT JOIN TASK_STATUS TS ON TS.TASK_STATUS_ID=T.STATUS LEFT JOIN MASTER_DATA MD1 ON MD1.MASTER_DATA_ID=T.STATUS LEFT JOIN MASTER_DATA MD2 ON MD2.MASTER_DATA_ID=T.PRIORITY LEFT JOIN TASK_TYPE TT ON TT.TASK_TYPE_ID=T.TASK_TYPE LEFT JOIN "+_baseConstants.CM_TMS+"TMS_TRANSACTION TP ON T.TASK_ID=TP.TASK_ID LEFT JOIN TMS_DEPOSIT TD ON T.TASK_ID=TD.AGAINST_ID AND TD.AGAINST_TYPE='T' LEFT JOIN USERS U ON U.USER_NO=T.ASSIGN_BY LEFT JOIN CM_CONTACT_DETAILS CMD ON T.FOREIGN_ID=CMD.CONTACT_ID LEFT JOIN USERS U1 ON U1.USER_NO=CMD.CONTACT_OWNER_ID   WHERE T.TASK_ID=? GROUP BY AGAINST_ID";
        String params[] =   {taskID};
        ResultSet result = null;
        try
        {

            int taskNo=0;
            String showTaskNo="";
            //executting query
            result= QueryUtil.getResult(query, params);

            if(result.next())
            {
                if(Constants.IS_TZ && result.getString("ASSIGN_TO")!=null && !result.getString("ASSIGN_TO").trim().equals("-1"))
                {
                    userTimezone=UserTimezoneMap.newInstance().getTimezone(result.getString("ASSIGN_TO"));
                }
                taskNo=0;
                showTaskNo="";
                info = new Info();

				/* Added by Kapil Tyagi on WednesDay, 26-Dec-2007 to Add Task No */

                taskNo=Integer.parseInt(result.getString("TASK_NUMBER"))+_baseConstants.TASK_START_NO;
                showTaskNo=_baseConstants.TASK_PREFIX+taskNo;
                info.set(FieldNames.TASK_NUMBER,showTaskNo);  /* --End --*/

                info.set(FieldNames.TASK_ID,result.getString("TASK_ID"));
                String deposit = result.getString("TOTAL_AMOUNT_PAID");
                //B_CM_68743 Starts
                if(deposit==null || deposit.equals("null") || deposit.trim().equals(""))
                    //B_CM_68743 
                    deposit="0.00";
                info.set("DEPOSIT",NumberFormatUtils.formatCommaNumber(deposit));
                info.set("FRAN",result.getString("FRANCHISEE_NO"));
                info.set(FieldNames.CONTACT_FRANCHISEE_NO, result.getString("CONTACT_FRANCHISEE_NO"));
                info.set("CONTACT_OWNER_ID",result.getString("CONTACT_OWNER_ID"));
                userLevel = result.getString("USER_LEVEL");
                if(StringUtil.isValidNew(userLevel) && userLevel.trim().equals(Constants.USER_LEVEL_FRANCHISEE)){
                    info.set(FieldNames.FRANCHISEE_NO, result.getString("FRANCHISEE_NO"));
                }
                info.set("USER_LEVEL", userLevel);
                info.set(FieldNames.DURATION,result.getString("DURATION").substring(0, 5));
                info.set("TIME_SPENT", result.getString("TIME_SPENT"));
                info.set(FieldNames.MODULE_ID,result.getString("MODULE_ID"));

                info.set("TASK_TYPE",result.getString("TASK_TYPE"));
                String status = result.getString("PAYMENT_STATUS");
                if(status==null || status.trim().equals("null") || status.trim().equals(""))
                    status="N";
                info.set(FieldNames.PAYMENT_STATUS,status);
                info.set(FieldNames.FOREIGN_ID,result.getString("FOREIGN_ID"));
                info.set(FieldNames.OPEN_BALANCE,result.getString("OPEN_BALANCE"));
                info.set(FieldNames.INVOICE_ID,result.getString("INVOICE_ID"));
                info.set(FieldNames.INVOICE_NO,result.getString("INVOICE_NO"));
                info.set(FieldNames.SUB_TASK_TYPE_ID,result.getString("SUB_TASK_TYPE_ID"));
                info.set(FieldNames.ASSIGN_STATUS, result.getString("ASSIGN_STATUS"));
                info.set(FieldNames.FIRST_CHOICE_START_TIME, result.getTimestamp("FIRST_CHOICE_START_TIME"));
                info.set(FieldNames.FIRST_CHOICE_END_TIME, result.getTimestamp("FIRST_CHOICE_END_TIME"));
                info.set(FieldNames.SECOND_CHOICE_START_TIME, result.getTimestamp("SECOND_CHOICE_START_TIME"));
                info.set(FieldNames.SECOND_CHOICE_END_TIME, result.getTimestamp("SECOND_CHOICE_END_TIME"));
                info.set(FieldNames.ASSIGN_TO_OTHERS, result.getString("ASSIGN_TO_OTHERS"));
                info.set(FieldNames.EVENT_ID,result.getString("EVENT_ID"));
                info.set(FieldNames.GUEST_ID,result.getString("GUEST_ID"));

                info.set("ID",result.getString("TRANSACTION_ID"));
                String moduleID=result.getString("MODULE_ID");
                String foreignID=result.getString("FOREIGN_ID");

                //getting module details

                try
                {
                    //                  TaskMgr taskmgr=TaskMgr.newInstance();
                    SequenceMap sMap = taskmgr.getTaskModuleXMLDAO().getModuleMap();
                    //int mapSize	= sMap.size();
                    logger.info("sMap=========modulemap moduleId"+moduleID+"map"+sMap);
                    //object of TaskModule class

                    if(moduleID!=null)
                    {
                        TaskModule	moduleMap = (TaskModule)sMap.get(moduleID);

                        if(moduleMap!=null)
                        {
                            moduleName	= moduleMap.getModuleName();
                            moduleTableName = moduleMap.getModuleTableName();
                            moduleTablePrimaryKey =	moduleMap.getModulePrimaryKey();
                            moduleFirstNameValue = moduleMap.getFirstName();
                            moduleLastNameValue	= moduleMap.getLastName();
                        }
                    }
                    //task associated to
                    //String taskAssociatedTo=taskmgr.getAssociaterNameDAO().getAssociaterName(moduleFirstNameValue,moduleLastNameValue,moduleTableName,moduleTablePrimaryKey,foreignID);
                    //Modified by suniti on 9th March 06 Bug No: 13723: To insert salutation for contact name.
                    //Modified again on 20th March. As problem with FS module
                    String taskAssociatedTo = "";
                    logger.info("moduleTablePrimaryKey "+moduleTablePrimaryKey);

                    // Modified By Ravindra Verma on 3/22/2007 for bug 23364

                    if(moduleTablePrimaryKey.equals("CONTACT_ID"))
                    {
                        taskAssociatedTo = CommonUtil.getContactName(foreignID, forArchived);
                    }else
                    {
                        //Modified ON 10/31/2006 BY Parveen, for getting the name of lead in case for archived leads,

                        if(forArchived!= null && forArchived.equals("yes"))
                        {
                            moduleTableName = "FS_LEAD_DETAILS_ARCHIVE";
                        }

                        taskAssociatedTo = taskmgr.getAssociaterNameDAO().getAssociaterName(moduleFirstNameValue,moduleLastNameValue,moduleTableName,moduleTablePrimaryKey,foreignID);
                    }

                    info.set("associatedTo",taskAssociatedTo);

                    if (result.getString("MODULE_ID").equals("3"))
                    {
                        info.set("Name",createFIMLink(foreignID,AdminMgr.newInstance().getStoreDAO().getFranName(foreignID)));
                    } else
                        info.set("Name",taskAssociatedTo);
                }catch(Exception e)
                {
                    logger.error("Exception in gettinf module details",e);
                }

                if (result.getString("MODULE_ID").equals("4"))
                    info.set("contactID",result.getString("FOREIGN_ID"));
                else
                    info.set("leadID",result.getString("FOREIGN_ID"));



                // added by arun singhal on 4/4/2007 EW_TASKS_E_1
                if(result.getString("MODULE_ID").equals("4")){


                    info.set(FieldNames.TRANSACTION_ID,result.getString("TRANSACTION_ID"));
                    info.set(FieldNames.TRANSACTION_NUMBER,result.getString("TRANSACTION_NO"));

                    info.set(FieldNames.TRANSACTION_TYPE,result.getString("TRANSACTION_TYPE"));
                    info.set(FieldNames.INVOICE_ID,result.getString("INVOICE_ID"));

                    String transactionId = result.getString("TRANSACTION_ID");
                    String showNumber = result.getString("TRANSACTION_NO");

                    String contactID = result.getString("FOREIGN_ID");
                    String type = result.getString("TRANSACTION_TYPE");
                    String linkForPdf = "";
                    if(type != null && !type.equals("") && type.equals("T")){

                        showNumber = _baseConstants.INVOICE_PREFIX + (Integer.parseInt(showNumber) + _baseConstants.INVOICE_START_NO);
                        //                                     linkForPdf = "<a href=javascript:offerPopUpForPdf(\"tmsTransactionAsPdf?contactID="+contactID+"&transactionID="+transactionId+"\",700,800)><u>"+showNumber+"</u></a>";
                        //                                    SC_CM_B_3844
                        linkForPdf = "<a href=javascript:invoiceEstimateDetail(\"tmsTransactionDetail?contactID="+contactID+"&transactionID="+transactionId+"&viewFlag=true&show=true\")>"+showNumber+"</a>";
                    }else if (type != null && !type.equals("") && type.equals("E") && showEstimateParam!=null && showEstimateParam.equals("Y")){

                        showNumber = _baseConstants.ESTIMATE_PREFIX+(Integer.parseInt(showNumber) + _baseConstants.ESTIMATE_START_NO);
                        //                                    linkForPdf = "<a href=javascript:offerPopUpForPdf(\"tmsEstimateAsPdf?contactID="+contactID+"&estimateID="+transactionId+"\",700,800)><u>"+showNumber+"</u></a>";
                        //                                    SC_CM_B_3844
                        linkForPdf = "<a href=javascript:invoiceEstimateDetail(\"tmsEstimateDetail?contactID="+contactID+"&estimateID="+transactionId+"&viewFlag=true&show=true\")>"+showNumber+"</a>";
                        String invoiceID = result.getString("INVOICE_ID");
                        String invoiceNo = result.getString("INVOICE_NO");

                        if(invoiceID != null && !invoiceID.equals("") && !invoiceID.equals("null") && !invoiceID.equals("0")){

                            showNumber = _baseConstants.INVOICE_PREFIX + (Integer.parseInt(invoiceNo) + _baseConstants.INVOICE_START_NO);
                            //                                        linkForPdf = linkForPdf +" / "+ "<a href=javascript:offerPopUpForPdf(\"tmsTransactionAsPdf?contactID="+contactID+"&transactionID="+invoiceID+"\",700,800)><u>"+showNumber+"</u></a>";
                            //                                    SC_CM_B_3844 
                            linkForPdf = linkForPdf +" / "+ "<a href=javascript:invoiceEstimateDetail(\"tmsTransactionDetail?contactID="+contactID+"&transactionID="+invoiceID+"&viewFlag=true&show=true\")>"+showNumber+"</a>";
                        }

                    }
                    info.set("status1",result.getString("STATUS"));
                    info.set(FieldNames.IS_SOLD,result.getString("IS_SOLD"));
                    info.set(FieldNames.AMOUNT,linkForPdf);
                    info.set(FieldNames.IS_APPOINTMENT,result.getString("IS_APPOINTMENT"));

                }
                // end here



                info.set(FieldNames.TASK_ID,result.getString("TASK_ID"));
                info.set(FieldNames.SUBJECT,result.getString("SUBJECT"));
                info.set(FieldNames.REMINDER,result.getString("REMINDER"));
                info.set(FieldNames.PRIORITY,result.getString("DATA_VALUE2"));
                if(result.getString("ASSIGN_TO")!=null && result.getString("ASSIGN_TO").trim().equals("111111111"))
                {
                    info.set(FieldNames.ASSIGN_TO,"Unassigned");
                }
                else
                {
                    info.set(FieldNames.ASSIGN_TO,PortalUtils.getUserName(result.getString("ASSIGN_TO")));
                }
                info.set(FieldNames.ASSIGN_TO+"Val",result.getString("ASSIGN_TO"));
                info.set(FieldNames.ASSIGN_BY,result.getString("ASSIGN_BY"));
                info.set(FieldNames.STATUS,result.getString("DATA_VALUE1"));
                info.set(FieldNames.COMMENTS,result.getString("COMMENTS"));
                info.set("ASSIGNED_BY_USER",result.getString("ASSIGNED_BY_USER"));
                info.set(FieldNames.TASK_TYPE,result.getString("TASK_TYPE_NAME"));

                //converting date according to user time zone

                java.sql.Timestamp tStamp=result.getTimestamp("DATE");

                if(tStamp!=null && !tStamp.toString().equals("")&&!tStamp.toString().equals("null"))
                {
                    year=Integer.parseInt(tStamp.toString().substring(0,4));

                    if(year>0)
                    {
                        try
                        {
                            ///////////// Modified By Ravindra Verma on 3/16/2007 for bug 23215 START

                            ////////////////////////P_CM_B_21975	ON	12/20/2006	START

                            tZConvertedDateTime	= TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,userTimezone,DateTime.getDateTime(result.getTimestamp("DATE"),TimeZoneUtils.DB_DATETIME),TimeZoneUtils.DB_DATETIME,TimeZoneUtils.DB_DATETIME);
                            java.sql.Timestamp tStampObj=DateTime.getTimestamp(tZConvertedDateTime,TimeZoneUtils.DB_DATETIME);
                            tStamp=tStampObj;
                            String dateFetched = tStamp.toString().substring(0,11);
                            String timeFetched = tStamp.toString().substring(11,18);
                            StringBuffer dateFormat = new StringBuffer(dateFetched);


                            if( dateFormat!=null && dateFormat.length() > 0 )
                            {
                                //String dYear=dateFormat.substring(0,dateFormat.indexOf("-"));
                                //String dDate=dateFormat.substring((dateFormat.indexOf("-")+1),dateFormat.length()-1);
                                dateFormat = new StringBuffer(DateUtil.formatDate(dateFormat.toString().trim()));
                            }

                            String sTime = timeFetched.substring(0,2);
                            String sMinute = timeFetched.substring(3,5);

                            if (sTime != null)
                                sTime = sTime.trim();

                            if (sMinute != null)
                                sMinute = sMinute.trim();

                            int scheduledTimeInt = Integer.parseInt(sTime);
                            int scheduledMinuteInt = Integer.parseInt(sMinute);
                            int apmInt = 0;

                            if(scheduledTimeInt > 12)
                            {
                                scheduledTimeInt=scheduledTimeInt-12;
                                apmInt=1;
                            }

                            if(scheduledTimeInt == 12)
                            {
                                apmInt=1;
                            }

                            StringBuffer displayTime = new StringBuffer();

                            if(scheduledTimeInt < 10)
                            {
                                displayTime.append("0");
                                displayTime.append(scheduledTimeInt);
                            }else
                                displayTime.append(scheduledTimeInt);

                            displayTime.append(":");

                            if(scheduledMinuteInt < 10)
                            {
                                displayTime.append("0");
                                displayTime.append(scheduledMinuteInt);
                            }else
                                displayTime.append(scheduledMinuteInt);

                            displayTime.append(" ");

                            if(apmInt == 0)
                            {
                                displayTime.append("AM");
                            }else
                                displayTime.append("PM");


                            info.set(FieldNames.DATE, dateFormat.toString().replaceAll("-","/")+" "+displayTime.toString());


                        }catch(Exception e)
                        {
                            logger.error("exception while converting into time zone",e);
                        }
                    }
                }


                java.sql.Timestamp rStamp=result.getTimestamp("REMINDER_TIME");


                if(rStamp!=null && !rStamp.toString().equals("")&&!rStamp.toString().equals("null"))
                {
                    year=Integer.parseInt(rStamp.toString().substring(0,4));

                    if(year>0)
                    {
                        try
                        {
                            tZConvertedDateTime	= TimeZoneUtils.performUTCConversion(
                                    _baseConstants.DB_TIMEZONE_TIMEZONEUTILS,
                                    userTimezone,
                                    DateTime.getDateTime(result.getTimestamp("REMINDER_TIME"),
                                            TimeZoneUtils.DB_DATETIME),
                                    TimeZoneUtils.DB_DATETIME,
                                    TimeZoneUtils.DB_DATETIME );
                            java.sql.Timestamp tStampObj1=DateTime.getTimestamp(tZConvertedDateTime,TimeZoneUtils.DB_DATETIME);
                            rStamp=tStampObj1;
                            String dateFetched = rStamp.toString().substring(0,11);
                            String timeFetched = rStamp.toString().substring(11,18);

                            StringBuffer dateFormat = new StringBuffer(dateFetched);

                            if( dateFormat!=null && dateFormat.length() > 0 )
                            {
                                //String dYear=dateFormat.substring(0,dateFormat.indexOf("-"));
                                //String dDate=dateFormat.substring((dateFormat.indexOf("-")+1),dateFormat.length()-1);
                                dateFormat = new StringBuffer(DateUtil.formatDate(dateFormat.toString().trim()));
                            }

                            String sTime = timeFetched.substring(0,2);
                            String sMinute = timeFetched.substring(3,5);

                            if (sTime != null)
                                sTime = sTime.trim();

                            if (sMinute != null)
                                sMinute = sMinute.trim();

                            int scheduledTimeInt = Integer.parseInt(sTime);
                            int scheduledMinuteInt = Integer.parseInt(sMinute);
                            int apmInt = 0;

                            if(scheduledTimeInt > 12)
                            {
                                scheduledTimeInt=scheduledTimeInt-12;
                                apmInt=1;
                            }

                            if(scheduledTimeInt == 12)
                            {
                                apmInt=1;
                            }

                            StringBuffer displayTime = new StringBuffer();

                            if(scheduledTimeInt < 10)
                            {
                                displayTime.append("0");
                                displayTime.append(scheduledTimeInt);
                            }else
                                displayTime.append(scheduledTimeInt);

                            displayTime.append(":");

                            if(scheduledMinuteInt < 10)
                            {
                                displayTime.append("0");
                                displayTime.append(scheduledMinuteInt);
                            }else
                                displayTime.append(scheduledMinuteInt);

                            displayTime.append(" ");

                            if(apmInt == 0)
                            {
                                displayTime.append("AM");
                            }else
                                displayTime.append("PM");

                            info.set(FieldNames.REMINDER_TIME, dateFormat.toString().replaceAll("-","/")+" "+displayTime.toString());


                        }catch(Exception e)
                        {
                            logger.error("exception while converting into time zone",e);
                        }
                    }
                }
            }
        }catch(Exception e){
            logger.error("Exception in getting record for getParticipants : " +e);
        }
        finally
        {
            QueryUtil.releaseResultSet(result);
        }
        return info;
    }


    public static Info getTaskDetails(String taskID,String userNo){
        return getTaskDetails(taskID, userNo, null);
    }
    public static Info getTaskDetails(String taskID,String userNo, String InputTimeZone){

        BaseConstants _baseConstants=	MultiTenancyUtil.getTenantConstants();
        Info info = null;
        String userTimezone = null;
        // SCHEDULER_TASK_B_0111071001
        //String query			= "SELECT  T.DURATION,SUM(TD.TOTAL_AMOUNT_PAID) TOTAL_DEPOSIT,T.TASK_ID,T.MODULE_ID,T.FOREIGN_ID,T.ASSIGN_BY,T.ASSIGN_TO,T.SUBJECT,T.PRIORITY,T.DATE,T.STATUS,T.SCHEDULE_TIME,T.IS_SOLD,T.IS_APPOINTMENT,T.REMINDER,T.REMINDER_TIME,T.TRANSACTION_ID,T.COMMENTS,T.CREATION_DATE,T.CREATOR_USER_ID,CTM.SCHEDULE_ID,T.TRANSACTION_NO,T.TRANSACTION_TYPE,T.TASK_TYPE,T.INVOICE_ID,T.INVOICE_NO,TT.PAYMENT_STATUS FROM SERVICE314_TASKS T LEFT JOIN CAL_TASKS_MAPPING CTM ON T.TASK_ID=CTM.TASK_ID LEFT JOIN TMS_TRANSACTION TT ON T.TASK_ID=TT.TASK_ID LEFT JOIN TMS_DEPOSIT TD ON T.TASK_ID=TD.AGAINST_ID AND TD.AGAINST_TYPE='T' WHERE T.TASK_ID="+taskID+" GROUP BY T.TASK_ID";
        String query = "SELECT  T.TIME_SPENT, T.DURATION,SUM(TD.TOTAL_AMOUNT_PAID) TOTAL_DEPOSIT,T.TASK_ID,T.SUB_TASK_TYPE_ID,T.TASK_NUMBER,T.MODULE_ID,T.FOREIGN_ID,T.ASSIGN_BY,T.ASSIGN_TO,T.ASSIGN_TO_OTHERS,T.SUBJECT,T.PRIORITY,T.DATE,T.STATUS,T.SCHEDULE_TIME,T.IS_SOLD,T.IS_APPOINTMENT,T.REMINDER,T.REMINDER_TIME,T.TRANSACTION_ID,T.COMMENTS,T.CREATION_DATE,T.CREATOR_USER_ID,CTM.SCHEDULE_ID,T.TRANSACTION_NO,T.TRANSACTION_TYPE,T.TASK_TYPE,T.INVOICE_ID,T.INVOICE_NO,TT.PAYMENT_STATUS,CS.RECURRENCE_FLAG, CS.RECURRENCE_PATTERN, CS.RECURRENCE_DAYOFWEEK, CS.RECURRENCE_DAYOFMONTH, CS.RECURRENCE_MONTHOFYEAR, CS.RECURRENCE_INTERVAL, CS.RECURRENCE_INSTANCE, CS.RECURRENCE_END_DATETIME, CS.OCCURRENCE FROM SERVICE314_TASKS T LEFT JOIN CAL_TASKS_MAPPING CTM ON T.TASK_ID=CTM.TASK_ID LEFT JOIN "+_baseConstants.CM_TMS+"TMS_TRANSACTION TT ON T.TASK_ID=TT.TASK_ID LEFT JOIN TMS_DEPOSIT TD ON T.TASK_ID=TD.AGAINST_ID AND TD.AGAINST_TYPE='T' LEFT JOIN CAL_SCHEDULES CS ON CTM.SCHEDULE_ID=CS.SCHEDULE_ID WHERE T.TASK_ID="+taskID+" GROUP BY T.TASK_ID";

        String tZConvertedDateTime=null;
        //getting user time zone
        if(StringUtil.isValidNew(InputTimeZone)){
            userTimezone = InputTimeZone;
        }else{
            userTimezone = UserTimezoneMap.newInstance().getTimezone(userNo);
        }


        int year=0;
        String params[]	=	{};

//		String moduleName												=	"";
//		String moduleTableName										=	"";
//		String moduleTablePrimaryKey							=	"";
//		String moduleFirstNameValue								=	"";
//		String moduleLastNameValue								=	"";
        String value                                            =   "";
        String valueOfInvId = "";
        String valueOfInvNo = "";
        String valueOfPayStatus = "";
        int taskNo=0;
        String showTaskNo="";
        ResultSet result = null;
        try{
            //executing query
            result = QueryUtil.getResult(query, params);
            logger.info(">>>>  result inside DAo is 12121 "+result);
            //logger.info(">>>>  result inside DAo is 12121 "+result.next());
            logger.info(">>>>  query inside DAo is 12121 "+query);
            if(result!=null && result.next()){
                logger.info(">>>>  121221 13222222 info inside loop DAo is 12121 "+info);
                info = new Info();

                info.set(FieldNames.TASK_ID,result.getString("TASK_ID"));
                String amtDeposit = result.getString("TOTAL_DEPOSIT");
                logger.info(">>>>  info inside loop DAo is 12121 "+info);
                if(amtDeposit==null || amtDeposit.equals("null") || amtDeposit.trim().equals(""))
                    amtDeposit="0.00";

                info.set("TOTAL_DEPOSIT",NumberFormatUtils.formatCommaNumber(amtDeposit));
                info.set(FieldNames.DURATION,result.getString("DURATION"));
                info.set("TIME_SPENT", result.getString("TIME_SPENT"));
                info.set(FieldNames.SCHEDULE_ID,result.getString("SCHEDULE_ID"));
                info.set(FieldNames.MODULE_ID,result.getString("MODULE_ID"));
                info.set(FieldNames.FOREIGN_ID,result.getString("FOREIGN_ID"));
                value=result.getString("TRANSACTION_ID");
                if(value==null || value.equals("null") || value.trim().equals("0"))
                    value="NA";
                info.set(FieldNames.TRANSACTION_ID,value);
                info.set(FieldNames.TRANSACTION_NUMBER,result.getString("TRANSACTION_NO"));
                info.set(FieldNames.TRANSACTION_TYPE,result.getString("TRANSACTION_TYPE"));

                // SCHEDULER_TASK_B_0111071001
                valueOfInvId = result.getString("INVOICE_ID");
                if(valueOfInvId==null || valueOfInvId.equals("null") || valueOfInvId.trim().equals("0"))
                    valueOfInvId="";
                info.set(FieldNames.INVOICE_ID,valueOfInvId);

                valueOfInvNo = result.getString("INVOICE_NO");
                if(valueOfInvNo==null || valueOfInvNo.equals("null") || valueOfInvNo.trim().equals("0"))
                    valueOfInvNo="";
                info.set(FieldNames.INVOICE_NO,valueOfInvNo);

                valueOfPayStatus = result.getString("PAYMENT_STATUS");
                if(valueOfPayStatus==null || valueOfPayStatus.equals("null") || valueOfPayStatus.trim().equals("0"))
                    valueOfPayStatus="";
                info.set(FieldNames.PAYMENT_STATUS,valueOfPayStatus);

                // added by arun singhal on 4/4/2007 EW_TASKS_E_1

                info.set(FieldNames.IS_SOLD,result.getString("IS_SOLD"));
                //info.set(FieldNames.AMOUNT,NumberFormatUtils.formatNumber(result.getString("AMOUNT")));
                info.set(FieldNames.IS_APPOINTMENT,result.getString("IS_APPOINTMENT"));
                // end here

                //String moduleID=result.getString("MODULE_ID");
                //String foreignID=result.getString("FOREIGN_ID");

                taskNo=0;
                showTaskNo="";
                taskNo=Integer.parseInt(result.getString("TASK_NUMBER"))+_baseConstants.TASK_START_NO;
                showTaskNo=_baseConstants.TASK_PREFIX+taskNo;
                info.set(FieldNames.TASK_NUMBER,showTaskNo);

				/*-----------End of section Added by Kapil -----*/


                info.set(FieldNames.SUBJECT,result.getString("SUBJECT"));
                info.set(FieldNames.REMINDER,result.getString("REMINDER"));
                info.set(FieldNames.SCHEDULE_TIME,result.getInString("SCHEDULE_TIME"));
                info.set(FieldNames.PRIORITY,result.getString("PRIORITY"));
                info.set(FieldNames.ASSIGN_TO,result.getString("ASSIGN_TO"));
                info.set(FieldNames.ASSIGN_TO_OTHERS,result.getString("ASSIGN_TO_OTHERS"));
                info.set(FieldNames.ASSIGN_BY,result.getString("ASSIGN_BY"));
                info.set(FieldNames.STATUS,result.getString("STATUS"));
                info.set(FieldNames.COMMENTS,result.getString("COMMENTS"));
                info.set(FieldNames.TASK_TYPE,result.getString("TASK_TYPE"));
                info.set(FieldNames.SUB_TASK_TYPE_ID,result.getString("SUB_TASK_TYPE_ID"));
                //converting date into user timezone
                java.sql.Timestamp tStamp=result.getTimestamp("DATE");

                if(StringUtil.isValidNew(result.getString("ASSIGN_TO"))){
                    userTimezone=UserTimezoneMap.newInstance().getTimezone(result.getString("ASSIGN_TO"));
                }else if(StringUtil.isValidNew(InputTimeZone)){
                    userTimezone = InputTimeZone;
                }



                //                userTimezone=UserTimezoneMap.newInstance().getTimezone(result.getString("ASSIGN_TO"));


                if(tStamp!=null && !tStamp.toString().equals("")&&!tStamp.toString().equals("null")){
                    year=Integer.parseInt(tStamp.toString().substring(0,4));
                    if(year>0){
                        try{
                            tZConvertedDateTime				= TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,userTimezone,
                                    DateTime.getDateTime(result.getTimestamp("DATE"),TimeZoneUtils.DB_DATETIME),
                                    TimeZoneUtils.DB_DATETIME,
                                    TimeZoneUtils.DB_DATETIME );

                            java.sql.Timestamp tStampObj=DateTime.getTimestamp(tZConvertedDateTime,TimeZoneUtils.DB_DATETIME);
                            info.set(FieldNames.START_DATE,tStampObj);
                            info.set(FieldNames.DATE,tStampObj);

                            info.set("taskTime",tStampObj.toString().substring(11,18));

                        }catch(Exception e){
                            logger.error("exception while converting into time zone",e);
                        }
                    }
                }

                //formatting reminder date
                java.sql.Timestamp rStamp=result.getTimestamp("REMINDER_TIME");
                if(rStamp!=null && !rStamp.toString().equals("")&&!rStamp.toString().equals("null")){
                    year=Integer.parseInt(rStamp.toString().substring(0,4));

                    if(year>0){
                        try{
                            tZConvertedDateTime				= TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,userTimezone,
                                    DateTime.getDateTime(result.getTimestamp("REMINDER_TIME"),TimeZoneUtils.DB_DATETIME),
                                    TimeZoneUtils.DB_DATETIME,
                                    TimeZoneUtils.DB_DATETIME );

                            java.sql.Timestamp tStampObj=DateTime.getTimestamp(tZConvertedDateTime,TimeZoneUtils.DB_DATETIME);
                            info.set("REMINDER_DATE",tStampObj);
                            info.set("REMINDER_TIME1",tStampObj.toString().substring(11,18));

                            info.set(FieldNames.REMINDER_TIME,tStampObj);

                        }catch(Exception e){
                            logger.error("exception while converting into time zone",e);
                        }
                    }

                }

                info.set(FieldNames.RECURRENCE_FLAG,result.getString("RECURRENCE_FLAG"));
                info.set(FieldNames.RECURRENCE_PATTERN,result.getString("RECURRENCE_PATTERN"));
                info.set(FieldNames.RECURRENCE_DAYOFWEEK,result.getString("RECURRENCE_DAYOFWEEK"));
                info.set(FieldNames.RECURRENCE_DAYOFMONTH,result.getString("RECURRENCE_DAYOFMONTH"));
                info.set(FieldNames.RECURRENCE_MONTHOFYEAR,result.getString("RECURRENCE_MONTHOFYEAR"));
                info.set(FieldNames.RECURRENCE_INTERVAL,result.getString("RECURRENCE_INTERVAL"));
                info.set(FieldNames.RECURRENCE_INSTANCE,result.getString("RECURRENCE_INSTANCE"));
                // info.set(FieldNames.RECURRENCE_END_DATETIME, result.getString("RECURRENCE_END_DATETIME"));
                // B_CM_54699 Added by Nipun starts
                //SC_CM_B_8940 : starts
                String tzconvertedDateTime="";
                if(result.getTimestamp("RECURRENCE_END_DATETIME")!=null)
                    tzconvertedDateTime= TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS,userTimezone,
                            DateTime.getDateTime(result.getTimestamp("RECURRENCE_END_DATETIME"),TimeZoneUtils.DB_DATETIME),
                            TimeZoneUtils.DB_DATETIME,
                            TimeZoneUtils.DB_DATETIME );
                info.set(FieldNames.RECURRENCE_END_DATETIME,tzconvertedDateTime.length()>10?tzconvertedDateTime.substring(0,10):tzconvertedDateTime);
                //SC_CM_B_8940 : ends
                // B_CM_54699 Added by Nipun ends


                info.set(FieldNames.OCCURRENCE,result.getString("OCCURRENCE"));

            }
        }catch(Exception e){
            logger.error("Exception in getting record for getParticipants : " +e);
            e.printStackTrace();
        }finally
        {
            QueryUtil.releaseResultSet(result);
        }
        logger.info(">>>>>  info inside DAO is >>>>> "+info);
        return info;
    }
    
    public static void setGoogleSyncKeysValues(String clientID,String clientSecret,String redirectUrl,String emailID,String password){
    	String query=null;
    	
    	try{
    		//P_B_SUPP_46228 : starts
    		query = "DELETE FROM GOOGLE_SYNC_KEYS ";
    		QueryUtil.update(query,null);
    		//query="INSERT INTO GOOGLE_SYNC_KEYS (GOOGLE_SYNC_CLIENT_ID,GOOGLE_SYNC_CLIENT_SECRET,GOOGLE_SYNC_REDIRECT_URL,GOOGLE_EMAIL_ID,GOOGLE_PASSWORD) VALUES (?,?,?,?,?)";
    		query="INSERT INTO GOOGLE_SYNC_KEYS (GOOGLE_SYNC_CLIENT_ID,GOOGLE_SYNC_CLIENT_SECRET,GOOGLE_SYNC_REDIRECT_URL,GOOGLE_EMAIL_ID,GOOGLE_PASSWORD) VALUES (?,?,?,?,AES_ENCRYPT(?,'pvm@e20'))";     //BB-20150525-360
    		QueryUtil.executeInsert(query, new String[]{clientID,clientSecret,redirectUrl,emailID,password});
			
    	}catch(Exception e){
   			logger.error("ERROR: exception in setGoogleSyncKeysValues ::",e);
   	     }
    }
    public  static Map<String,String> getGoogleSyncKeysValues(){
    	Map<String,String> dataMap=NewPortalUtils.getNewLinkedHashMapWithKeyValueType();
    	String query = "" ;
    	com.home.builderforms.sqlqueries.ResultSet rs = QueryUtil.getResult(query,null);
    	try{
    		//query="SELECT * FROM GOOGLE_SYNC_KEYS";
    		query="SELECT GOOGLE_SYNC_CLIENT_ID,GOOGLE_SYNC_CLIENT_SECRET,GOOGLE_SYNC_REDIRECT_URL,GOOGLE_EMAIL_ID,AES_DECRYPT(GOOGLE_PASSWORD,'pvm@e20') AS GOOGLE_PASSWORD FROM GOOGLE_SYNC_KEYS";       //BB-20150525-360
    		rs = QueryUtil.getResult(query,null);
    		if(rs.next()){
    			dataMap.put("clientId", rs.getString("GOOGLE_SYNC_CLIENT_ID"));
    			dataMap.put("clientSecret", rs.getString("GOOGLE_SYNC_CLIENT_SECRET"));
    			dataMap.put("redirectUrl", rs.getString("GOOGLE_SYNC_REDIRECT_URL"));
    			dataMap.put("emailID", rs.getString("GOOGLE_EMAIL_ID"));
    			dataMap.put("password", rs.getString("GOOGLE_PASSWORD"));
    		}
    	}catch(Exception e){
    		logger.error("Exception in getGoogleSyncKeysValues() Method :::" +e.getMessage());
    	}finally{
    		query=null;
    		if(rs!=null)
    			rs=null;
    	}
    	return dataMap;
    }
    

    //P_ENH_DELETE_FRANCHISEE_LOCATION starts
    public static void createInsertQuery(String tableName,String whereCondition,List<String> deleteQueryList,StringBuilder insertQuery) throws SQLException{
    	
    	String query= "SELECT * FROM "+tableName;
    	
    	if(StringUtil.isValid(whereCondition)){
    		
    		query+= " "+whereCondition;
    	}
    	ResultSet rs = QueryUtil.getResult(query, new String []{});
    	
    	if(rs!=null){
    		
    	ResultSetMetaData rsmd = rs.getMetaData();	
    	StringBuilder colBuffer= null;
    	StringBuilder valueBuffer= null;
    	boolean resultExist= false;
    	String value="";
    	while(rs.next())
    	{
    		resultExist=true;
    		colBuffer = new StringBuilder();
    		valueBuffer = new StringBuilder();
    		for(int i=1;i<=rsmd.getColumnCount();i++)
    		{
    			
    			
    			colBuffer.append(rsmd.getColumnName(i)).append(",");
    			value=rs.getString(rsmd.getColumnName(i));
    		if(StringUtil.isValid(value) && ("timestamp".equalsIgnoreCase(rsmd.getColumnTypeName(i)) || "datetime".equalsIgnoreCase(rsmd.getColumnTypeName(i)))){
    				value= DateUtil.formatDate(rs.getTimestamp(i),DateUtil.DB_DATETIME_FORMAT);
			}
		
			else if(StringUtil.isValid(value) && "date".equalsIgnoreCase(rsmd.getColumnTypeName(i))){
				value=DateUtil.formatDate(value, DateUtil.DB_FORMAT);
			}
    			
    			
    			valueBuffer.append("'").append(value!=null?value.replaceAll("\'", "\\\\'"):"NULL").append("'").append(",");
    		}
    		insertQuery.append("INSERT INTO ").append(tableName).append(" (").append(colBuffer.substring(0, colBuffer.length()-1)).append(") VALUES (").append(valueBuffer.substring(0, valueBuffer.length()-1)).append(");").append("@@@3@@@");
    	}
    	
    	query = "DELETE FROM "+tableName;
    	
    	if(StringUtil.isValid(whereCondition)){
    		
    		query+= " "+whereCondition;
    	}
    	
    	if(resultExist && deleteQueryList!=null)
    	{
    		deleteQueryList.add(query);
    	}
    	
    	
    	}
    	
    }
    
    //Methods moved from SalesReportDao.java to here as same has to be used when Location is deleted
    /**
     * Returns map of associated payment,royalty info with sales report id
     * P_E_FIN_DELETE_REPORT
     * @param salesReportID
     * @return
     */
    public static Map<String,String> getReportAndRoyaltyId(String salesReportID) {
    	StringBuffer query=new StringBuffer("SELECT FRANCHISE_ROYALTY_ID FROM FIN_SALES_REPORT ");
    	query.append("WHERE SALES_REPORT_ID IN(").append(salesReportID).append(")");
    	ResultSet result=null;
    	Map<String,String> reportMap=NewPortalUtils.getNewHashMapWithKeyValueType();
    	StringBuffer reportIds=new StringBuffer();
    	try{
    		result=QueryUtil.getResult(query.toString(), null);
    		while(result.next()){
    			reportIds.append(result.getString("FRANCHISE_ROYALTY_ID")).append(",");
    		}
    		reportIds=StringUtil.removeLastComma(reportIds);
    		if(reportIds!= null && StringUtil.isValid(reportIds.toString())){
    			query=new StringBuffer("SELECT GROUP_CONCAT(FRANCHISE_ROYALTY_ID) AS ROYALTY_ID  FROM FIN_FRANCHISE_ROYALTY ");
    			query.append(" WHERE FRANCHISE_ROYALTY_ID IN(").append(reportIds).append(") ");
    			query.append(" OR PARENT_ID IN(").append(reportIds).append(") ");
    			result=QueryUtil.getResult(query.toString(), null);
    			reportMap.put(FieldNames.FRANCHISE_ROYALTY_ID,FieldNames.EMPTY_STRING);
    			if(result.next()){
    				reportMap.put(FieldNames.FRANCHISE_ROYALTY_ID, result.getString("ROYALTY_ID"));
    			}
    			query=new StringBuffer("SELECT GROUP_CONCAT(SALES_REPORT_ID) AS REPORT_ID FROM FIN_SALES_REPORT ");
    			query.append(" WHERE FRANCHISE_ROYALTY_ID  IN(").append(reportMap.get(FieldNames.FRANCHISE_ROYALTY_ID)).append(") ");
    			result=QueryUtil.getResult(query.toString(), null);
    			reportMap.put(FieldNames.SALES_REPORT_ID,FieldNames.EMPTY_STRING);
    			if(result.next()){
    				reportMap.put(FieldNames.SALES_REPORT_ID, result.getString("REPORT_ID"));
    			}
    			reportMap.put(FieldNames.PAYMENT_ID, FieldNames.EMPTY_STRING);
    			query=new StringBuffer("SELECT GROUP_CONCAT(PAYMENT_ID) AS PAYMENT_ID FROM FIN_PAYMENT_MAPPING");
    			query.append(" WHERE FRANCHISE_ROYALTY_ID  IN(").append(reportMap.get(FieldNames.FRANCHISE_ROYALTY_ID)).append(") ");
    			result=QueryUtil.getResult(query.toString(), null);
    			if(result!=null && result.next()){
    				reportMap.put(FieldNames.PAYMENT_ID,result.getString("PAYMENT_ID"));
    			}
    		}
    	} catch(Exception e) {
    		logger.error("Exception in deleteSalesRecords", e);
    	} finally {
    		query=null;
    		reportIds=null;
    		QueryUtil.releaseResultSet(result);
    	}
    	return reportMap;
    }
    /**
     * Delete all records related to sales report
     * P_E_FIN_DELETE_REPORT
     * @param salesReportID
     * @param royaltyId
     * @param paymentId
     */
    public static void deleteSalesRecords(String salesReportID,String royaltyId,String paymentId) {
    	List<String> query=new ArrayList<String>();
    	try{
    		if(StringUtil.isValid(royaltyId)){
    			query.add("DELETE FROM FIN_FRANCHISE_ROYALTY WHERE FRANCHISE_ROYALTY_ID IN ("+royaltyId+")");
    			query.add("DELETE FROM FIN_PAYMENT_MAPPING WHERE FRANCHISE_ROYALTY_ID IN ("+royaltyId+")");
    		}
    		if(StringUtil.isValid(salesReportID)){
    			query.add("DELETE FROM FIN_SALES_REPORT WHERE SALES_REPORT_ID IN ("+salesReportID+")");
    			query.add("DELETE FROM FIN_SALES_REPORT_DETAILS WHERE SALES_REPORT_ID IN ("+salesReportID+")");
    			query.add("DELETE FROM FIN_PL_REPORT WHERE PLREP_ID IN ("+salesReportID+")");
    			query.add("DELETE FROM FIN_PL_REPORT_EXPENSE WHERE PLREP_ID IN ("+salesReportID+")");
    			query.add("DELETE FROM FIN_PL_REPORT_OVERHEAD WHERE PLREP_ID IN ("+salesReportID+")");
    			query.add("DELETE FROM FIN_PL_REPORT_INCOME WHERE PLREP_ID IN ("+salesReportID+")");
    			query.add("DELETE FROM FIN_ADDL_FEES_DETAILS WHERE SALES_REPORT_ID IN ("+salesReportID+")");
    		}
    		if(StringUtil.isValid(paymentId)){
    			query.add("DELETE FROM FIN_PAYMENT WHERE PAYMENT_ID IN ("+paymentId+")");

    		}
    		if(query!=null && !query.isEmpty()){
    			QueryUtil.batchUpdate(query, null);
    		}
    	} catch(Exception e) {
    		logger.error("Exception in deleteSalesRecords", e);
    	} finally {
    		if(query!=null){
    			query.clear();
    		}
    		query=null;
    	}
    }
    //P_ENH_DELETE_FRANCHISEE_LOCATION ends
    public static boolean isSSOValidUser(String userNo)
    {
    	boolean isSSOUser=false;
    	
    		String query = "SELECT TOKEN_VALUE FROM SSO_TOKENS_VALUE WHERE USER_NO="+userNo+" AND TOKEN_ID=123455";
    		ResultSet result = QueryUtil.getResult(query, null);
    		if(result!=null && result.next())
        	{
    			isSSOUser=true;
        	}
        return isSSOUser;
    }
    /**
     * @see used to turn on Zcubator payment (ZCUB-20150408-130)
     * @param request
     * @param userLevel
     * @param userNo
     * @author Shashank Gupta
     * @date May 28,2015
     */
 public static void IntializeCgpaymentforZcubator(HttpServletRequest request,String userLevel,String userNo)
 {	
	 Map<String,Object> paramMap = new HashMap<String,Object>();
	 HttpSession session = request.getSession();
		//ZCUB-20140912-084 starts
		boolean cgflag=false;
		String csvFranchisee=(String)session.getAttribute("franchiseeNoMucsv");
		Map<String,Map<String,String>> franchiseeDetailMap = NewPortalUtils.setFranchiseeDetailMap(csvFranchisee);
		session.setAttribute("franchiseeDetailMap",franchiseeDetailMap);
		String unpayedFranchisee[]=(NewPortalUtils.getUnpayedFranchisee(csvFranchisee)).split(",");
		boolean isUserMUID = "yes".equals((String)session.getAttribute("select_all"));
		String isTrial =(String)session.getAttribute(FieldNames.IS_TRIAL); 
		 boolean fromSync= "true".equals(request.getParameter("otherSideLogin"));

		if(isUserMUID)
		{
			if(!StringUtil.isValidArray(unpayedFranchisee))
			{
				cgflag=true;
			}
			else if(StringUtil.isValid(unpayedFranchisee[0]) && !"true".equals(session.getAttribute("fromWSSync")))
			{
				String payedFranchisee[]=getpayedFranchisee(csvFranchisee).split(",");
				String tempFran= (String)session.getAttribute("franchisee_no");
				if(MultiTenancyUtil.getTenantConstants().WS_MODULES_SYNC &&fromSync){
					if(!"true".equals(isTrial) && "All".equals((String)session.getAttribute("otherSideAll")) && "cgPaymentHome".equals(request.getParameter("otherSideAction")))
					{
						tempFran=unpayedFranchisee[0];
						session.setAttribute("franchisee_no",tempFran);
						session.setAttribute("franchisee_all",tempFran);
						try{
							session.setAttribute("franUserName", AdminMgr.newInstance().getStoreDAO().getFranchiseeName(tempFran));     
						}catch(Exception e){
							System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>"+e);
						}
					}
		
				}else if(StringUtil.isValidArray(payedFranchisee)){
					tempFran=payedFranchisee[0];
				}
				if(!fromSync && !"All".equals((String)session.getAttribute("franchisee_all")))
				{
					session.setAttribute("franchisee_no",tempFran);
					session.setAttribute("franchisee_all",tempFran);
					try{
						session.setAttribute("franUserName", AdminMgr.newInstance().getStoreDAO().getFranchiseeName(tempFran));     
					}catch(Exception e){
						System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>"+e);
					}
				}
			}else if("true".equals(session.getAttribute("fromWSSync"))){
				
			}
		}
		String isActive = NewPortalUtils.getCGSignUpStatus(request);
		String id ="";
		String column = "";
		if("1".equals(userLevel))
		{
			id =  (String)session.getAttribute("franchisee_no");
		  	column="FRANCHISEE_NO";
		}
	  	else
	  	{
			id =  (String)session.getAttribute("areaId");
		  	column="AREA_ID";
	  	}
		String paymentError = SQLUtil.getColumnValue("ZCUBATOR_CG_CHECK_CUST","SUBSCRIPTION_STATUS",new String[]{"FRANCHISEE_NO","USER_LEVEL"},new String[]{id,userLevel});
		
		if(StringUtil.isValid(paymentError))
		{
			ProductBroker.getinstance().invoke("com.appnetix.app.portal.marketingcenter.CGPaymentUtil","updateCustomer",new Object[]{request});
		}
		//ZCUB-20140912-084 ends
		
		if(!StringUtil.isValid(isActive))
		{
			String locationID=NewPortalUtils.getColumnFromTable("ZCUBATOR_CG_LOCATION_MAPPING","LOCATION_ID",column,id);
			String isFree=NewPortalUtils.getColumnFromTable("ZCUBATOR_CG_LOCATION_MAPPING","IS_FREE",column,id);
			
			if(StringUtil.isValid(locationID) && !"Y".equals(isFree))
			{
				isActive=NewPortalUtils.getColumnFromTable("ZCUBATOR_CG_LOCATIONS","CURRENT_SUBSCRIPTION_FLAG","LOCATION_ID",locationID);
			}
			else if(StringUtil.isValid(locationID) && "Y".equals(isFree))
			{
				isActive="1";
			}
		}
		// ZCB-20141006-042  
		if("true".equals(isTrial))
		{
	  	  String endDate=NewPortalUtils.getColumnFromTable("MASTER_DATA_FOR_CG","DATA_VALUE","DATA_TYPE","9");
   	  if(StringUtil.isValid(endDate))
   	  {	
   		String remainingDay=NewPortalUtils.getRemainingDay(endDate);
   		if("false".equals(remainingDay))
   		{ 
   			isTrial="false";
   			SQLUtil.updateTableValue("MASTER_DATA_FOR_CG", "DATA_VALUE","", "DATA_TYPE", "9");
				SQLUtil.updateTableValue("MASTER_DATA_FOR_CG", "DATA_VALUE","false", "DATA_TYPE", "2");
   		}
   		
   		else
   		{
   			session.setAttribute("remainingDays",remainingDay);
   		}
   			
   	  }
		}
		String isFranchiseeEnable=NewPortalUtils.getColumnFromTable("FRANCHISEE","IS_CG_ENABLED","FRANCHISEE_NO",id);
		String isPremium = ((StringUtil.isValid(isActive) && ("1".equals(isActive) || "2".equals(isActive))) || "true".equals(isTrial))?"true":"false";
		String nonTrialPremium = ((StringUtil.isValid(isActive) && ("1".equals(isActive) || "2".equals(isActive))) || "N".equals(isFranchiseeEnable))?"true":"false";
		
		MultiTenancyUtil.getTenantConstants().setIsPremium(isPremium);
		MultiTenancyUtil.getTenantConstants().setIsTrial(isTrial);
		MultiTenancyUtil.getTenantConstants().setIsPremiumNonTrial(nonTrialPremium);
		session.setAttribute(FieldNames.NON_TRIAL_PREMIUM,nonTrialPremium);
		session.setAttribute(FieldNames.IS_TRIAL,isTrial);
		session.setAttribute(FieldNames.IS_PREMINUM,isPremium);
		session.setAttribute("CG_FRANCHISEE_STATUS",isFranchiseeEnable);
		paramMap.put(FieldNames.NON_TRIAL_PREMIUM,nonTrialPremium);
		paramMap.put(FieldNames.IS_TRIAL,isTrial);
		paramMap.put(FieldNames.IS_PREMINUM,isPremium);
		paramMap.put("userLevel",userLevel);
		

	session.setAttribute("cgflag", cgflag+"");
	session.setAttribute("fromlogin","true");
	boolean fromViewAll="All".equals((String)session.getAttribute("franchisee_all")); 
	 paramMap.put("fromViewAll", fromViewAll+"");
	if(fromViewAll){
		paramMap.put("allPrivileges",franchiseeDetailMap.get("allPrivileges").get("prm"));
	}
	if(!cgflag){
		session.setAttribute("isFromMulti","true");
	}
	String defaultPrmPlanID=SQLUtil.getColumnValue("MASTER_DATA_FOR_CG", "DATA_VALUE", "DATA_TYPE", "987654");
	if(!StringUtil.isValid(defaultPrmPlanID))
	{
		defaultPrmPlanID=MultiTenancyUtil.getTenantConstants().ZCB_ROLE_ID;
	}
	paramMap.put("isFranchiseeEnable",isFranchiseeEnable);

	session.setAttribute("defaultPrmPlanID",defaultPrmPlanID);
	setUserRole(request,userNo,cgflag,defaultPrmPlanID,"login",paramMap);

 }
 /**
  * @see used to set userrole map (ZCUB-20150408-130)
  * @param request
  * @param defaultPrmPlanID
  * @param userNo
  * @author Shashank Gupta
  * @date May 28,2015
  */
 public static void setUserRole(HttpServletRequest request,String userNo,boolean cgflag,String defaultPrmPlanID,String from,Map<String,Object> paramMap)
 {
	 HttpSession session = request.getSession();
	 String isTrial =(String)session.getAttribute(FieldNames.IS_TRIAL);
	 boolean isPrm="true".equals((String)session.getAttribute(FieldNames.NON_TRIAL_PREMIUM));
	 UserRoleMap	userRoleMap=null;
	 if(isPrm)
		{ 
		 	String franchiseeNo=(String)session.getAttribute("franchisee_no");
		 	String optedPackageId = SQLUtil.getColumnValue("ZCUBATOR_CG_LOCATIONS", "OPTED_PACKAGE", "FRANCHISEE_NO", franchiseeNo);
			if(!StringUtil.isValid(optedPackageId))
			{
			  		optedPackageId=MultiTenancyUtil.getTenantConstants().ZCB_ROLE_ID;
			}
			if("N".equals(paramMap.get("isFranchiseeEnable"))){
				optedPackageId="259";
			}
			paramMap.put("isPremium","true");
			paramMap.put("fromPremium","false");
			paramMap.put("optedPackageId", optedPackageId);
			
			userRoleMap		= UserRoleMgr.getInstance().getUserRoleMap(userNo, paramMap);	
			session.setAttribute("userRoleMap", userRoleMap);
			
		}
		else
		{	
			paramMap.put("isPremium","false");
			paramMap.put("fromPremium","false");
			userRoleMap		=	UserRoleMgr.getInstance().getUserRoleMap(userNo, paramMap);
			session.setAttribute("basicRoleMap", userRoleMap);
			if("true".equals(isTrial))
			{	
				paramMap.put("isPremium","true");
				paramMap.put("fromPremium","false");
				paramMap.put("isTrial","true");
				userRoleMap		=	UserRoleMgr.getInstance().getUserRoleMap(userNo, paramMap);
			}
				session.setAttribute("userRoleMap", userRoleMap);
			
			paramMap.put("isPremium","false");
			paramMap.put("fromPremium","true");
			 if("false".equals(MultiTenancyUtil.getTenantConstants().PAYMENT_ON_CONTACT) )
			{
				paramMap.put("optedPackageId",defaultPrmPlanID);
			}
			 userRoleMap		=	UserRoleMgr.getInstance().getUserRoleMap(userNo, paramMap);
			 session.setAttribute("actualpremiumUserRoleMap", userRoleMap);
		}
 }
 

 /**
  * ZCUB-20150515-147
  * @author Divanshu Verma
  * @param countryCode
  * @param zipCode
  * @return String
  */
 public static StringBuffer validateZipCode(String countryCode,String zipCode)
 {	 
	StringBuffer result=new StringBuffer("0");
	String query="SELECT ZIP FROM REGIONS R JOIN ZIP_CODES ZC ON ZC.STATE=R.REGION_ABBREV AND COUNTRY_ID=? AND  ZIP=? GROUP BY REGION_ABBREV";
	ResultSet rs=QueryUtil.getResult(query,new String[]{countryCode,zipCode}); 
	if(rs!=null && rs.next())
	{
		if(StringUtil.isValid(rs.getString("ZIP")))
			result=new StringBuffer("1");
	}
 return result;
 }
 //ZCUB-20150515-147 ends
 
 /**
  * BB-20150525-360
  * @param dbTableName
  * @param dbField
  * @param fieldName1
  * @return lMap
  */
 public static LinkedHashMap<String, String> piiEnabledFieldMap(String dbTableName,String[] dbField, String[] fieldName1)
 {
	 String tableAnchor = TableAnchors.getVal(dbTableName);
	 boolean isPiiEnabled = false;
	 String queryField = "";
	 String dbFieldName = "";
	 String tableAliasName = "";
	 String customarray[]=fieldName1[0].split(",");
	 String customFieldNameArray[]=fieldName1[1].split(",");
	 String fieldName = "";
	 LinkedHashMap<String, String> lMap = new LinkedHashMap<String, String>(); 
	 Field fld = null;
	try {
		FieldMappings mapping = DBUtil.getInstance().getFieldMappings(tableAnchor);
		if(mapping != null)
		{
		for (int i = 0; i < dbField.length; i++) 
		{
			tableAliasName = dbField[i].substring(0, dbField[i].indexOf('.'));
			dbFieldName = dbField[i].substring(dbField[i].indexOf('.') + 1, dbField[i].length());
			for(int j=0;j<customarray.length;j++)
			{
				if(customarray[j].equals(dbFieldName))
				{
					fieldName=customFieldNameArray[j];
					if(StringUtil.isValidNew(fieldName))
					{
						fld = mapping.getField(fieldName);
						if(fld!=null)
						{
							if(fld.isPiiEnabled()) 
							{
								if(StringUtil.isValidNew(tableAliasName))
								{
									queryField = "AES_DECRYPT(" + tableAliasName + "." + dbFieldName + ",'pvm@e20') AS " + dbFieldName;
								}else
								{
									queryField = "AES_DECRYPT(" + dbFieldName + ",'pvm@e20') AS " + dbFieldName;
								}
								lMap.put(dbField[i], queryField);
							} else 
							{
								lMap.put(dbField[i], dbField[i]);
							}
						}else
						{
							lMap.put(dbField[i], dbField[i]);
						}
					}
					else{
						lMap.put(dbField[i], dbField[i]);
					}
				}
			}
		}
		}else
		{
			for (int i = 0; i < dbField.length; i++) 
			{
				lMap.put(dbField[i], dbField[i]);
			}
		}
	 }catch(Exception e)
	 {
		 e.printStackTrace();
		 logger.error("Exception in piiEnabledFieldMap() Method :::" +e.getMessage());
	 }
	 return lMap;
 }

    //bhawna
    public static String[] getStartEndDateTime(Info currentInfo, String ownerID) {
        if(currentInfo!=null && StringUtil.isValid(currentInfo.getString(FieldNames.DATE)))
        {
    	int year = 0;
        int durhr = 1;
        int durMin = 0;
        String endDateTime = "";
        String startDateTime = currentInfo.getString(FieldNames.DATE);
        java.sql.Timestamp tStamp1 = currentInfo.getTimestamp(FieldNames.DATE);
        java.sql.Timestamp tStampWTZC1 = currentInfo.getTimestamp(FieldNames.DATE);
        String tZConvertedDateTime = null;
        BaseConstants _baseConstants = MultiTenancyUtil.getTenantConstants();
            String userTimeZoneAssignedTo=null;
            userTimeZoneAssignedTo = (String)CacheMgr.getUserCache().getUser(ownerID).get(FieldNames.TIMEZONE);
        if (tStamp1 != null && !tStamp1.toString().equals("") && !tStamp1.toString().equals("null")) {
            year = Integer.parseInt(tStamp1.toString().substring(0, 4));
            if (year > 0) {
                try {
                    java.sql.Timestamp tStampObj = null;
                    if ("Y".equals(currentInfo.getString("TIMELESS_TASK"))) {
                        tStampObj = tStampWTZC1;
                    } else {
                        tZConvertedDateTime = TimeZoneUtils.performUTCConversion(_baseConstants.DB_TIMEZONE_TIMEZONEUTILS, userTimeZoneAssignedTo, DateTime.getDateTime(currentInfo.getTimestamp(FieldNames.DATE), TimeZoneUtils.DB_DATETIME), TimeZoneUtils.DB_DATETIME, TimeZoneUtils.DB_DATETIME, ownerID);
                    	tStampObj = DateTime.getTimestamp(tZConvertedDateTime, TimeZoneUtils.DB_DATETIME);
                    }
                    startDateTime = tStampObj.toString();
                    int index0 = startDateTime.lastIndexOf(".");
                    startDateTime = startDateTime.substring(0, index0);

                } catch (Exception e1) {
                    logger.error("exception while converting into time zone", e1);
                }
            }
        }

        durhr = Integer.parseInt(currentInfo.get(FieldNames.DURATION).substring(0, 2));
        durMin = Integer.parseInt(currentInfo.get(FieldNames.DURATION).substring(3, 5));
        endDateTime = DateTime.addHourMinuteAndReturnDate(startDateTime, durhr, durMin, "yyyy-MM-dd HH:mm:ss");
        endDateTime = DateTime.getSqlTimestamp(endDateTime).toString();
        int index3 = endDateTime.lastIndexOf(".");
        endDateTime = endDateTime.substring(0, index3);

        return new String[]{startDateTime, endDateTime};
        }
        return new String[]{"", ""};
    }

    public static String getAssignToName(String primaryID, String moduleID) {
    	return getAssignToName(primaryID,moduleID,null);
    }
    
    public static String getAssignToName(String primaryID, String moduleID, String taskForeignType) {
        String query = null;
        if ("2".equals(moduleID)) {
            query = "SELECT CONCAT(FIRST_NAME, ' ' , LAST_NAME) AS NAME, LEAD_ID AS LEAD_ID FROM FS_LEAD_DETAILS WHERE LEAD_ID IN(" + primaryID + ")";
        } else if ("5".equals(moduleID)) {
            query = "SELECT CONCAT(FIRST_NAME, ' ' , LAST_NAME) AS NAME, BROKER_ID AS LEAD_ID  FROM BROKER_DETAILS WHERE BROKER_ID IN(" + primaryID + ")";
        } else if ("3".equals(moduleID) || "12".equals(moduleID)) {
            query = "SELECT FRANCHISEE_NAME AS NAME, FRANCHISEE_NO AS LEAD_ID  FROM FRANCHISEE WHERE FRANCHISEE_NO IN(" + primaryID + ")";
        } else if ("6".equals(moduleID)) {
            query = "SELECT AREA_NAME AS NAME, AREA_ID AS LEAD_ID  FROM AREAS WHERE AREA_ID IN(" + primaryID + ")";
        } else if ("10".equals(moduleID)) {
            query = "SELECT CONCAT(OWNER_FIRST_NAME, ' ' , OWNER_LAST_NAME) AS NAME, FRANCHISE_OWNER_ID AS LEAD_ID  FROM FIM_OWNERS WHERE FRANCHISE_OWNER_ID IN(" + primaryID + ")";
        } else if ("11".equals(moduleID)) {
            query = "SELECT FIM_TT_ENTITY_NAME AS NAME, FIM_ENTITY_ID AS LEAD_ID  FROM FIM_ENTITY_DETAIL WHERE FIM_ENTITY_ID IN(" + primaryID + ")";
        } else if("4".equals(moduleID)){
        	if(StringUtil.isValid(taskForeignType)){
        		if("opportunityTask".equals(taskForeignType)){

        			query = "SELECT OPPORTUNITY_NAME AS NAME FROM CM_OPPORTUNITY_INFO WHERE OPPORTUNITY_ID IN("+ primaryID +")";
        		}else if("leadTask".equals(taskForeignType)){
        			
        			query = "SELECT CONCAT(LEAD_FIRST_NAME, ' ' , LEAD_LAST_NAME) AS NAME FROM CM_LEAD_DETAILS WHERE LEAD_ID IN("+ primaryID +")";
        		}else{
        			
        			query = "SELECT CONCAT(CONTACT_FIRST_NAME, ' ' , CONTACT_LAST_NAME) AS NAME FROM CM_CONTACT_DETAILS WHERE CONTACT_ID IN("+ primaryID +")";
        		}
        		
        	}else{
            query = "SELECT CONCAT(CONTACT_FIRST_NAME, ' ' , CONTACT_LAST_NAME) AS NAME FROM CM_CONTACT_DETAILS WHERE CONTACT_ID IN("+ primaryID +")";
        	}
        }
        ResultSet result = QueryUtil.getResult(query, null);
        String name = FieldNames.EMPTY_STRING;
        while (result.next()) {
            name = result.getString("NAME");
        }
        return name;
    }


    public static String getProspectHeading(Info mainInfo){
        String sName = FieldNames.EMPTY_STRING;
        if ("5".equals(mainInfo.getString(FieldNames.MODULE_ID))) {
            sName = Constants.CONTACT_TYPEWOS;
        } else if ("3".equals(mainInfo.getString(FieldNames.MODULE_ID))) {
            sName = Constants.FRANCHISE_LABEL;
        } else if ("6".equals(mainInfo.getString(FieldNames.MODULE_ID))) {
            sName = Constants.LBL_AREA_FRANCHISE_ID;
        } else if ("10".equals(mainInfo.getString(FieldNames.MODULE_ID))) {
            sName = Constants.MU_LABEL;
        } else if ("11".equals(mainInfo.getString(FieldNames.MODULE_ID))) {
            sName = Constants.ENTITY;
        } else if ("4".equals(mainInfo.getString(FieldNames.MODULE_ID))) {
            sName = Constants.CONTACT;
        } else {
            sName = Constants.LBL_LEAD;
        }
        return sName;
    }
    //bhawna
 public static boolean isFirstLogin(String userNo,String franNo ){
	boolean result=false;
		String query="SELECT (select max(LOGIN_DATE)  from LOGIN_DETAILS  where USER_ID='"+userNo+"' )< (select min(PAYMENT_DATE) from ZCUBATOR_CG_LOCATIONS  where FRANCHISEE_NO='"+franNo+"') AS Result";
		ResultSet rs=QueryUtil.getResult(query,new String[]{}); 
		if(rs!=null && rs.next())
		{
			if(StringUtil.isValid(rs.getString("Result")) && "1".equals(rs.getString("Result")))
				result=true;
		}
	 return result;
 }


 /**
     * Returns message to be displayed on user deactivation / deletion.
     * @param userCountMap
     * @param operation
     * @return
     */
    public static String getDeactivateMboDeleteMessage(Map<String,String> userCountMap,String operation,String fromWhere){
        StringBuilder message=new StringBuilder("");
        if(userCountMap!=null && !userCountMap.isEmpty()){
            if(userCountMap.containsKey("mboCount") && !"0".equals(userCountMap.get("mboCount"))) {
                if ("location".equals(fromWhere)) {
                    message.append(LanguageUtil.getString("This Location is associated with"));
                } else {
                    message.append(LanguageUtil.getString("It is associated with"));
                }
                if (userCountMap.containsKey("mboCount") && !"0".equals(userCountMap.get("mboCount"))) {
                    message.append(" ").append(LanguageUtil.getString("Studio Id")).append(" '"+userCountMap.get("mboStudioId")+"'. ");
                }

                if ("location".equals(fromWhere)) {
                    message.append(LanguageUtil.getString("The mapping with this studio id will be removed after deactivation."));
                } else {
                    message.append(LanguageUtil.getString("The mapping with this studio id will be removed "));
                    if ("delete".equalsIgnoreCase(operation)) {
                        message.append(LanguageUtil.getString("after Deletion."));
                    } else {
                        message.append(LanguageUtil.getString("after Deactivation."));
                    }
                }
            }
        }

        return message.toString();
    }
    public  static String getpayedFranchisee(String franchiseeNo){
   		Map<String,Map<String,String>> franchiseeDetailmap= (Map<String,Map<String,String>>)StrutsUtil.getHttpSession().getAttribute("franchiseeDetailMap");
   		String []franArray=franchiseeNo.split(",");
   		String getpayedFranchisee="";
   		boolean flag=false;
   		for(int i=0;i<franArray.length;i++)
   		{
   			Map<String,String> franDetailList=franchiseeDetailmap.get(franArray[i]);
   			if("true".equals(franDetailList.get("isPaid")))
   			{
   			   	if(flag){getpayedFranchisee+=",";}
   			 getpayedFranchisee+=franArray[i];
   	   			flag=true;
   	   		}
   		}
   	 return getpayedFranchisee;
   	}
    
    public static String getJSValidationMethod(Field fld,String jsValidateMethod)
    {
 	   String sNewVal ="";

 	   Class clsArr[] 			= 	new Class[] {Field.class};
 	   Object valArr[] 			= 	new Object[] {fld};

 	   try{
 		   Method method = DataManipulator.getInstance().getClass().getDeclaredMethod(jsValidateMethod, clsArr);
 		   sNewVal = (String) method.invoke(null, valArr);
 		   sNewVal = StringUtil.isValid(sNewVal)?sNewVal:"";
 	   }
 	   catch(Exception e)
 	   {
 		   e.getStackTrace();
 	   }
 	   return sNewVal;
    }
  //ZCUB-20150915-176 starts
    
    public static void updateLastContactedField(String contactID,String code)
    {
    	 updateLastContactedField(contactID,code, null);
    }
    public static void updateLastContactedField(String contactID,String code, String rcvdDate)
    {
    	try{
    	String lastContactedEnabled=SQLUtil.getColumnValue("CM_LAST_CONTACTED_FIELD_CONFIGURATION","IS_ENABLED","CODE",code);
    	try{
    		//CRM_WORKFLOW 
			String firstActivity=SQLUtil.getColumnValue("CM_CONTACT_DETAILS","LAST_CONTACTED","CONTACT_ID",contactID);
			if(!StringUtil.isValidNew(firstActivity))
			{
				Class cls			= Class.forName("com.appnetix.app.portal.cm.crmworkflow.CRMWorkFlowThread");
				Constructor cons 	= cls.getConstructor(String.class,boolean.class ,String.class,String.class,String.class);
				Object obj			= cons.newInstance(contactID,false,"","4","event");
				Method method		= cls.getDeclaredMethod("startWorkFlowThread", new Class[]{});
				method.invoke(obj);
			}
			//CRM_WORKFLOW EVENT BASED
			
		}catch(Exception e){
        		e.printStackTrace();
    	}
    	if(StringUtil.isValid(lastContactedEnabled) && "Y".equals(lastContactedEnabled))
    	{
    		if(StringUtil.isValid(rcvdDate)){
    			
    			try {
    	        		QueryUtil.update("UPDATE CM_CONTACT_DETAILS SET LAST_CONTACTED='"+rcvdDate+"' WHERE  CONTACT_ID="+contactID+"  AND (LAST_CONTACTED IS NULL OR LAST_CONTACTED='' OR LAST_CONTACTED < '"+rcvdDate+"')",Constants.EMPTY_STRING_ARRAY);
    	        
    			}catch(Exception e)
    	    	{
    	    		logger.error("exception while updating last contacted Field", e);    		
    	    	}
    		}else{
    		
    			SQLUtil.updateColumnWithCurrentDBTime("CM_CONTACT_DETAILS", "LAST_CONTACTED","CONTACT_ID="+contactID);
    		}
    	}
    	}
    	catch(Exception e)
    	{
    		logger.error("exception while updating last contacted Field", e);    		
    	}
    }
    //ZCUB-20150915-176 ends
    
    /**
     * This function will provide the list containing Latitude and Longitude for the address using Google Map API.
     * The List will contains 2 object:<br>
     * 1 -> Latitude<br>
     * 2 -> Longitude<br>
     * P_Enh_Site_Clearance
     * @param address
     */
    public static List<String> getLatitudeLongitude(String address) {
    	List<String> latLngList =  null;
    	GetMethod getMethod = null;
    	//added for FranCR | Rest1-20160713-006 Udai Agarwal
    	String convertedAddress = StringEscapeUtils.unescapeHtml(address);
    	address = StringUtil.replaceSpecialChars(convertedAddress, new Character[]{'#'});
    	try  {
    		StringBuilder urlBuilder = new StringBuilder("http://maps.googleapis.com/maps/api/geocode/json?address="+URIUtil.encodeQuery(address)+"&sensor=false");
    		
    	    HttpClient httpClient = new HttpClient(new MultiThreadedHttpConnectionManager());
    	    getMethod = new GetMethod(urlBuilder.toString());
            httpClient.executeMethod(getMethod);
    		InputStreamReader isr = new InputStreamReader(getMethod.getResponseBodyAsStream(), getMethod.getResponseCharSet());
    		StringBuffer sbLocation = new StringBuffer();

    		for (int i=0; i != -1; i = isr.read()) {   
    			sbLocation.append((char)i);
    		}

    		String getContent = sbLocation.toString().trim();   
    		if(getContent.contains("results")) {
    			String temp = getContent.substring(getContent.indexOf("["));
    			String lng = "";
    			String lat = "";
    			JSONArray JSONArrayForAll = new JSONArray(temp);
    			if(JSONArrayForAll.length()>0){
    				latLngList =  new ArrayList<String>();
    				lng = JSONArrayForAll.getJSONObject(0).getJSONObject("geometry").getJSONObject("location").get("lng").toString();
    				lat = JSONArrayForAll.getJSONObject(0).getJSONObject("geometry").getJSONObject("location").get("lat").toString();
    				latLngList.add(lat);
    				latLngList.add(lng);
    			}
    		}
    	} catch (Exception e) {
    		e.printStackTrace();
    	} finally {
    		if(getMethod != null) {
    			getMethod.releaseConnection();
    		}
    	}
    	return latLngList;
    }
    
    /**
     * @author Akash Kumar
     * @param moduleName
     * @return group Ids of archived as well as private groups of other users.
     */
    public static String getArchivedGroupIds(String moduleName){
    	String groupIds=null;
    	String query="SELECT GROUP_CONCAT(FIM_GROUPS_ARCHIVED.GROUP_ID) AS GROUP_IDS FROM FIM_GROUPS_ARCHIVED ";
    	String tableName="FIM_GROUPS";
    	if("fs".equals(moduleName)){
    		tableName="FS_GROUPS";
    		query="SELECT GROUP_CONCAT(FS_GROUPS_ARCHIVED.GROUP_ID) AS GROUP_IDS FROM FS_GROUPS_ARCHIVED ";
    	}
		ResultSet rs=QueryUtil.getResult(query,new String[]{}); 
		if(rs!=null && rs.next())
		{
			if(StringUtil.isValidNew(rs.getString("GROUP_IDS"))){
			   groupIds=rs.getString("GROUP_IDS");
			}
		}
		HttpSession session = StrutsUtil.getHttpSession();
		String ownerId = (String)session.getAttribute("user_no");
    	StringBuffer queryString = new StringBuffer(" SELECT GROUP_CONCAT(GROUP_ID) AS GROUP_IDS FROM ").append(tableName);
       	queryString.append(" WHERE GROUP_TYPE=1 ");
		queryString.append(" AND ").append("GROUP_OWNER <> "+ownerId);
		queryString.append(" GROUP BY GROUP_ID ");
		
		rs=null;
		rs=QueryUtil.getResult(queryString.toString(),new String[]{});
		if(rs!=null && rs.next())
		{
			if(StringUtil.isValidNew(rs.getString("GROUP_IDS"))){
			if(StringUtil.isValidNew(groupIds)){
			groupIds+=","+rs.getString("GROUP_IDS");
			}else{
			groupIds=rs.getString("GROUP_IDS");
			}
			}
		}
		return groupIds;
    }
    
    /**
	 * 
	 * @return Map of Custome Aggregation Report Summary Column
	 * @CR ZCUB-20151124-202
	 */
    public static SequenceMap getConfiguredCustomeColumn(String tableName){
    	
    	SequenceMap dataMap=null;
    	Info info=null;
    	String query="SELECT DISPLAY_ID, FIELD_NAME, TABLE_NAME, TABLE_ANCHOR FROM SUMMARY_DISPLAY_FOR_CUSTOME_REPORT WHERE SELECT_COLUMN_NAME=? AND IS_SELECTED<>0 AND FIELD_NAME IS NOT NULL";
    	ResultSet rs=null;
    	HashSet tableSet=new HashSet();
    	try{
    		
    		rs = QueryUtil.getResult(query, new String[]{tableName});
    		dataMap=new SequenceMap();
    		while (rs.next()) {
    			
    			info = new Info();
    			info.set("FIELD_NAME", rs.getString("FIELD_NAME"));
    			info.set("TABLE_NAME", rs.getString("TABLE_NAME"));
    			info.set("TABLE_ANCHOR", rs.getString("TABLE_ANCHOR"));
    			dataMap.put(rs.getString("DISPLAY_ID"),info);
    			tableSet.add(rs.getString("TABLE_ANCHOR"));
    		}
    		
    		dataMap.put("tableSet",tableSet);
    	}catch(Exception e){
    		logger.error("Exception while getting  data getConfiguredCustomEColumn:", e);
    	}
    	
    	return dataMap;
    }
    
	/**
	 * 
	 * @return Info of from and to address for mailing purpose while exception occur
	 * @CR ZCB-20150818-116
	 */
	public static Info getExceptionMailAddress(String module) {	
		Info exceptionMailAddress=new Info();
		ResultSet rs=null;
		try {
			if("am".equalsIgnoreCase(module) || "supplies".equalsIgnoreCase(module)){
				StringBuffer query = new StringBuffer("SELECT * FROM "+module.toUpperCase()+"_PAYPAL_DETAILS");
				rs = QueryUtil.getResult(query.toString(), null);
				while (rs.next()) {
					exceptionMailAddress.set("ToAddress",rs.getString("EMAIL_TO"));
					exceptionMailAddress.set("FromAddress",rs.getString("EMAIL_FROM"));				
					return exceptionMailAddress; 
				}// end while
			}
		} catch (Exception e) {
			logger.error("Exception while getting  data:", e);
		}
		finally
		{
			QueryUtil.releaseResultSet(rs);
		}
		return exceptionMailAddress;
	}

    /*
     * To check version of FIM in Mobile Site.
     * return String 
     */
    public static String isFimNewVersionImplemented(){
        String newFimVersion = NewPortalUtils.getColumnFromTable("MASTER_DATA", "DATA_VALUE", "DATA_TYPE", "2015");
        return StringUtil.isValid(newFimVersion) ? newFimVersion : "on";
    }
   /**
     * To get Google Tag manager Id for Analytics
     * 
     * @return 
     */
    public static String getGoogleTagId(){
        return NewPortalUtils.getColumnFromTable("MASTER_DATA", "DATA_VALUE", "DATA_TYPE", "2119");
    }
    /**
     * 
     * @param userNo
     * @return 
     */
    public static String getMobileThemeName(String userNo) {
        String themeName = "theme-default";
        try {

            StringBuilder query = new StringBuilder("SELECT AT.THEME_NAME FROM MOBILE_SITE_THEMES AT JOIN MOBILE_USERS_THEME UT ON UT.THEME_ID=AT.THEME_ID WHERE UT.USER_NO= " + userNo);
            com.home.builderforms.sqlqueries.ResultSet result = QueryUtil.getResult(query.toString(), new String[]{});
            if (result.next()) {
                themeName = result.getString("THEME_NAME");
            }else{
                themeName = SQLUtil.getColumnValue("MOBILE_SITE_THEMES","THEME_NAME","IS_DEFAULT","Y");
            }

        } catch (Exception e) {
            e.printStackTrace();
            themeName = "theme-default";
        }
        return themeName;
    }
    
     /**
      * Return Map of User theme from Database, default theme Otherwise.
     * 
     * @param userNo
     * @return 
     */
    public static Map<String, String> getMobileThemeMap(String userNo) {
        Map<String, String> themeMap = new HashMap<>();
        try {

            StringBuilder query = new StringBuilder("SELECT AT.THEME_NAME, AT.HTML_CODE, AT.DISPLAY_NAME FROM MOBILE_SITE_THEMES AT JOIN MOBILE_USERS_THEME UT ON UT.THEME_ID=AT.THEME_ID WHERE UT.USER_NO= " + userNo);
            StringBuilder queryDefault = new StringBuilder("SELECT AT.THEME_NAME, AT.HTML_CODE, AT.DISPLAY_NAME FROM MOBILE_SITE_THEMES AT WHERE AT.IS_DEFAULT='Y'");
            com.home.builderforms.sqlqueries.ResultSet result = QueryUtil.getResult(query.toString(), new String[]{});
            if (result.next()) {
                themeMap.put(FieldNames.THEME_NAME, result.getString("THEME_NAME"));
                themeMap.put(FieldNames.HTML_CODE, result.getString("HTML_CODE"));
                themeMap.put(FieldNames.DISPLAY_NAME, result.getString("DISPLAY_NAME"));
                
            }else{
                result = null;
                result = QueryUtil.getResult(queryDefault.toString(), new String[]{});
                themeMap.put(FieldNames.THEME_NAME, result.getString("THEME_NAME"));
                themeMap.put(FieldNames.HTML_CODE, result.getString("HTML_CODE"));
                themeMap.put(FieldNames.DISPLAY_NAME, result.getString("DISPLAY_NAME"));
                
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return themeMap;
    }

    /**
     * 
     * @return 
     */
    public static List<Map<String, String>> getMobileThemeList(String isDefault){
        List<Map<String, String>> themeList = new ArrayList<>();
        Map<String, String> theme = null;
        try{
            StringBuilder query = new StringBuilder("SELECT THEME_NAME, HTML_CODE, DISPLAY_NAME, IS_DEFAULT, THEME_ID FROM MOBILE_SITE_THEMES ");
            if(StringUtil.isValid(isDefault)){
                query.append(" WHERE IS_DEFAULT = '").append(isDefault).append("' ");
            }
            query.append(" ORDER BY THEME_ID ");
            com.home.builderforms.sqlqueries.ResultSet result = QueryUtil.getResult(query.toString(), new String[]{});
            
            while (result.next()) {
                theme = new HashMap<>();
                theme.put(FieldNames.THEME_NAME, result.getString("THEME_NAME"));
                theme.put(FieldNames.HTML_CODE, result.getString("HTML_CODE"));
                theme.put(FieldNames.DISPLAY_NAME, result.getString("DISPLAY_NAME"));
                theme.put(FieldNames.IS_DEFAULT, result.getString("IS_DEFAULT"));
                theme.put(FieldNames.THEME_ID, result.getString("THEME_ID"));
                themeList.add(theme);
            }
            
        }catch(Exception exception){
            exception.printStackTrace();
        }
        return themeList;
    }
    
    /**
     * 
     * @param userNo
     * @param themeId 
     */
    public static void updateUserTheme(String userNo, String themeId){
         try{
            StringBuilder deleteQuery = new StringBuilder("DELETE FROM MOBILE_USERS_THEME WHERE USER_NO=?");
            StringBuilder insertQuery = new StringBuilder("INSERT INTO MOBILE_USERS_THEME(USER_NO, THEME_ID) VALUES(?, ?)");
            if(StringUtil.isValid(themeId) && StringUtil.isValid(themeId)){
                int update = QueryUtil.update(deleteQuery.toString(), new String[]{userNo});
                update = QueryUtil.update(insertQuery.toString(), new String[]{userNo, themeId});
            }
            
        }catch(Exception exception){
            exception.printStackTrace();
        }
        
    }
    /**
     * This method returns map of all documents for Tasks/Remarks/Call
     * P_Enh_ContactHistory_FormBuilder
     * @author Akash Kumar
     * @param documentID
     * @return map of all documents
     */
    public static HashMap<String,String> getDocumentDetails(String documentID)
    {

        HashMap<String,String> hm = new HashMap<String,String>();
        ResultSet result = null;
        StringBuffer sQuery = new StringBuffer("SELECT  DOCUMENT_TITLE,DOCUMENT_ATTACHMENT FROM CONTACT_HISTORY_DOCUMENTS WHERE DOCUMENT_ID=?");
        try
        {
            result = QueryUtil.getResult(sQuery.toString(), new Object[] { documentID });

            while (result != null && result.next())
            {
                hm.put(FieldNames.DOCUMENT_TITLE, result.getString("DOCUMENT_TITLE"));
                hm.put(FieldNames.DOCUMENT_ATTACHMENT, result.getString("DOCUMENT_ATTACHMENT"));

            }
        } catch (Exception e)
        {
            logger.info("::Inside Commonutil::Exception in executing getDocumentDetails()::" + e);
        } finally
        {
            if (result != null)
            {
                result = null;
            }
        }

        return hm;
    }
    /**
     * @author divanshu
     * @return HashMap
     * @param Float,Float,String,String
     * This method provide us calculated tax on the amount provided as per standard tax set by admin user according to state.
     * //ZCUB-20151124-201 starts
     */
    public static HashMap<String,Float> getTaxDeductedAmounts(float itemPrice,float shippingAmount,String regionId,String countryId)
    {
    	HashMap<String,Float> resultMap=new HashMap<String,Float>();
    	//ZCUB-20151104-192 Commented starts
    	//itemPrice=Float.parseFloat(NumberFormatUtils.formatCommaNumber(String.valueOf(itemPrice)));
    	//shippingAmount=Float.parseFloat(NumberFormatUtils.formatCommaNumber(String.valueOf(shippingAmount)));
    	//ZCUB-20151104-192 Commented Ends
    	try{
    		String jsonIs=SQLUtil.getColumnValue("STATE_TAX_CONFIGURATION","TAX_VALUE","COUNTRY_ID",countryId,"yes");
    		JSONObject statesJson=new JSONObject();
    		if(StringUtil.isValid(jsonIs))
    			statesJson=new JSONObject(jsonIs);
    		float tax=0.00f;
    		String isShippingApplicable="N";
    		String isSalesApplicable="N";

    		if(statesJson.has(regionId))
    		{
    			JSONObject innerJSON=(JSONObject)statesJson.get(regionId);
    			if(innerJSON.has("tax"))
    				tax=Float.valueOf(NumberFormatUtils.formatNoCommaNumber(innerJSON.get("tax").toString()));
    			if(innerJSON.has("isSalesApplicable"))
    				isSalesApplicable=(String)innerJSON.get("isSalesApplicable");
    			if(innerJSON.has("isShippingApplicable"))
    				isShippingApplicable=(String)innerJSON.get("isShippingApplicable");
    			if("Y".equalsIgnoreCase(isSalesApplicable))
    			{
    				Float salesTaxAmount=itemPrice*(tax/100);
    				resultMap.put("SALES_TAX", tax);
    				resultMap.put("SALES_TAX_AMOUNT",salesTaxAmount);
    			}
    			if("Y".equalsIgnoreCase(isShippingApplicable))
    			{
    				Float shippingTaxAmount=shippingAmount*(tax/100);
    				resultMap.put("SHIPPING_TAX", tax);
    				resultMap.put("SHIPPING_TAX_AMOUNT",shippingTaxAmount);
    			}
    		}
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    		logger.error("Exception in getTaxDeductedAmounts: ", e);
    	}
    	return resultMap;
    }
  //ZCUB-20151124-201 ends
    public static String reverseTransformPhoneNo(String phone){//TLF-20151124-025 STARTS
    	String phoneValue=null;
    	if(StringUtil.isValidNew(phone)){//person-20151214-016
    		phoneValue=phone.replace('(','-').replace(')','-').replaceAll("-","").replaceAll(" ","").replaceAll("&#40;","").replaceAll("&#41;","").replaceAll("\\.", "");
    	}
        return phoneValue;
    }//TLF-20151124-025 ENDS
/**
 * @author Priya kumari
 * 
 * This method return the global pop up notification configuration info
 * @return
 */
    public static Info getNotificationData() {
		String query = null;
		ResultSet result = null;
		Info NotificationInfo = new Info();
		try {
			query = " SELECT IS_CONFIGURE,EXPIRATION_DATE,START_DATE,TITLE,MESSAGE FROM GLOBAL_POPUP_NOTIFICATION";
			result = QueryUtil.getResult(query, null);
			if (result.next()) {
				NotificationInfo.set(FieldNames.IS_CONFIGURE,result.getString("IS_CONFIGURE"));
				NotificationInfo.set(FieldNames.EXPIRATION_DATE,result.getString("EXPIRATION_DATE"));
				NotificationInfo.set(FieldNames.TITLE,result.getString("TITLE"));
				NotificationInfo.set(FieldNames.MESSAGE,result.getString("MESSAGE"));
				NotificationInfo.set(FieldNames.START_DATE,result.getString("START_DATE"));
			}
		} catch (Exception e) {
			logger.info("ERROR: exception in getLeadOwners ::" + e);
		}
		return NotificationInfo;
	}
    
    /**
     * @author priya kumari
     * This method replace keywords for global popup notification.
     * @param message
     * @param userNo
     * @return
     */
    public static String replaceKeywordsGlobalPopup(String message,String userNo){
    	if(userNo !=null && StringUtil.isValidNew(userNo)){
    		HashMap userMap=null;
    		String phone = null;
    		userMap = NewPortalUtils.getUserDetails(userNo);
    		if (userMap.get("phone1") != null) {
                phone = PortalUtils.formatPhoneNo((String)userMap.get("phone1"),(String)userMap.get("COUNTRY"));
            } else {
                phone = FieldNames.EMPTY_STRING;
            }
    		if(userMap != null){
    			message = PortalUtils.replaceAll (message,"$USER_FIRST_NAME$", userMap.get(FieldNames.USER_FIRST_NAME)!=null?(String)userMap.get(FieldNames.USER_FIRST_NAME):FieldNames.EMPTY_STRING);    			
    			message = PortalUtils.replaceAll (message,"$USER_LAST_NAME$", userMap.get(FieldNames.USER_LAST_NAME)!=null?(String)userMap.get(FieldNames.USER_LAST_NAME):FieldNames.EMPTY_STRING); 
    			message = PortalUtils.replaceAll (message,"$USER_EMAIL$", userMap.get(FieldNames.EMAIL_ID)!=null?(String)userMap.get(FieldNames.EMAIL_ID):FieldNames.EMPTY_STRING);
    			message = PortalUtils.replaceAll (message,"$USER_PHONE$", phone);
    		}
    		
    	}
    	return message;
    }
//ZCUB-20151208-210 starts
	public static StringBuffer getPaggingDisplay(int resultsPerPage,int currentPage,int totalRecords)
	{
		StringBuffer paggingHtml=new StringBuffer("");
		StringBuffer hiddenHtml=new StringBuffer("");

		String arr[]=new String[5];
		if(resultsPerPage==20)
			arr[0]="selected";
		else if(resultsPerPage==50)
			arr[1]="selected";
		else if(resultsPerPage==100)
			arr[2]="selected";
		else if(resultsPerPage==200)
			arr[3]="selected";
		else if(resultsPerPage==500)
			arr[4]="selected";
		
		int totalPages = 1;
		if (totalRecords!=0)
			totalPages = (totalRecords)%resultsPerPage==0?(totalRecords/resultsPerPage):((totalRecords/resultsPerPage)+1);
		String currentPageRecords = "";
		if(currentPage==1 && totalRecords<resultsPerPage)
		{
			currentPageRecords = "1 - "+totalRecords;
		}
		else if(currentPage==1 && totalRecords>=resultsPerPage)
		{
			currentPageRecords = "1 - "+resultsPerPage;
		}
		else if(currentPage*20<totalRecords)
		{
			currentPageRecords = ((currentPage-1)*resultsPerPage)+1+" - "+((currentPage)*resultsPerPage);
		}
		else
		{
			currentPageRecords = ((currentPage-1)*resultsPerPage)+1+" - "+totalRecords;
		}

		
		paggingHtml.append("<table><tbody><tr class=\"text\"><td>Items <b>").append(currentPageRecords).append("</b> of ");
		paggingHtml.append(totalRecords).append("</td>");
		if(currentPage>1) {
			paggingHtml.append("<td> | <a href='#' onclick=\"doPaging('first')\">").append(LanguageUtil.getString("First")).append("</a> | <a href=\"#\" onclick=\"doPaging('dec')\">").append(LanguageUtil.getString("Prev")).append("</a></td>");
		}
		else
		{
			paggingHtml.append("<td> | ").append(LanguageUtil.getString("First")).append(" | ").append(LanguageUtil.getString("Prev")).append("</td>");
		}
		if(totalPages>1) {
			for(int i=1;i<=totalPages;i++) {
				if(currentPage==i) {
					paggingHtml.append("<td> | <b>").append(i).append("</b></td>");
				}
				else {
					paggingHtml.append("<td> | <a href=\"#\" onclick=\"doPaging('").append(i).append("')\">").append(i).append("</a></td>");
				}
			}
		}
		if(currentPage!=totalPages) {
			paggingHtml.append("<td> | <a href=\"#\" onclick=\"doPaging('inc')\">").append(LanguageUtil.getString("Next")).append("</a> | <a href=\"#\" onclick=\"doPaging('last')\">").append(LanguageUtil.getString("Last")).append("</a></td>");
		}
		paggingHtml.append("<td>&nbsp;&nbsp;&nbsp; "+LanguageUtil.getString("View Per Page")+" <select name='resultsPerPage' id='resultsPerPage' onChange='setResultsPerPage(this.value)'  class=\"multiList\"><option value='20' ").append(arr[0]).append(">20</option><option value='50' ").append(arr[1]).append(">50</option><option value='100'  ").append(arr[2]).append(">100</option><option value='200'  ").append(arr[3]).append(">200</option><option value='500'  ").append(arr[4]).append(">500</option></select></td>");
		hiddenHtml.append("<td><input type='hidden' name='pageId' value='").append(currentPage).append("' id='pageId' />");
		hiddenHtml.append("<input type='hidden' name='totalRecords' value='").append(totalRecords).append("' id='totalRecords' /></td>");
		if(totalRecords==0)
			hiddenHtml.append("<input type='hidden' name='resultsPerPage' value='").append(resultsPerPage).append("' id='resultsPerPage' />");
		paggingHtml.append(hiddenHtml).append("</tr></tbody></table>");
		
		if(totalRecords==0)
			return hiddenHtml;
		
		return paggingHtml;
	}
	public static String makeMailBoundry(String innerMailContent)
	{
		return makeMailBoundry(innerMailContent,null);
	}
	public static String makeMailBoundry(String innerMailContent,String heading)
	{
		return makeMailBoundry(innerMailContent,heading,false);
	}
	public static String makeMailBoundry(String innerMailContent,String heading,boolean includeFooter)
	{
		StringBuffer message=new StringBuffer("");
    	message.append("<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\"><style>");
    	message.append("#intro {clear: both; border-right: #bbb 1px dashed; padding-right: 12px; border-top: #bbb 1px dashed; padding-left: 12px; background: #FFFFFF; padding-bottom: 0px; margin: 0px 0px 10pt; border-left: #bbb 1px dashed; padding-top:0px; border-bottom: #bbb 1px dashed; position: relative}");
    	message.append("#outro {clear: both; border-right: #bbb 1px dashed; padding-right: 12px; border-top: #bbb 1px dashed; padding-left: 12px; background: #FFFFFF; padding-bottom: 0px; margin: 0px 0px 10pt; border-left: #bbb 1px dashed; padding-top:0px; border-bottom: #bbb 1px dashed; position: relative}");			

    	message.append("#intro a {text-decoration: underline}");
    	message.append("#outro a {text-decoration: underline}");
    	message.append("#intro p {font-size: 10pt; margin: 10px 0px; line-height: 18px; font-family: Tahoma, Arial, Helvetica, sans-serif;text-align: justify}");

    	message.append("#outro p {font-size: 10pt; margin: 10px 0px; line-height: 18px; font-family: Tahoma, Arial, Helvetica, sans-serif;text-align: justify}");
    	message.append(".bold {font-weight: bold}");
    	message.append("div.content p {	margin: 8px 31px 10px; line-height: 21px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif}");       
    	message.append("#printContent .content p {margin: 8px 31px 10px; line-height: 21px; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif } ");       
    	message.append(".quantumBlue {color: #1b468e}");       
    	message.append(".quantumGreenBold {font-weight: bold} ");       
    	message.append("br {height: 3px} ");       
    	message.append(" p a {text-decoration: underline} ");       
    	message.append("ul.introlist a {text-decoration: underline}");       
    	message.append("div.content ol {clear: both; margin: 0px 0px 10px 30px}");
    	message.append("ul.introlist {	clear: both; margin: 0px 0px 10px 30px}");       
    	message.append("div.content ol li {font-size: 10pt; line-height: 18px; font-family: Tahoma, Arial, Helvetica, sans-serif}");       
    	message.append("ul.introlist li {font-size: 10pt; line-height: 18px; font-family: Tahoma, Arial, Helvetica, sans-serif}");
    	message.append("\n.tabs{ width:100%; padding:10pt;}\n.head1{font-size:16px;}\n.shead{FONT-SIZE:12pt;}\n.wb{word-break: break-all;}");
    	message.append("\n@media (max-width:800px){\n.tabs{ width:100%;}\n.head1{font-size:13px;}\n.shead{FONT-SIZE:10pt;}\n}\n@media (max-width:500px){\n.head1{font-size:10px;}\n.shead{FONT-SIZE:8pt;}\n}\n</style>");
    	message.append("<meta content=\"MSHTML 6.00.2800.1106\" name=\"GENERATOR\"></head>");
    	message.append("<body bgcolor=\"#FFFFFF\" text=\"#000000\">");
    	message.append("<div class=\"content\">");

    	message.append("<table width=\"800\" id=\"intro\" style=\"border: 4px solid rgb(197, 216, 229); padding: 10pt;\"><tr><td>");
    	message.append("<table width=\"800\" border=\"0\" cellspacing=\"1\" cellpadding=\"2\" width=\"100%\">");
    	if(StringUtil.isValid(heading))
    		message.append("<tr><td class=\"head1\" style=\"font-family: Tahoma,Arial,helvetica,sans-serif; color:#008da8; padding-bottom:5px; padding-top:12px; border-bottom: 2px solid #008da8\"><strong>"+LanguageUtil.getString(heading)+"</strong></td></tr>\n");
    	message.append("<tr><td class=\"shead\"><p>");
		
    	message.append(innerMailContent);
    	
    	message.append("</td></tr>");
    	if(includeFooter)
    		message.append("<tr><td><p>"+CommonUtil.getFooter()+"</p></td></tr>");
    	message.append("</table></td></tr></table></div></body></html>");
    	
    	return message.toString();
	}
	
	/**
	 * 
	 * @param mailType{1-Subscription,2-Budget Change,3-Invoice Recieved,4-Unsubscription}
	 * @return Info containg mail data
	 */
	
	public static Map<String,String> getMailContent(String mailType,String moduleID)
	{
		StringBuffer query = new StringBuffer("");
		if(StringUtil.isValid(moduleID)){
			 query = new StringBuffer("SELECT CONTENT_ID,MAIL_CC,MODULE_NAME,MAIL_BCC,MAIL_TO,SUBJECT,MAIL_CONTENT FROM CONFIGURE_EMAIL_CONTENT WHERE MAIL_TYPE = "+mailType+" AND MODULE_NAME= "+moduleID);
			
		}else{
		 query = new StringBuffer("SELECT CONTENT_ID,MAIL_CC,MODULE_NAME,MAIL_BCC,MAIL_TO,SUBJECT,MAIL_CONTENT FROM CONFIGURE_EMAIL_CONTENT WHERE MAIL_TYPE = "+mailType);//ZCB_ENH_2004015
		}
		Map<String,String> info = new HashMap<String,String>();
		ResultSet rs = null;
		
		try
		{
			rs = QueryUtil.getResult(query.toString(),null);
			if(rs!=null){
				while (rs.next())
				{
					info.put(FieldNames.CONTENT_ID, rs.getString("CONTENT_ID"));
					info.put(FieldNames.MAIL_TO, NewPortalUtils.isValidateEmail(rs.getString("MAIL_TO")));
					info.put(FieldNames.MAIL_CC, NewPortalUtils.isValidateEmail(rs.getString("MAIL_CC")));
					info.put(FieldNames.MAIL_BCC, NewPortalUtils.isValidateEmail(rs.getString("MAIL_BCC")));
					info.put(FieldNames.SUBJECT, rs.getString("SUBJECT"));
					info.put(FieldNames.MAIL_CONTENT, rs.getString("MAIL_CONTENT"));
					info.put(FieldNames.MODULE_NAME, rs.getString("MODULE_NAME"));
					
				}
			}
		} 
		catch (Exception e)
		{
			logger.info("exception in getMailContent() ", e);
		}
		finally{
			QueryUtil.releaseResultSet(rs);
		}
		return info;
	}
	
//ZCUB-20151208-210 ends
	/**
	 * 
	 * @author Rohit Prajapati
	 * @param countryId
	 * @param currencyKey
	 * @return currencyCode
	 * @purpose This method is added to get currency code for particular country .
	 * CR:ZCUB-20160121-221
	 * 
	 */
	public static String getCurrencyCode(String countryId, String currencyKey){
		
		String query = " SELECT CC.UPS_CURRENCY_CODE, IFNULL(CC.FEDEX_CURRENCY_CODE,CC.UPS_CURRENCY_CODE) AS FEDEX_CURRENCY_CODE FROM COUNTRIES C, CURRENCY_CODES CC WHERE C.CURRENCY_ID=CC.CURRENCY_ID AND C.COUNTRY_ID="+countryId;
		ResultSet rs = null;
		rs = QueryUtil.getResult(query,null);
		String currencyCode="";
		try
		{
			if(rs!=null&&rs.next()){			
				if(StringUtil.isValid(currencyKey) && "FEDEX".equalsIgnoreCase(currencyKey)){
					currencyCode = rs.getString("FEDEX_CURRENCY_CODE");
				}else{
					currencyCode = rs.getString("UPS_CURRENCY_CODE");
				}
			}
			if(currencyCode==null || currencyCode.equals("")){
				currencyCode = "USD";
			}
		}catch (Exception e)
		{
			logger.info("exception in getCurrencyCode() ", e);
		}
		finally{
			QueryUtil.releaseResultSet(rs);
		}
		return currencyCode;		
	}

 public static String getRolesForViewAndWrite(String sTabModuleName,String userLevel,String franchiseeNo,String comboName,String selectedValue){
	 StringBuffer divForUser=new StringBuffer();
		SequenceMap roleMap = new SequenceMap();
		StringBuffer roleDiv = new StringBuffer();
		String[] roleId1=null;
		List<String> roleList = new ArrayList<String>();
		if(StringUtil.isValid(selectedValue)){
			roleId1 = selectedValue.split(",");
			roleList = Arrays.asList(roleId1);
			
		}
		roleDiv.append("<select id='").append(comboName).append("' ").append("name ='").append(comboName).append("' ").append(" size='1' class='form-control' multiple>");
		String roleId = "";
		String roleName = "";
		String roleType = "";
		//Corporate Roles Starts----------------------------------------------------------------------------------------------------
		roleDiv.append("<option disabled >----"+LanguageUtil.getString("Corporate Roles")+"-----</option>");
		Info mapInfo=null;
		//ZC_CM_B_41635 :starts
		if("cm".equals(sTabModuleName)){
			roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("1","581116");
		}else{
			roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("1");
		}
		//ZC_CM_B_41635 :ends
		for(int i=0;i<roleMap.size();i++)
		{
			mapInfo = (Info)roleMap.get(i);
			roleId = mapInfo.get(FieldNames.ROLE_ID);
			roleName = LanguageUtil.getString(mapInfo.get(FieldNames.NAME));
			if("1".equals(roleId)) { //case for corporate administration
				roleDiv.append("<option value='"+roleId);
				roleDiv.append("' selected disabled='disabled'>"+LanguageUtil.getString(roleName));
				roleDiv.append("</option>");	
			} else {
				roleDiv.append("<option value='"+roleId);
				if(roleId1 !=null && roleList.contains(roleId)){
					roleDiv.append("' selected>"+roleName+" "+roleType);
				}else{
					roleDiv.append("'>"+LanguageUtil.getString(roleName));//P_B_FS_36296
				}
				roleDiv.append("</option>");
			}
		}
		mapInfo = null;
		roleMap = null;

		
		//Divisional Roles
		if("Y".equals(MultiTenancyUtil.getTenantConstants().IS_DIVISION_CONFIGURED)){
		roleDiv.append("<option disabled >----"+LanguageUtil.getString("Divisional Roles")+"-----</option>");//P_CM_B_77213
		roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("5");
		for(int i=0;i<roleMap.size();i++) {
			mapInfo = (Info)roleMap.get(i);
			roleId = mapInfo.get(FieldNames.ROLE_ID);
			roleName = LanguageUtil.getString(mapInfo.get(FieldNames.NAME));
			roleDiv.append("<option value='"+roleId);
			if(roleId1 !=null && roleList.contains(roleId)){
				roleDiv.append("' selected>"+roleName+" "+roleType);
			}else{
				roleDiv.append("'>"+roleName);
			}
			roleDiv.append("</option>");
		}
		mapInfo = null;
		roleMap = null;
		}
		
		
		//Regional Roles Starts----------------------------------------------------------------------------------------------------
		roleDiv.append("<option disabled >----"+LanguageUtil.getString("Regional Roles")+"-----</option>");
		//ZC_CM_B_41635 :starts
		if("cm".equals(sTabModuleName)){
			roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("2","381116");
		}else{
			roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("2");
		}
		//ZC_CM_B_41635 :ends
		for(int i=0;i<roleMap.size();i++)
		{
			mapInfo = (Info)roleMap.get(i);
			roleId = mapInfo.get(FieldNames.ROLE_ID);
			roleName = LanguageUtil.getString(mapInfo.get(FieldNames.NAME));
			roleDiv.append("<option value='"+roleId);
				if(roleId1 !=null && roleList.contains(roleId)){
				roleDiv.append("' selected>"+roleName+" "+roleType);
			}else{
				roleDiv.append("'>"+roleName);
			}
			roleDiv.append("</option>");
		}
		mapInfo = null;
		roleMap = null;

		//Franchisee Roles Starts----------------------------------------------------------------------------------------------------
		if("cm".equals(sTabModuleName) || "lead".equals(sTabModuleName) || "account".equals(sTabModuleName) || "opportunity".equals(sTabModuleName)){//P_CM_B_77758
			roleDiv.append("<option disabled >----"+LanguageUtil.getString("Franchise Roles")+"-----</option>");
			//ZC_CM_B_41635 :starts
			if("cm".equals(sTabModuleName)){
				if("1".equals(userLevel) && MultiTenancyUtil.getTenantConstants().ZCUBATOR_FOR_FRANCHISEE){
				   roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("0","481116",franchiseeNo);
				}else{
					roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("0","481116");
				}
			}else{
				roleMap=RoleMgr.newInstance().getRoleDAO().getUserRoles("0");
			}
			//ZC_CM_B_41635 :ends
			for(int i=0;i<roleMap.size();i++)
			{
				mapInfo = (Info)roleMap.get(i);
				roleId = mapInfo.get(FieldNames.ROLE_ID);
				roleName = LanguageUtil.getString(mapInfo.get(FieldNames.NAME));
				roleDiv.append("<option value='"+roleId);
					if(roleId1 !=null && roleList.contains(roleId)){
					roleDiv.append("' selected>"+roleName+" "+roleType);
				}else{
					roleDiv.append("'>"+roleName);
				}
				roleDiv.append("</option>");
			}
			mapInfo = null;
			roleMap = null;
		}
		roleDiv.append("</select>");

	 return roleDiv.toString();
 }

	
     public static String[] getSyncData(){
		
		String[] data=new String[2];
		ResultSet result=null;
        try{
            result=QueryUtil.getResult("SELECT CLIENT_KEY,TAB_URL FROM WS_MASTER_DATA", null);
            if(result.next()){
            	data[0]=result.getString("TAB_URL");
            	data[1]=result.getString("CLIENT_KEY");
            }
        }catch(Exception e){
            logger.error("Exception inside getSyncData",e);
        }
        finally {
            QueryUtil.releaseResultSet(result);
        }
    
        return data;
    }
     //ZCUB-20160210-227 starts
     /**
      * 
      * @author divanshu
      * This method provide HTML of section inside PO email delievered to User /Supplier 
      * @param paramMap,sectionHeader,singleRowContent,columnHeader,includeHeader,labelsMap
      * @return String
      * 
      */
 	public static String getSectionHTMLOfEmailContent(LinkedHashMap paramMap,String sectionHeader,boolean singleRowContent,ArrayList columnHeader,boolean includeHeader,LinkedHashMap lablesMap)
	{
		return getSectionHTMLOfEmailContent(paramMap,sectionHeader,singleRowContent,columnHeader,includeHeader,lablesMap,"MS");
	}
 	public static String getSectionHTMLOfEmailContent(LinkedHashMap paramMap,String sectionHeader,boolean singleRowContent,ArrayList columnHeader,boolean includeHeader,LinkedHashMap lablesMap,String fromWhere)
	{
 		return getSectionHTMLOfEmailContent(paramMap,sectionHeader,singleRowContent,columnHeader,includeHeader,lablesMap,fromWhere,null);

	}
 	public static String getSectionHTMLOfEmailContent(LinkedHashMap paramMap,String sectionHeader,boolean singleRowContent,ArrayList columnHeader,boolean includeHeader,LinkedHashMap lablesMap,String fromWhere,String withoutLabel)
	{
 		 return getSectionHTMLOfEmailContent(paramMap,sectionHeader,singleRowContent,columnHeader,includeHeader,lablesMap,fromWhere,withoutLabel,"Y");
	}
	public static String getSectionHTMLOfEmailContent(LinkedHashMap paramMap,String sectionHeader,boolean singleRowContent,ArrayList columnHeader,boolean includeHeader,LinkedHashMap lablesMap,String fromWhere,String withoutLabel,String removeElements)
	{
		boolean moveForward=true;
		if(!singleRowContent && StringUtil.isValidNew(removeElements) && "Y".equals(removeElements)){
			moveForward=removeUnconfiguredFields(paramMap,sectionHeader,fromWhere,lablesMap,false,null);
			if(!moveForward)
				return "";
		}
		
		StringBuffer message=new StringBuffer("<tr><td>");		
		HashMap innerMap=new HashMap();
		try{
			if(includeHeader)
			{
				message.append("<table border=\"1\" cellspacing=\"1\" cellpadding=\"2\" width=\"100%\" style=\"border-collapse: collapse;FONT-SIZE: 10pt\">");
				message.append("<tr style=\"background-color:#E8F0FA;text-align: center;\"><td width=\"100%\" class=\"shead\" align=\"left\" style=\"border-color:#C5D8E5;font-weight: bold; line-height: 16px; font-family: Tahoma, Arial, Helvetica, sans-serif;font-size:13px\" >"+sectionHeader+"</td></tr>");
				message.append("<tr valign=\"top\" style=\"background-color:#ffffff;\">");
				message.append("<td style=\"border-color:#C5D8E5;line-height: 16px; font-family: Tahoma, Arial, Helvetica, sans-serif;\">");
			}
			message.append("<table cellspacing=\"1\" cellpadding=\"2\" border=\"0\" align=\"left\">");
			message.append("<tr><td width=\"60%\">");
			message.append("<table cellspacing=\"1\" cellpadding=\"2\" border=\"0\" align=\"left\" width=\"100%\">");
			if(singleRowContent){
				message.append("<tr style=\"background-color:#E8F0FA\">");
			}else
			{
				message.append("<tr>");
			}
			Iterator itr=paramMap.keySet().iterator();
			String key="";int i=1;
			int ll=0;
			if(singleRowContent)
			{
				removeUnconfiguredFields(paramMap,sectionHeader,fromWhere,lablesMap,true,columnHeader);
				for(int k=0;k<columnHeader.size();k++)
				{
					message.append("<td class=\"shead\" style=\"border-color:#C5D8E5;font-weight: bold;font-size: 12px; line-height: 16px; font-family: Tahoma, Arial, Helvetica, sans-serif;\" valign=\"top\" align=\"center\" width=\"10%\"><b>"+(String)columnHeader.get(k)+"</b></td>");
				}
				message.append("</tr><tr>");
			}
			while(itr!=null && itr.hasNext())
			{
				key=(String)itr.next();
				if(singleRowContent)
				{
					if(i!=1)
						message.append("<tr>");
					innerMap=(HashMap)paramMap.get(key);
					moveForward=removeUnconfiguredFields(innerMap,sectionHeader,fromWhere,lablesMap,false,null);
					if(!moveForward)
						return "";
					//message.append("<tr>");
					String value="";
					String columnKey="";
					for(ll=0;ll<innerMap.size();ll++)
					{
						columnKey=(String)columnHeader.get(ll);
						if(innerMap.containsKey(columnKey))
						{
							value=innerMap.get(columnKey).toString();
							if(!StringUtil.isValid(value))
							{
								value="";
							}
							message.append("<td class=\"shead\" style=\"border-color:#C5D8E5; line-height: 16px;font-size: 12px; font-family: Tahoma, Arial, Helvetica, sans-serif;\" valign=\"top\" align=\"center\" width=\"10%\">"+value+"</b></td>");
						}
					}
					message.append("</tr><tr>");
				}
				else
				{
					String value=(String)paramMap.get(key);
					if(StringUtil.isValid(withoutLabel) && "Y".equals(withoutLabel))
					{
						//message.append("<td align=\"right\" style=\"width:0%;font-size: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" nowrap=\"nowrap\" >");
					}
					else
					{
						message.append("<td align=\"right\" style=\"width:30%;font-size: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" nowrap=\"nowrap\" ><b>"+key+"</b>:&nbsp;</td>");						
					}

					if(!StringUtil.isValid(value))
					{
						value="";
					}
					message.append("<td align=\"left\" colspan=\"5\" style=\"min-width:150px;font-size: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif; white-space:pre-wrap\" >").append(value).append("</td>");
					if(paramMap.size()==1  && !"N".equals(removeElements)){
						message.append("<td align=\"right\" style=\"width:30%;font-size: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" nowrap=\"nowrap\" >&nbsp;");
						message.append("</td><td align=\"left\" style=\"width:150px;font-size: 12px; LINE-HEIGHT: 16px; FONT-FAMILY: Tahoma, Arial, Helvetica, sans-serif;\" >").append("</td>");						
					}	
					if(i%2==0)
						message.append("</tr><tr>");
				}

				i++;
			}
			if(i==1)
				return "";
			message.append("</tr></table></td></tr></table>");
			if(includeHeader)
				message.append("</td></tr></table>");
			message.append("</td></tr>");
		}
		
    	catch(Exception e)
    	{
    		e.printStackTrace();
    	}
    	System.out.print("mailhtml...,::"+message);

    	return message.toString();
	}
	/**
	 * @author divanshu
	 * This method removes unconfigured fields from ParamMap depending upon the JSON passed as parameter. 
	 * @param paramMap
	 * @param sectionName
	 * @param fromWhere
	 * @param lablesMap
	 * @param singleRowContent
	 * @param columnHeader
	 * @return
	 */
	public static boolean removeUnconfiguredFields(HashMap paramMap,String sectionName,String fromWhere,LinkedHashMap lablesMap,boolean singleRowContent,ArrayList columnHeader)
	{
		boolean moveForward=true;
		String tableName="SUPPLIES_EMAIL_CONTENT_CONFIGURATION";
		if("AB".equals(fromWhere))
			tableName="ADMAKER_EMAIL_CONTENT_CONFIGURATION";

		try{
			Map<String,String> fieldMappings=SQLUtil.getColumnValueMap(tableName,"SECTION_NAME","FIELDS","IS_CONFIGURED ","'Y'");
	    	String sectionConfigured=fieldMappings.get(sectionName);
			if(StringUtil.isValid(sectionConfigured))
			{
	    		JSONObject fieldsJson=new JSONObject(sectionConfigured);
	    		Iterator itr=lablesMap.keySet().iterator();
	    		String key="";
	    		while(itr!=null && itr.hasNext())
				{
	    			key=(String)itr.next();
	    			if(fieldsJson.has(key) && "N".equals(fieldsJson.get(key)))
	    			{
	    				 paramMap.remove(lablesMap.get(key));
	    				 if(singleRowContent)
	    					 columnHeader.remove(lablesMap.get(key));
	    			}
				}
			}
			else
			{
				moveForward=false;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return moveForward;
	}
    //ZCUB-20160210-227 ends
	/**
 	 * @author priya kumari
 	 * This method change the format of Owner Name On the basis of Owner display format.
 	 * P_ENH_OWNER_DISPLAY_FORMAT
 	 */
 public static String getOwnerDisplayName (String firstName,String middleName,String lastName) {
		String displayValue= MultiTenancyUtil.getTenantConstants().OWNER_NAME_DISPLAY_FORMAT;
		String ownerName = FieldNames.EMPTY_STRING;
    	if (StringUtil.isValid(firstName) && StringUtil.isValid(lastName))
    	{
    		if("F".equals(displayValue)){
    			ownerName=StringUtil.formatName(firstName,middleName,lastName);
    			
    		}else if("L".equals(displayValue)){
    			ownerName=StringUtil.formatName(lastName,middleName,firstName);
    		}
    	}
    	
		return ownerName;
		
	} 
	
	/**
	 * P_ENH_FO_ALERT_NOTIFICATION 
	 * @param alertId
	 * @return
	 */
	public static Info getAlertNotificationInfo(String alertId){
    	Info alertNotification = new Info();
    	String query = "SELECT ALERT_FREQUENCY,FROM_EMAIL,EMAIL_CONTENT,TASK_LEVEL,EMAIL_SUBJECT,USER,CC,BCC FROM ALERT_NOTIFICATION WHERE IS_DELETED='N' AND ALERT_ID=?";
    	try{
        ResultSet result	= QueryUtil.getResult(query, new String[]{alertId});
    
        if(result!=null){
            while(result.next()){
            	alertNotification.set(FieldNames.ALERT_FREQUENCY,result.getString("ALERT_FREQUENCY"));
            	alertNotification.set(FieldNames.FROM_EMAIL_ALERT,result.getString("FROM_EMAIL"));
            	alertNotification.set(FieldNames.ALERT_EMAIL_CONTENT,result.getString("EMAIL_CONTENT"));
            	alertNotification.set(FieldNames.TASK_LEVEL,result.getString("TASK_LEVEL"));
            	alertNotification.set(FieldNames.EMAIL_SUBJECT,result.getString("EMAIL_SUBJECT"));
            	alertNotification.set(FieldNames.USER_NO,result.getString("USER"));
            	alertNotification.set(FieldNames.CC,result.getString("CC"));
            	alertNotification.set(FieldNames.BCC,result.getString("BCC"));
            }
        }
        }catch(Exception e){
        	logger.error("Error in getAlertNotificationInfo() in AuditUtil:::::::"+e);
        }
        return alertNotification;
    }
	//ZCUB-20160310-239 starts
	public static HashMap<String,String>  getMapFromJSON(JSONObject mainJson)
	{
		HashMap<String,String> resultMap=new HashMap<String,String>();
    	Iterator itr=mainJson.keys();
    	String sourceKeys="";
    	try{
    		while(itr.hasNext())
    		{
    			sourceKeys=(String)itr.next();
    			resultMap.put(sourceKeys, String.valueOf(mainJson.get(sourceKeys)));
    		}
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    	}
		return resultMap;
	}
	//ZCUB-20160310-239 ends
	//BB-20160203-516 Starts
	public static String getRDSecureKeyForLogi(HttpServletRequest request) throws Exception{
		HttpSession session = request.getSession();
		String secureKey = (String)session.getAttribute("secureKey");
		System.out.println(">>>>>getRDSecureKeyForLogi()>>>>>>>>secureKey>>>>from session>>>>"+secureKey);

		if(!StringUtil.isValid(secureKey)){

			String tenantName = MultiTenancyUtil.getTenantName(); 
			try{       
				if(MultiTenancyUtil.getTenantConstants().WS_SYNC && MultiTenancyUtil.getTenantConstants().WS_MODULES_SYNC && (session.getAttribute("syncBuildMoudleMap")==null || ((Map<String,String>)session.getAttribute("syncBuildMoudleMap")).size()==0))
				{
					String user_no = (String)session.getAttribute(FieldNames.USER_NO_IN_SESSION);
					Map<String,String> syncTabs = CacheMgr.getTabsCache().getSyncTabs(user_no);
					String clientKey ="";    
					if(syncTabs!=null && syncTabs.size()>0 && MultiTenancyUtil.getTenantConstants().WS_SYNC && MultiTenancyUtil.getTenantConstants().WS_MODULES_SYNC)
					{
						Map.Entry mapEntry = null;
						Iterator iterator = syncTabs.entrySet().iterator();

						if (iterator.hasNext())
						{
							mapEntry = (Map.Entry) iterator.next();
							clientKey=(String)mapEntry.getKey();
							if(session.getAttribute("syncBuildMoudleMap")==null || ((Map<String,String>)session.getAttribute("syncBuildMoudleMap")).size()==0)
							{
								MenuUtils.setSyncBuildMoudleMap(session,clientKey);
							}
						}

					}
				}
			}catch(Exception e)
			{
				logger.error("Exception in method getRDSecureKeyForLogi while fetching syncBuildMoudleMap:"+tenantName, e);
			}


			String Username = (String)session.getAttribute("user_id");

			String dbIp=FieldNames.EMPTY_STRING;
			String dbName=FieldNames.EMPTY_STRING;
			String franchiseeNo = (String)session.getAttribute("franchisee_no");
			boolean fromViewAll = "All".equals((String)request.getSession().getAttribute("franchisee_all"));
			String userIdentityNo = (String)session.getAttribute("user_identity_no");

			if("1".equals(session.getAttribute("user_level")) && fromViewAll)
				franchiseeNo = (String)request.getAttribute("foStoreNo");

			String franchiseeNoCSV = "-1";

			String divisionIds = (String)session.getAttribute("divisionIds");
			String divisionalFranNos = DivisionUtil.getAllDivisionFranchiseeNos(divisionIds);
			StringBuilder franchiseeNoListBuild = new StringBuilder();
			String UserNo = (String)session.getAttribute("user_no");
			String areaId = (String)session.getAttribute("areaId");
			String userLvl = (String)session.getAttribute("user_level");
			String regFranNos = AdminMgr.newInstance().getStoreDAO().getFranchiseeInRegionCSV(areaId);
			if(userLvl==null || userLvl.equalsIgnoreCase(FieldNames.NULL)){
				userLvl=FieldNames.EMPTY_STRING;
			}
			
			String dashboardColumns = "1";
			String allowFreeForm = "False";
			String Rights = FieldNames.EMPTY_STRING;
			String Roles = FieldNames.EMPTY_STRING;
			String moduleImplemented=ModuleUtil.totalModuleImplemented();
			if(StringUtil.isValidNew(moduleImplemented)){
				moduleImplemented=moduleImplemented.replace("'", "");
			}
			InputStream is = MultiTenancyUtil.getDBConfStream(tenantName);
			Properties dbProps = new Properties();
			UserRoleMap leftUserRoleMap = (UserRoleMap)session.getAttribute("userRoleMap");
			boolean isRegional=false;
			String userType = "NA";
			if("0".equals(userLvl)){
				userType = "Corporate";
			}
			else if("1".equals(userLvl)){
				userType = "Franchisee";
			}
			if("2".equals(userLvl)){
				userType = "Regional";
			}
			if("6".equals(userLvl)){
				userType = "Divisional";
			}
			if("2".equals(userLvl)){
				isRegional=true;
			}
			boolean isCorp=false;
			if("0".equals(userLvl)){
				isCorp=true;
			}

			Iterator roleIter =	leftUserRoleMap.getAll();
			boolean first = true;
			while(roleIter.hasNext()){
				UserRole roles = (UserRole) roleIter.next();
				String roleID	= roles.getRoleID();
				if(!first){
					Roles = Roles + ",";
				}
				Roles = Roles + roleID;		
				first = false;
			}
			if(StringUtil.isValid(Roles)){
				//Rights = RoleMgr.newInstance().getRoleDAO().getUserRolePrivileges(Roles);
				Rights = LogiPrivilegeConstants.getLogiUserPrivileges(userLvl, leftUserRoleMap,isRegional,isCorp,request);
			}
			try {
				dbProps.load(is);
				String dburl = dbProps.getProperty("url");
				String dbvalues[] = dburl.split("\\?")[0].split("/");
				dbIp = dbvalues[2].replace(":3306", "");
				dbName = dbvalues[3];
			} catch(Exception e) {
				logger.error("Can't read the properties file.\nMake sure db.properties is in the CLASSPATH", e);
				return null;
			} finally {
				try {
					is.close();
				} catch(IOException e) {
					logger.error("Exception while initializing connection pool for :"+tenantName, e);
				}
			}
			if( "1".equals(userLvl)){
				if(fromViewAll && session.getAttribute("FranchiseeNoList")!=null)
				{
					List<String> slist = new ArrayList<String>((ArrayList)session.getAttribute("FranchiseeNoList"));
					for (String each : slist)
					{
						if(!"All".equals(each)){
							franchiseeNoListBuild.append(each).append(",");
						}
					}
					
					franchiseeNoCSV = franchiseeNoListBuild.substring(0, franchiseeNoListBuild.length()-1);
				}
			}
			if("2".equals(userLvl))
			{
				SequenceMap storeMap = AdminMgr.newInstance().getStoreDAO().getFranchiseeNames(areaId, "N", null);
				franchiseeNoCSV = StringUtil.getCSVString((String [])storeMap.keys().toArray(new String[]{}));   
			}
			else if(Constants.USER_LEVEL_DIVISION.equals(userLvl))
			{
				SequenceMap storeMap = AdminMgr.newInstance().getStoreDAO().getFranchiseeNames(null, "N", divisionIds);
				franchiseeNoCSV = StringUtil.getCSVString((String [])storeMap.keys().toArray(new String[]{}));  
			}
			String zcDBIp="",zcDBName="";String zcRights ="";
			String zcRoles = "";
			try{
				JSONObject sysConfigJson=(JSONObject)session.getAttribute("sysConfigJson");
				if(sysConfigJson!=null )
				{
					zcDBIp=sysConfigJson.getString("zcDBIp");
					zcDBName=sysConfigJson.getString("zcDBName");
					zcRights=sysConfigJson.getString("zcRights");
					zcRoles=sysConfigJson.getString("zcRoles");
					Rights=Rights+","+zcRights;
					Roles=Roles+","+zcRoles;
				}
			}catch(Exception e)
			{logger.error("Exception in method getRDSecureKeyForLogi while fetching zcRoles:"+tenantName, e);
			}

			//System.out.println("=======zcRoles======="+zcRoles);
			//System.out.println("=======zcRights======="+zcRights);
			/*
			if(Username!=null && Username.endsWith("wide")){
				allowFreeForm = "True";
				dashboardColumns = "";
			}
			 */

                        if( MultiTenancyUtil.getTenantConstants().WS_SYNC && MultiTenancyUtil.getTenantConstants().WS_MODULES_SYNC && ModuleUtil.zcubatorImplemented())
                        {
                            String tempDBIP="",tempDBNAME="";
                            
                            tempDBIP=zcDBIp;
                            tempDBNAME=zcDBName;
                            
                            zcDBIp=dbIp;
                            zcDBName=dbName;
                            
                            dbIp=tempDBIP;
                            dbName=tempDBNAME;
                        }
                        else
                        {
                            
                        }
			//MarketingDashboard starts
			
			String mainTableCondition = "";
			String contactRecentCampCondition = "";
			String leadRecentCampCondition = "";
			String franchiseeCondition = "";
			String campaignCondition = "";
			String contactPrivCondition = "";
			String contactPrivConditionOpp = "";
			String leadPrivCondition = "";
			String accountsCountCondition = "";
			
			if("0".equals(userLvl)) 
			{
				mainTableCondition = " ";
				contactRecentCampCondition = " AND(''=@SingleQuote.Request.ActionFranchiseeNo~ OR CCD.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) ) ";
				leadRecentCampCondition = " AND(''=@SingleQuote.Request.ActionFranchiseeNo~ OR CLD.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) ) ";
				franchiseeCondition = " ";	
				campaignCondition = " AND (" +
						"(CAMPAIGN_ACCESSIBILITY='Global' " +
							"OR (CAMPAIGN_ACCESSIBILITY='Public' " +
								"AND(" +
									"''=@SingleQuote.Request.ActionFranchiseeNo~ " +
									"OR (" +
										"MAIN_TABLE.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) " +
										"OR (MAIN_TABLE.ADDED_BY IN ("+UserNo+") AND MAIN_TABLE.FRANCHISEE_NO IN (-1)) " +
										"OR (MAIN_TABLE.REGION_NO IN (@SingleQuote.Request.ActionRegionNo~) AND MAIN_TABLE.FRANCHISEE_NO = '0') " +
									") " +
								")" +
							")" +
						") " +
						"OR (CAMPAIGN_ACCESSIBILITY='Private' " +
							"AND(" +
								"''=@SingleQuote.Request.ActionFranchiseeNo~ OR " +
									"( MAIN_TABLE.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) OR MAIN_TABLE.REGION_NO IN (@SingleQuote.Request.ActionRegionNo~) )" +
							" )" +
						")" +
					") ";  
				
				if(!leftUserRoleMap.isPrivilegeInMap("/cmCorporateView"))
				{
					contactPrivCondition = " AND MAIN_TABLE.CONTACT_OWNER_ID='"+UserNo+"' ";
					contactPrivConditionOpp = " AND (CCD.CONTACT_OWNER_ID='"+UserNo+"' OR (CCD.CONTACT_ID IS NULL OR CCD.CONTACT_ID='0') ) ";
					contactRecentCampCondition  = contactRecentCampCondition + " AND CCD.CONTACT_OWNER_ID='"+UserNo+"' ";
				}
				
				if(!leftUserRoleMap.isPrivilegeInMap("/cmLeadCorporateView"))
				{	
					leadPrivCondition = " AND MAIN_TABLE.LEAD_OWNER_ID='"+UserNo+"' ";
					leadRecentCampCondition  = leadRecentCampCondition + " AND CLD.LEAD_OWNER_ID='"+UserNo+"' ";
				}
				if(!leftUserRoleMap.isPrivilegeInMap("/cmCorporateOpportunityView"))
				{
					contactPrivConditionOpp = contactPrivConditionOpp + " AND MAIN_TABLE.OPPORTUNITY_OWNER='"+UserNo+"' ";
				}
			} 
			else if("1".equals(userLvl)) 
			{
				if(fromViewAll)
				{
					String franchiseOwner[] = new String[2];
					franchiseOwner = getFranchiseeAndOwner(request);
					franchiseeNo = franchiseOwner[0];
				}
				mainTableCondition = " AND MAIN_TABLE.FRANCHISEE_NO IN ("+franchiseeNo+") ";
				contactRecentCampCondition = " AND CCD.FRANCHISEE_NO IN ("+franchiseeNo+") AND CCD.FRANCHISEE_NO IN (@Request.MUFranchiseeNo~) ";
				leadRecentCampCondition = " AND CLD.FRANCHISEE_NO IN ("+franchiseeNo+") AND CLD.FRANCHISEE_NO IN (@Request.MUFranchiseeNo~) ";
				campaignCondition = "";
				
				if(!leftUserRoleMap.isPrivilegeInMap("/cmFranchiseeView"))
				{
					contactPrivCondition = " AND MAIN_TABLE.CONTACT_OWNER_ID='"+UserNo+"' ";
					contactPrivConditionOpp = " AND (CCD.CONTACT_OWNER_ID='"+UserNo+"' OR (CCD.CONTACT_ID IS NULL OR CCD.CONTACT_ID='0') ) ";
					contactRecentCampCondition  = contactRecentCampCondition + " AND CCD.CONTACT_OWNER_ID='"+UserNo+"' ";
				}
				if(!leftUserRoleMap.isPrivilegeInMap("/cmLeadFranchiseeView"))
				{
					leadPrivCondition = " AND MAIN_TABLE.LEAD_OWNER_ID='"+UserNo+"' ";
					leadRecentCampCondition  = leadRecentCampCondition + " AND CLD.LEAD_OWNER_ID='"+UserNo+"' ";
				}
				if(!leftUserRoleMap.isPrivilegeInMap("/cmFranchiseeOpportunityView"))
				{
					contactPrivConditionOpp = contactPrivConditionOpp + " AND MAIN_TABLE.OPPORTUNITY_OWNER='"+UserNo+"' ";
				}
				accountsCountCondition = " AND ( MAIN_TABLE.FRANCHISEE_NO IN ( "+franchiseeNo+")  ) AND (CI.TYPE ='A' OR  (CASE CI.TYPE WHEN 'F' THEN CI.FOREIGN_ID IN (" + franchiseeNo + ") END) OR  (CASE CI.TYPE WHEN 'RF' THEN CI.FOREIGN_ID IN ("+areaId+") END) )";
			}
			else if("2".equals(userLvl))
			{
				mainTableCondition = " AND MAIN_TABLE.AREA_ID IN ("+areaId+") ";
				contactRecentCampCondition = " AND CCD.AREA_ID IN ("+areaId+") AND (''=@SingleQuote.Request.ActionFranchiseeNo~ OR CCD.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) ) ";
				leadRecentCampCondition = " AND CLD.AREA_ID IN ("+areaId+") AND (''=@SingleQuote.Request.ActionFranchiseeNo~ OR CLD.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) ) ";
				franchiseeCondition = " AND IS_ADMIN='N' AND  F.AREA_ID=" + areaId + " ";
				campaignCondition = " AND (" +
						"(CAMPAIGN_ACCESSIBILITY='Global' " +
							"OR (CAMPAIGN_ACCESSIBILITY='Public' " +
								"AND(" +
									"''=@SingleQuote.Request.ActionFranchiseeNo~ " +
									"OR (" +
										"MAIN_TABLE.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) " +
										"OR (MAIN_TABLE.ADDED_BY IN ("+UserNo+") AND MAIN_TABLE.FRANCHISEE_NO IN (-1)) " +
										"OR (MAIN_TABLE.REGION_NO IN (@SingleQuote.Request.ActionRegionNo~) AND MAIN_TABLE.FRANCHISEE_NO = '0') " +
									") " +
								")" +
							")" +
						") " +
						"OR (CAMPAIGN_ACCESSIBILITY='Private' AND MAIN_TABLE.REGION_NO IN("+areaId+") " +
							"AND(" +
								"''=@SingleQuote.Request.ActionFranchiseeNo~ OR " +
									"( MAIN_TABLE.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) OR MAIN_TABLE.REGION_NO IN (@SingleQuote.Request.ActionRegionNo~) )" +
							" )" +
						")" +
					") ";
				
				if(!leftUserRoleMap.isPrivilegeInMap("/cmRegionalView"))
				{	
					contactPrivCondition = " AND MAIN_TABLE.CONTACT_OWNER_ID='"+UserNo+"' ";
					contactPrivConditionOpp = " AND (CCD.CONTACT_OWNER_ID='"+UserNo+"' OR (CCD.CONTACT_ID IS NULL OR CCD.CONTACT_ID='0') ) ";
					contactRecentCampCondition  = contactRecentCampCondition + " AND CCD.CONTACT_OWNER_ID='"+UserNo+"' ";
				}
				if(!leftUserRoleMap.isPrivilegeInMap("/cmLeadRegionalView"))
				{
					leadPrivCondition = " AND MAIN_TABLE.LEAD_OWNER_ID='"+UserNo+"' ";
					leadRecentCampCondition  = leadRecentCampCondition + " AND CLD.LEAD_OWNER_ID='"+UserNo+"' ";
				}
				if(!leftUserRoleMap.isPrivilegeInMap("/cmRegionalOpportunityView"))
				{
					contactPrivConditionOpp = contactPrivConditionOpp + " AND MAIN_TABLE.OPPORTUNITY_OWNER='"+UserNo+"' ";
				}
				accountsCountCondition = " AND MAIN_TABLE.AREA_ID ='"+areaId+"' AND ( CI.TYPE ='A' OR ( CI.TYPE = 'RO' AND CI.FOREIGN_ID ='"+areaId+"' ) OR  ( CI.TYPE = 'RF' AND CI.FOREIGN_ID = '"+areaId+"' ) OR (  CI.TYPE= 'F' AND CI.FOREIGN_ID IN("+regFranNos+") ) ) ";
			
			}
			else if("6".equals(userLvl))
			{
				mainTableCondition = " AND MAIN_TABLE.FRANCHISEE_NO IN ("+divisionalFranNos+") ";
				contactRecentCampCondition = " AND (CCD.FRANCHISEE_NO IN ("+divisionalFranNos+") OR CCD.OWNER_TYPE='R') AND (''=@SingleQuote.Request.ActionFranchiseeNo~ OR CCD.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) ) ";
				leadRecentCampCondition = " AND (CLD.FRANCHISEE_NO IN ("+divisionalFranNos+") OR CLD.OWNER_TYPE='R') AND (''=@SingleQuote.Request.ActionFranchiseeNo~ OR CLD.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) ) ";
				franchiseeCondition = " AND F.FRANCHISEE_NO IN (" + divisionalFranNos + ") ";
				campaignCondition = " AND (CAMPAIGN_ACCESSIBILITY = 'Global' OR " +
						"(" +
							"(CAMPAIGN_ACCESSIBILITY='Public' AND (''=@SingleQuote.Request.ActionFranchiseeNo~ AND " +
									"(	MAIN_TABLE.FRANCHISEE_NO IN("+divisionalFranNos+",-1) " +
										"OR (MAIN_TABLE.ADDED_BY IN("+UserNo+") AND MAIN_TABLE.FRANCHISEE_NO IN (-1)) " +
										"OR (MAIN_TABLE.REGION_NO <> -1 AND MAIN_TABLE.REGION_NO <> 0 AND MAIN_TABLE.FRANCHISEE_NO=0 ) " +
									")" +
									"OR (" +
										"MAIN_TABLE.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) " +
										"OR (MAIN_TABLE.ADDED_BY IN ("+UserNo+") AND MAIN_TABLE.FRANCHISEE_NO IN (-1)) " +
										"OR (MAIN_TABLE.REGION_NO IN (@SingleQuote.Request.ActionRegionNo~) AND MAIN_TABLE.FRANCHISEE_NO = '0') " +
									") " +
								")" +
							") " +
							"OR (CAMPAIGN_ACCESSIBILITY='Private' AND " +
								"(" +
									"''=@SingleQuote.Request.ActionFranchiseeNo~ AND ( MAIN_TABLE.FRANCHISEE_NO IN("+divisionalFranNos+") " +
										"OR ( MAIN_TABLE.ADDED_BY IN("+AdminMgr.newInstance().getUsersDAO().getAllUserNos(divisionalFranNos)+") " +
												"AND MAIN_TABLE.FRANCHISEE_NO=-1 " +
										") " +
										"OR (MAIN_TABLE.REGION_NO <> -1 AND MAIN_TABLE.REGION_NO <> 0 AND MAIN_TABLE.FRANCHISEE_NO=0 ) " +
									") " +
									"OR ( MAIN_TABLE.FRANCHISEE_NO IN (@SingleQuote.Request.ActionFranchiseeNo~) OR MAIN_TABLE.REGION_NO IN (@SingleQuote.Request.ActionRegionNo~) ) " +
								") " +
							") OR MAIN_TABLE.ADDED_BY IN ("+UserNo+") " +
						") " +
					")";
				
				contactPrivCondition = " AND (MAIN_TABLE.FRANCHISEE_NO IN ("+divisionalFranNos+") OR MAIN_TABLE.OWNER_TYPE='R') ";
				leadPrivCondition = " AND (MAIN_TABLE.FRANCHISEE_NO IN ("+divisionalFranNos+") OR MAIN_TABLE.OWNER_TYPE='R') ";
				contactPrivConditionOpp = " AND ( MAIN_TABLE.FRANCHISEE_NO IN ("+divisionalFranNos+") OR ( (MAIN_TABLE.AREA_ID IS NOT NULL AND MAIN_TABLE.AREA_ID<>0 AND MAIN_TABLE.AREA_ID<>-1 AND (MAIN_TABLE.FRANCHISEE_NO IS NULL OR MAIN_TABLE.FRANCHISEE_NO=0))))"; //This is only specific to Opportunity Count for Divisional user, not related to contact details table. 
				accountsCountCondition = "  AND ( MAIN_TABLE.FRANCHISEE_NO IN ( "+divisionalFranNos+")  OR MAIN_TABLE.OWNER_TYPE='R'  ) AND (CI.TYPE ='A' OR  (CASE CI.TYPE WHEN 'F' THEN CI.FOREIGN_ID IN (" + divisionalFranNos + ") END) OR  CI.TYPE = 'RF' OR  CI.TYPE = 'RO' ) ";
			}
			
			//MarketingDashboard ends
			
			WebCacheBypass wCache = new WebCacheBypass(request);
			String webcacheserverIp= MultiTenancyUtil.getSysVarMgr().getSystemVariable("webcacheserver");

			String remoteAddress = wCache.getRemoteAddr();

			if("192.168.9.11".equals(webcacheserverIp))
			{
				remoteAddress = request.getRemoteAddr();
			}

			javax.servlet.ServletContext context = session.getServletContext();
			String logiKeyURl=(String)context.getInitParameter("LOGI_KEY_URL");
			String SecureKeyUrl =logiKeyURl+"/rdTemplate/rdGetSecureKey.aspx";
			StringBuffer getKeyURL = new StringBuffer();
			//getKeyURL.append("Username=").append(Username).append( "&Roles=" ).append( Roles).append("&ClientBrowserAddress=").append( request.getRemoteAddr()).append("&UserNo=").append( UserNo);




			getKeyURL.append("Username=").append(Username).append( "&Roles=" ).append( Roles).append("&ClientBrowserAddress=").append( remoteAddress).append("&UserNo=").append( UserNo);
			getKeyURL.append("&dbIp=").append( dbIp);
			getKeyURL.append("&dbName=").append( dbName);

			if("6".equals(userLvl)){
				getKeyURL.append("&divisionIds=").append((String)session.getAttribute("divisionIds"));
			}
			else
			{
				getKeyURL.append("&divisionIds=").append("-1"); 
			}
			if(MultiTenancyUtil.getTenantConstants().WS_SYNC && MultiTenancyUtil.getTenantConstants().WS_MODULES_SYNC)
			{
				getKeyURL.append("&zcDBIp=").append(zcDBIp);
				getKeyURL.append("&zcDBName=").append(zcDBName);
			}
			else
			{
				getKeyURL.append("&zcDBIp=").append(dbIp);
				getKeyURL.append("&zcDBName=").append(dbName);   
			}

			getKeyURL.append("&Rights=").append( Rights);
			getKeyURL.append("&franchiseeNo=").append( franchiseeNo);
			getKeyURL.append("&userLevel=").append( userLvl);
			getKeyURL.append("&dashboardColumns=").append( dashboardColumns);
			getKeyURL.append("&allowFreeForm=").append( allowFreeForm);
			getKeyURL.append("&tenantName=").append( tenantName);
			getKeyURL.append("&userType=").append( userType);
			getKeyURL.append("&areaId=").append( areaId);
			getKeyURL.append("&modules=").append( moduleImplemented);
			getKeyURL.append("&userIdentityNo=").append( userIdentityNo);
			getKeyURL.append("&franchiseeNoCSV=").append( franchiseeNoCSV);
			getKeyURL.append("&dateFormat=").append(MultiTenancyUtil.getTenantConstants().DISPLAY_FORMAT);
			
			//MarketingDashboard conditions starts
			getKeyURL.append("&MAIN_TABLE_CONDITION=").append(mainTableCondition);
			getKeyURL.append("&FRANCHISEE_CONDITION=").append(franchiseeCondition);
			getKeyURL.append("&CAMPAIGN_CONDITION=").append(campaignCondition);
			getKeyURL.append("&CONTACT_PRIV_CONDITION=").append(contactPrivCondition);
			getKeyURL.append("&LEAD_PRIV_CONDITION=").append(leadPrivCondition);
			getKeyURL.append("&LEAD_RECENTCAMP_CONDITION=").append(leadRecentCampCondition);
			getKeyURL.append("&CONTACT_RECENTCAMP_CONDITION=").append(contactRecentCampCondition);
			getKeyURL.append("&ACCOUNT_COUNT_CONDITION=").append(accountsCountCondition);
			getKeyURL.append("&CONTACT_PRIV_CONDITION_OPP=").append(contactPrivConditionOpp);
			//MarketingDashboard conditions ends
			
			//			getKeyURL.append("&locInfo=").append( sbLocInfo.toString());
			System.out.println("tenantName==>"+tenantName+"========SecureKeyUrl==>"+SecureKeyUrl+"=====dbIp==>"+dbIp+"+===============dbName==>"+dbName);
			URL url = new URL(SecureKeyUrl);
			System.out.println("secureKey========"+secureKey+"========url==>"+url+"=========data=====getKeyURL=>"+getKeyURL);
			try {
				HttpURLConnection conn = (HttpURLConnection)url.openConnection();
				conn.setRequestMethod("POST");
				conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
				conn.setRequestProperty("Content-Length", "" +Integer.toString(getKeyURL.toString().getBytes().length));
				conn.setDoInput(true);
				conn.setDoOutput(true);
				DataOutputStream wr = new DataOutputStream ( conn.getOutputStream ());
				wr.writeBytes (getKeyURL.toString());
				wr.flush ();
				wr.close ();
				BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
				StringBuffer sb = new StringBuffer();
				String line;
				while ((line = rd.readLine()) != null) {
					sb.append(line);
				}
				rd.close();
				secureKey = sb.toString();
				System.out.println(">>>>>secureKey>>>>>>>>generated from logi url>>>"+secureKey);
			}
			catch (Exception e) {
				logger.error("Failed to get SecureKey, request URL >>>>>>>>>>>  ",e);
				throw new Exception("Failed to get SecureKey, request URL: [" + url + "], POST data: [ + data +]", e);
			}
			finally{
				session.setAttribute("secureKey", secureKey);
			}
		}
		return secureKey;
	}
	//BB-20160203-516 Ends
	
	//CHK-20160509-149 starts
    public static String handleSpecialForRegex(String s)
    {
    	try
    	{
    		if(StringUtil.isValid(s))
    		{
    			s = s.replaceAll(Pattern.quote("("), "\\\\(");
    			s = s.replaceAll(Pattern.quote(")"), "\\\\)");
    			s = s.replaceAll(Pattern.quote("."), "\\\\.");
    			s = s.replaceAll(Pattern.quote("?"), "\\\\?");
    			s = s.replaceAll(Pattern.quote("+"), "\\\\+");
    			s = s.replaceAll(Pattern.quote("*"), "\\\\*");
    			s = PortalUtils.replaceAll(s, "$", "\\$");
    			s = s.replaceAll(Pattern.quote("^"), "\\\\^");
    			s = s.replaceAll(Pattern.quote("["), "\\\\[");
    			s = s.replaceAll(Pattern.quote("^"), "\\^");
    			s = s.replaceAll(Pattern.quote("{"), "\\\\{");
    			s = s.replaceAll(Pattern.quote("|"), "\\\\|");
    		}

    	}
    	catch (Exception e) {
			// TODO: handle exception
    		e.printStackTrace();
		}
    	return s;
    }
  //CHK-20160509-149 ends
  //Issue with restoring Deleted Leads starts
    public static String generateQueryDeletedLeadFS(String tableName, String tableID, String leadId,SequenceMap sMap)
    {
        StringBuilder query = new StringBuilder();
        String queryData = FieldNames.EMPTY_STRING;
        String selectColums=FieldNames.EMPTY_STRING;//Issue with restoring Deleted Leads
        String returnString = FieldNames.EMPTY_STRING;
        ResultSet result = null;
        Info dataInfo=null;
        String mapColValue = FieldNames.EMPTY_STRING;
        try {
            query.append("SELECT * FROM ").append(tableName).append(" WHERE ").append(tableID).append("  IN ( ");
            query.append(leadId);
            query.append(" )");

            int recordCounter = 0;
            result = QueryUtil.getResult(query.toString(), null);
            int colCount = 0;
            String qData = null;

            if(result != null) {
            	dataInfo=new Info();
            	Info recordInfo =new Info();
                while (result.next()) {
                    queryData = FieldNames.EMPTY_STRING;
                    selectColums=FieldNames.EMPTY_STRING;//Issue with restoring Deleted Leads
                    mapColValue = FieldNames.EMPTY_STRING;
                    colCount = result.getnColumnCount();
                    
                    for (int i = 1; i <= colCount; i++) {

                        //ClockWork-20141201-680 starts
                        String colName=result.getMetaData().getColumnName(i);
                        String columnName = (String)hMap.get(tableName);
                        //ClockWork-20141201-680 ends

                        qData = result.getInString(i);

                        //ClockWork-20141201-680 starts
                        if(colName.equals(columnName) && !"FS_LEAD_DETAILS".equals(tableName) && !"TASKS".equals(tableName)){
                            qData="null";
                        }
                        //ClockWork-20141201-680 ends

                        if ( tableName != null && tableName.equals("FS_CAMPAIGN_EMAIL_LOG") && i == 9) {
                            if (qData != null && qData.equals(FieldNames.ZERO)) {
                                queryData = queryData + ", null";
                            } else if (qData != null) {
                                queryData = queryData + ", "+qData;
                            } else {
                                queryData = queryData + ", null";
                            }
                        } else {
                            if (qData != null && !qData.equals("null") && !qData.equals("false") && !qData.equals("true")) {
                                qData=PortalUtils.replaceAll(qData, "\\", "\\\\");//pita-20140523-065
                                qData = qData.replaceAll("'", "\\\\'");
                                qData = "'" + qData + "'";
                            }

                            // LEAD_DELETED flag must be blank or null.
							/*if (tableName.equals("FS_LEAD_DETAILS") && i == 80) {
								qData = FieldNames.NULL;
							}

							//P_E_Delete_ArchiveLeads starts
							if (("FS_LEAD_DETAILS_ARCHIVE".equals(tableName)) && i == 81) {
								qData = FieldNames.NULL;
							}*/
                            if("LEAD_DELETED".equals(colName)) {
                                qData = FieldNames.NULL;
                            }
                            //P_E_Delete_ArchiveLeads ends

                            if (queryData != null && !queryData.equals("")) {
                                queryData = queryData + " , " + qData;
                                selectColums=selectColums+" , "+colName;//Issue with restoring Deleted Leads
                                mapColValue=mapColValue+"######"+qData;
                            } else {
                                queryData = qData;
                                selectColums=colName;//Issue with restoring Deleted Leads
                                mapColValue=qData;
                            }
                        }
                    }
                    recordInfo = new Info();
                    recordInfo.set("colName", selectColums);
                    recordInfo.set("colValue", mapColValue);
                    dataInfo.set(""+recordCounter, recordInfo);
                    if ( tableName != null && tableName.equals("FS_CAMPAIGN_EMAIL_LOG") ) {
                    }

                    //P_E_Delete_ArchiveLeads starts
                    if("FS_LEAD_DETAILS_ARCHIVE".equals(tableName)) {
                        tableName = "FS_LEAD_DETAILS";
                    }
                    //P_E_Delete_ArchiveLeads ends

                    returnString = returnString + " INSERT INTO " + tableName + " ("+selectColums+") "+" VALUES(" + queryData + ");@@@3@@@";//Issue with restoring Deleted Leads
                    recordCounter++;
                }
            }

        } catch (Exception e) {
            logger.error("Exception in generateQuery:", e);
        } finally {
            if(result != null) {
                result.release();
                result = null;
                
            }
        }
        if(dataInfo!=null){
        	sMap.put(tableName, dataInfo);
        }
        return returnString;

    }//Issue with restoring Deleted Leads ends
    
    /**
     * ZCUB-20160503-257
     * @author divanshu
     * @param contactNumber
     * @return void
     * @
     */
    public static void setSMSSubscriptionTypeForExistingContact(String contactNumber,Info info,String fromWhere)
    {
    	setSMSSubscriptionTypeForExistingContact(contactNumber,info,fromWhere,null,null,null);
    }
    public static void setSMSSubscriptionTypeForExistingContact(String contactNumber,Info info,String fromWhere,String addedBy)
    {
    	setSMSSubscriptionTypeForExistingContact(contactNumber,info,fromWhere,addedBy,null,null);
    }
    public static void setSMSSubscriptionTypeForExistingContact(String contactNumber,Info info,String fromWhere,String addedBy,String existingStatus,HashMap paramMap) 
    {
    	try{
    		
    		if(StringUtil.isValid(contactNumber) && contactNumber.length()>10){
    				contactNumber =contactNumber.substring(contactNumber.length()-10, contactNumber.length());
    		}
    		boolean execute=true;
    		boolean mannualOptCase=false;
    		if(paramMap!=null && paramMap.size()>0)
    		{
    			String ignoreDuplicate=(String)paramMap.get("isIgnoreDuplicates");
    			if(StringUtil.isValid(ignoreDuplicate) && "Yes".equalsIgnoreCase(ignoreDuplicate))
    			{
    				if(StringUtil.isValid(fromWhere) && "importLead".equals(fromWhere) )
    				{
    					String val=SQLUtil.getColumnValue("CM_LEAD_DETAILS", "LEAD_ID", "MOBILE_NUMBERS",info.get("MOBILE_NUMBERS") );
	    				if(StringUtil.isValid(val))
	    					execute=false;
    				}
    				else
    				{
	    				String val=SQLUtil.getColumnValue("CM_CONTACT_DETAILS", "CONTACT_ID", "MOBILE_NUMBERS",info.get("MOBILE_NUMBERS") );
	    				if(StringUtil.isValid(val))
	    					execute=false;
    				}
    			}
    			
    			if(paramMap!=null && paramMap.containsKey("mannualOptCase")){
    				mannualOptCase = (boolean) paramMap.get("mannualOptCase");
    			}
    			
    		}
    		if(execute)
    		{
    			if(!StringUtil.isValid(existingStatus) && StringUtil.isValidNew(info.get("smsUnsubscribe")) && StringUtil.isValid(contactNumber))
    			{
    					existingStatus=info.get("smsUnsubscribe");
    			}
	    		if(!StringUtil.isValid(existingStatus))
	    		{
	    				existingStatus="-1";
	    		}
	    		
	    		if(ModuleUtil.cmImplemented() && MultiTenancyUtil.getTenantConstants().IS_SMSCAMPAIGN_ENABLED && StringUtil.isValid(contactNumber))
	    		{
//	    			String contactSubscriptionType=NewPortalUtils.getColumnValueFromQuery("SMS_UNSUBSCRIBE", "SELECT SMS_UNSUBSCRIBE FROM CM_SMS_SUBSCRIPTION_LOGS WHERE MOBILE_NUMBER="+contactNumber+" ORDER BY ADDED_DATE DESC LIMIT 1");
	    			HashMap<String,String> resultMap=CommonMgr.newInstance().getCommonCmDAO().getExistingSMSContactStaus(contactNumber);
	    			String contactSubscriptionType=resultMap.get("SMS_UNSUBSCRIBE");
	    			String existingGroupContactIds=resultMap.get("CONTACT_IDS");
	    			String existingGroupLeadIds=resultMap.get("LEAD_IDS");
	    			if(paramMap==null)
	    				paramMap=new HashMap();
	    			paramMap.put("existingGroupContactIds", existingGroupContactIds);
	    			paramMap.put("existingGroupLeadIds", existingGroupLeadIds);
	    			paramMap.put("manualPrimaryKey", info.getString("manualPrimaryKey"));
	    			if(StringUtil.isValidNew(contactSubscriptionType))
	    			{
	    				boolean existingContactCase=false;
	    				
	    				if("0".equals(contactSubscriptionType) && StringUtil.isValid(fromWhere) && ("importLead".equals(fromWhere) || "importContact".equals(fromWhere)) )
	    				{
	    					existingStatus=contactSubscriptionType;
	    				}
	    				if(StringUtil.isValidNew(existingStatus))
	    				{
		    				if(existingStatus.equals(contactSubscriptionType)){
		    						paramMap.put("existingGroupContactIds", "");
		    				}
		    				
		    				contactSubscriptionType=existingStatus;
	    				}
	    				
	    					existingContactCase=true;
	    				
	    				SQLUtil.updateTableData("CM_CONTACT_DETAILS",new String[]{ "SMS_UNSUBSCRIBE","SMS_UNSUBSCRIBE_DATE"}, new String[]{contactSubscriptionType,DateUtil.getCurrentDateTimeDB()},false,null,true," MOBILE_NUMBERS LIKE '%"+contactNumber+"%'");
	    				SQLUtil.updateTableData("CM_LEAD_DETAILS",new String[]{ "SMS_UNSUBSCRIBE","SMS_UNSUBSCRIBE_DATE"}, new String[]{contactSubscriptionType,DateUtil.getCurrentDateTimeDB()},false,null,true," MOBILE_NUMBERS LIKE '%"+contactNumber+"%'");

	    				String contactId=info.getString(FieldNames.CONTACT_ID);
	    				boolean optOutCase=false;
	    				boolean optInCase=false;
	    				
	    				String type="contact";
	    				if(StringUtil.isValid(fromWhere) && ("importLead".equals(fromWhere) || "importContact".equals(fromWhere)) )
	    				{
	    					info.set("SMS_UNSUBSCRIBE",contactSubscriptionType);
	    					info.set("SMS_UNSUBSCRIBE_DATE",DateUtil.getCurrentDateTimeDB());
	    					contactId=info.getString("CONTACT_ID");
	    					if("importLead".equals(fromWhere))
	    					{
		    					type="lead";
		    					contactId=info.getString("LEAD_ID");
	    					}
	    				}
	    				else
	    				{
	    					info.set(FieldNames.SMS_UNSUBSCRIBE,contactSubscriptionType);
	    					info.set(FieldNames.SMS_UNSUBSCRIBE_DATE,DateUtil.getCurrentDateTimeDB());
	    				}
	    				
	    				
	    				if("0".equals(contactSubscriptionType))
	    					optOutCase=true;
	    				else if("1".equals(contactSubscriptionType))
	    					optInCase=true;
	    				if("leadManipulator".equals(fromWhere) )
	    				{
	    					type="lead";
	    					contactId=info.getString(FieldNames.LEAD_ID);
	    				}
	    				CommonMgr.newInstance().getCommonCmDAO().saveSubscriptionLogs(paramMap,fromWhere);
	    				CommonMgr.newInstance().getCommonCmDAO().saveRemarksForContactSubscription(contactId,optInCase,optOutCase,existingContactCase,mannualOptCase,type,fromWhere,addedBy,paramMap);
	
	    			}
	    			else
	    			{
	    				if(StringUtil.isValid(fromWhere) && ("importLead".equals(fromWhere) || "importContact".equals(fromWhere)) )
	    				{
	    					info.set("SMS_UNSUBSCRIBE",existingStatus);
	    					info.set("SMS_UNSUBSCRIBE_DATE",DateUtil.getCurrentDateTimeDB());
	    					
	    					SQLUtil.updateTableData("CM_CONTACT_DETAILS",new String[]{ "SMS_UNSUBSCRIBE","SMS_UNSUBSCRIBE_DATE"}, new String[]{existingStatus,DateUtil.getCurrentDateTimeDB()},false,null,true," MOBILE_NUMBERS LIKE '%"+contactNumber+"%'");
		    				SQLUtil.updateTableData("CM_LEAD_DETAILS",new String[]{ "SMS_UNSUBSCRIBE","SMS_UNSUBSCRIBE_DATE"}, new String[]{existingStatus,DateUtil.getCurrentDateTimeDB()},false,null,true," MOBILE_NUMBERS LIKE '%"+contactNumber+"%'");
		    				
	    				}
	    				else
	    				{
	    					info.set(FieldNames.SMS_UNSUBSCRIBE,existingStatus);
	    					info.set(FieldNames.SMS_UNSUBSCRIBE_DATE,DateUtil.getCurrentDateTimeDB());
	    					
	    					SQLUtil.updateTableData("CM_CONTACT_DETAILS",new String[]{ "SMS_UNSUBSCRIBE","SMS_UNSUBSCRIBE_DATE"}, new String[]{existingStatus,DateUtil.getCurrentDateTimeDB()},false,null,true," MOBILE_NUMBERS LIKE '%"+contactNumber+"%'");
		    				SQLUtil.updateTableData("CM_LEAD_DETAILS",new String[]{ "SMS_UNSUBSCRIBE","SMS_UNSUBSCRIBE_DATE"}, new String[]{existingStatus,DateUtil.getCurrentDateTimeDB()},false,null,true," MOBILE_NUMBERS LIKE '%"+contactNumber+"%'");

	    				}
	    				if(StringUtil.isValidNew(existingStatus)){
	        				if(("importLead".equals(fromWhere) || "importContact".equals(fromWhere)))
	        					info.set("SMS_UNSUBSCRIBE_DATE",DateUtil.getCurrentDateTimeDB());
	        				else 
	        					info.set(FieldNames.SMS_UNSUBSCRIBE_DATE,DateUtil.getCurrentDateTimeDB());
	        				
	        				
	        				String contactId=info.getString(FieldNames.CONTACT_ID);
		    				boolean optOutCase=false;
		    				boolean optInCase=false;
		    				String type="contact";
		    				
	        				
		    				if("0".equals(existingStatus))
		    					optOutCase=true;
		    				else if("1".equals(existingStatus))
		    					optInCase=true;
		    				if("leadManipulator".equals(fromWhere) )
		    				{
		    					type="lead";
		    					contactId=info.getString(FieldNames.LEAD_ID);
		    				}
		    				else if(StringUtil.isValid(fromWhere) && ("importLead".equals(fromWhere)) )
		    				{
		    					type="lead";
		    					contactId=info.getString("LEAD_ID");
		    				}
		    				else if(StringUtil.isValid(fromWhere) && ("importContact".equals(fromWhere)) )
		    				{
		    					type="contact";
		    					contactId=info.getString("CONTACT_ID");
		    				}
	    					CommonMgr.newInstance().getCommonCmDAO().saveSubscriptionLogs(paramMap,fromWhere);
	    					CommonMgr.newInstance().getCommonCmDAO().saveRemarksForContactSubscription(contactId,optInCase,optOutCase,false,mannualOptCase,type,fromWhere,addedBy,paramMap);
	    				}
	    			}
	    			
	    		}
	    		else if(ModuleUtil.cmImplemented() && MultiTenancyUtil.getTenantConstants().IS_SMSCAMPAIGN_ENABLED )
	    		{
	    			if(StringUtil.isValid(fromWhere) && ("importLead".equals(fromWhere) || "importContact".equals(fromWhere)) )
    				{
    					info.set("SMS_UNSUBSCRIBE",existingStatus);
    					info.set("SMS_UNSUBSCRIBE_DATE",DateUtil.getCurrentDateTimeDB());	    				
	    				
    				}
	    			else
	    			{
	    				info.set(FieldNames.SMS_UNSUBSCRIBE,existingStatus);
	    				info.set(FieldNames.SMS_UNSUBSCRIBE_DATE,DateUtil.getCurrentDateTimeDB());
	    			}
	    				
	    		}
    		}
    		
    	 
    	}catch(Exception ee)
    	{
    		ee.printStackTrace();
    	}
    }
    //ABS_NM082016 start
	public static String getCustomeFieldHtml(Info remarksMap ,String note){
		if(!StringUtil.isValidNew(note)){
			note = "";
		}
		String fieldType=remarksMap.get(FieldNames.FIELD_TYPE);
		String fieldHeading=remarksMap.get(FieldNames.FIELD_HEADING);

		String maximumLength=remarksMap.get(FieldNames.MAXIMUM_LENGTH);
		String validation=remarksMap.get(FieldNames.VALIDATION);
		StringBuffer htmlCode=new StringBuffer();
		
		if("text".equals(fieldType))
		{   htmlCode.append("<tr id='noteId' class='summaryTbl bText12'><td align='left' class='thead' id='hideShow' colspan='2'><span class='hText16black' align='left'>"+LanguageUtil.getString(remarksMap.get(FieldNames.FIELD_HEADING))+"</span></td></tr>");
			htmlCode.append("<tr align='center' id='showText'><td align='left' colspan='3'><table><tr><td  class='text'>"+LanguageUtil.getString(remarksMap.get(FieldNames.FIELD_NAME))+":</td><td ><input class='fTextBox' type=\"").append(fieldType).append("\" name='noteText'").append(" id='showTextArea'").append(" value='"+note+"'</td></tr></table></td></tr>");
			
		}
		else if("textArea".equals(fieldType))
		{   htmlCode.append("<tr id='noteId' class='summaryTbl bText12'><td align='left' class='thead' id='hideShow' colspan='2'><span class='hText16black' align='left'>"+LanguageUtil.getString(remarksMap.get(FieldNames.FIELD_HEADING))+"</span></td></tr>");
			htmlCode.append("<tr align='center' id='showArea'><td align='left' colspan='3'><table><tr><td ><textarea class='fTextBox' rows='"+remarksMap.get(FieldNames.NO_OF_ROWS) +"' cols='"+remarksMap.get(FieldNames.NO_OF_COLS) +"' name='noteTextArea'  id='showTextArea'>"+note+"");			
			htmlCode.append("</textarea> </td></tr></table></td></tr>");
		}
		
		return htmlCode.toString();
	}
	 //ABS_NM082016 start
	 public static Info getNoteMessageDetails(String ModuleId) {
		 StringBuffer query = new StringBuffer();
		 if(ModuleId=="13"){
			 query = new StringBuffer(
			 "SELECT ANMD.DISPLAY_NAME,ANMD.FIELD_HEADING,ANMD.AVAILABLE_ON_PO,ANMD.FIELD_TYPE,ANMD.FIELD_ID,ANMD.MAX_LENGTH,ANMD.NO_OF_ROWS,ANMD.NO_OF_COLS,ANMD.VALIDATION,ANMD.MANDATORY,ANMD.PLACEMENT, POFD.ENABLED FROM AM_NOTE_MESSAGE_DETAILS ANMD LEFT JOIN PURCHASE_ORDER_FOOTER_DETAILS POFD ON POFD.DISCLAIMER_ID= ANMD.DISCLAIMER_ID");
		 }else if (ModuleId=="14"){
			 query = new StringBuffer(
			 "SELECT SNMD.DISPLAY_NAME,SNMD.FIELD_HEADING,SNMD.AVAILABLE_ON_PO,SNMD.FIELD_TYPE,SNMD.FIELD_ID,SNMD.MAX_LENGTH,SNMD.NO_OF_ROWS,SNMD.NO_OF_COLS,SNMD.MANDATORY,SNMD.VALIDATION,SNMD.PLACEMENT, POFD.ENABLED FROM SUPPLIES_NOTE_MESSAGE_DETAILS SNMD LEFT JOIN PURCHASE_ORDER_FOOTER_DETAILS POFD ON POFD.DISCLAIMER_ID= SNMD.DISCLAIMER_ID");
		 }
		 ResultSet rs = QueryUtil.getResult(query.toString(), null);
		 Info info = null;
		 info = new Info();
		 while (rs!=null && rs.next()) {

			 info.set(FieldNames.FIELD_ID, rs.getString("FIELD_ID"));
			 info.set(FieldNames.FIELD_NAME, rs.getString("DISPLAY_NAME"));
			 info.set(FieldNames.AVAILABLE_ON, rs.getString("AVAILABLE_ON_PO"));
			 info.set(FieldNames.DISPLAY_TYPE, rs.getString("FIELD_TYPE"));
			 info.set(FieldNames.MAXIMUM_LENGTH, rs.getString("MAX_LENGTH"));
			 info.set(FieldNames.NO_OF_ROWS, rs.getString("NO_OF_ROWS"));
			 info.set(FieldNames.NO_OF_COLS, rs.getString("NO_OF_COLS"));
			 info.set(FieldNames.VALIDATION, rs.getString("VALIDATION"));
			 info.set(FieldNames.PLACEMENT, rs.getString("PLACEMENT"));
			 info.set(FieldNames.ENABLED, rs.getString("ENABLED"));
			 info.set(FieldNames.FIELD_TYPE, rs.getString("FIELD_TYPE"));
			 info.set(FieldNames.MANDATORY, rs.getString("MANDATORY"));
			 info.set(FieldNames.FIELD_HEADING, rs.getString("FIELD_HEADING"));



		 }
		 return info;

	 }
//ABS_NM082016  end 

	 /**
	  * getMobileDownloadAppUrl  used to get the download link of app zip
	  * @return
	  */
	 public static Map getMobileDownloadAppUrl(){

		 Map dataMap = new HashMap();
		 Map dataInfo = null;
		 try{
			 StringBuilder query = null;
			 query = new StringBuilder("SELECT APP_KEY,APP_DISPLAY_NAME,IOS_URL,ANDROID_URL,IOS_VERSION,ANDROID_VERSION,LAST_UPDATED FROM DOWNLOAD_APPS_SECTION");
			 ResultSet result = QueryUtil.getResult(query.toString(), null);
			 if(result != null){
				 while(result.next()){
					 dataInfo = new HashMap();
					 dataInfo.put(FieldNames.IOS_URL,result.getString("IOS_URL"));
					 dataInfo.put(FieldNames.ANDROID_URL,result.getString("ANDROID_URL"));
					 dataInfo.put(FieldNames.IOS_VERSION,result.getString("IOS_VERSION"));
					 dataInfo.put(FieldNames.ANDROID_VERSION,result.getString("ANDROID_VERSION"));
					 dataInfo.put(FieldNames.APP_DISPLAY_NAME,result.getString("APP_DISPLAY_NAME"));
					 dataInfo.put(FieldNames.LAST_UPDATED_DATE,result.getString("LAST_UPDATED"));
					 dataMap.put(result.getString("APP_KEY"), dataInfo);
				 }
			 }
		 }catch(Exception exception){
			 logger.error("Exception in getMobileDownloadAppUrl[CommonUtil.java]:::", exception);
		 }
		 return dataMap;
	 }
	 
	 public static String getSelectedFields(String tableAnchor)
	 {
		 String selectedFields = FieldNames.EMPTY_STRING;
		 String query = "SELECT GROUP_CONCAT(FIELDS) AS FIELDS FROM CONFIGURE_TABULAR_FIELDS WHERE TABLE_ANCHOR = ? AND IS_ACTIVE = ? ORDER BY ORDER_NO";
		 ResultSet rs = null;
		 try {
			 rs = QueryUtil.getResult(query, new String[]{tableAnchor,"Y"});
			 if(rs!=null && rs.next())
			 {
				 selectedFields = rs.getString("FIELDS");
			 }
		 } catch (Exception e) {
			 logger.error("ERROR: exception in getSelectedFields ::", e);
		 }
		 return selectedFields;
	 }
	 
	 public static ArrayList getTabsTableAnchorList(String module)
	 {
		 ArrayList tabsTableAnchorList = new ArrayList();
		 if(StringUtil.isValidNew(module))
		 {
			 module = StringUtil.toCommaSeparatedWithQuotes(module.split(","));
			 String query = "SELECT TABLE_ANCHOR FROM BUILDER_WEB_FORMS WHERE MODULE IN("+module+")";
			 ResultSet rs = null;
			 try {
				 rs = QueryUtil.getResult(query, new String[]{});
				 if(rs!=null)
				 {
					 while(rs.next())
					 {
						 tabsTableAnchorList.add(rs.getString("TABLE_ANCHOR"));
					 }
				 }
			 } catch (Exception e) {
				 logger.error("ERROR: exception in getSelectedFields ::", e);
			 }
		 }
		 return tabsTableAnchorList;
	 }
	 
	 /**
	  * 711-20160920-245
	  * @param customDbFieldArray
	  * @param customFieldTypeArray
	  * @param customFieldNameArray
	  * @param tableAnchor
	  * @param fields
	  * @param id
	  * @param module
	  * @param syncMapTableAnchor
	  * @param info
	  * @param request
	  * @param result
	  * @param passwordFunctionality
	  */
	     public static void setCustomFieldValue(String[] customDbFieldArray,String[] customFieldTypeArray,String[] customFieldNameArray,String tableAnchor,Field[] fields,String id,String module,String syncMapTableAnchor,Info info,HttpServletRequest request,ResultSet result,String passwordFunctionality)
	     {
	     	if(request== null)
	     	{
	     		request=StrutsUtil.getHttpServletRequest();
	     	}
	     	Map<String, String> syncFieldMap = DataCollector.getAllSyncValuesWithFieldMap(syncMapTableAnchor, module, id);
	     	String tempValue ="";
	     	HashMap piiMap=(HashMap)request.getAttribute("piiMap");
	     	try{
	     		for(int i=0;i<customDbFieldArray.length;i++) {
	     			String fieldValue = result.getString(customDbFieldArray[i]);
	     			if(StringUtil.isValidNew(fieldValue)) {
	     				fieldValue = CommonUtil.transformCustomFieldValue(fieldValue, customFieldTypeArray[i], customFieldNameArray[i], tableAnchor);
	     				for(int j =0; j<fields.length; j++) { 
	     					if ( customFieldNameArray[i].equals(fields[j].getFieldName()) && "Date".equals(fields[j].getDataType())&&fields[j].isPiiEnabled()) {
	     						fieldValue=DateUtil.formatDate(fieldValue,MultiTenancyUtil.getTenantConstants().DISPLAY_FORMAT);
	     					}else if(customFieldNameArray[i].equals(fields[j].getFieldName()) && StringUtil.isValid(fields[j].getSyncWithField()) ) {
	     						tempValue =fieldValue ;
	     						if(syncFieldMap !=null && syncFieldMap.size() >0){    
	     							tempValue = DataCollector.getSyncFieldInFormPage(fields[j], syncFieldMap, fieldValue.equals("0")?"-1":fieldValue);
	     						}
	     						if(StringUtil.isValidNew(fields[j].getTransformMethod())){
	     							Class clsArr[] = new Class[] { String.class };
	     							Object valArr[] = new Object[] { tempValue };
	     							Method method = DataManipulator.getInstance().getClass().getDeclaredMethod(fields[j].getTransformMethod(), clsArr);
	     							fieldValue = (String) method.invoke(null, valArr);
	     							fieldValue = StringUtil.isValid(fieldValue) ? fieldValue : "";
	     						}else if(!fields[j].isBuildField()) { 
	     							String tableName = "";
	     							String fieldNameSync = fields[j].getFieldName();
	     							if(StringUtil.isValidNew(fields[j].getSyncWithField())) {
	     								String[] name = fields[j].getSyncWithField().split("##");
	     								tableName = name[0];
	     								fieldNameSync = name[1];

	     								FieldMappings syncMappings=DBUtil.getInstance().getFieldMappings(tableName);
	     								Field syncField=syncMappings.getField(fieldNameSync);
	     								if(!syncField.isBuildField()){
	     									if("Checkbox".equalsIgnoreCase(fields[j].getDisplayTypeField())) { 
	     										fieldValue = BuilderFormWebImpl.getInstance().getCheckboxOptionsValueForId(fieldNameSync, tableName, tempValue);
	     									} else if("Radio".equalsIgnoreCase(fields[j].getDisplayTypeField())) { 
	     										fieldValue = BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fieldNameSync, tableName, tempValue);
	     									}else if("Combo".equalsIgnoreCase(fields[j].getDisplayTypeField())) { 
	     										fieldValue= BuilderFormWebImpl.getInstance().getRadioOrComboOptionsValueForId(fieldNameSync, tableName, tempValue);
	     									}
	     								}
	     							}
	     						}
	     						else{
	     							fieldValue = tempValue;
	     						}
	     					}else{
	     						fieldValue=StringUtil.isValidWithZero(fieldValue)?fieldValue:"";
	     					}

	     					if("on".equals(passwordFunctionality))
	     					{
	     						if(customFieldNameArray[i].equals(fields[j].getFieldName())&&fields[j].isPiiEnabled()){
	     							if("no".equals((String)request.getAttribute("fromPiiAction"))){
	     								fieldValue= PortalUtils.getPrivateFieldFormat(fieldValue, null) ;
	     							}else if("yes".equals((String)request.getAttribute("fromPiiAction"))&&piiMap!=null&&"no".equals(piiMap.get(customDbFieldArray[i]))){
	     								fieldValue= PortalUtils.getPrivateFieldFormat(fieldValue, null) ;
	     							}
	     						}}
	     					if ( customFieldNameArray[i].equals(fields[j].getFieldName()) && "Email".equals(fields[j].getValidationType())) {
	     						if(!fields[j].isPiiEnabled()){
	     							fieldValue = "<a href=\"mailto: " + fieldValue + "\">" + fieldValue + "</a>";
	     						}
	     					}
	     				}
	     			} else {
	     				fieldValue = FieldNames.EMPTY_STRING;
	     			}

	     			info.set(customDbFieldArray[i],fieldValue);
	     		}

	     	}catch(Exception e)
	     		{
	             logger.error("Exception in setCustomFieldValue:", e);
	     		}
	     }
	     
	     /**
	      * @author Rohit Prajapati
	      * @param source
	      * @purpose This method is used to remove newline characters from columns' value in a file and rewrite this file.
	      * @Ref cacl-20161018-033
	      */
	     public static void removeNewLineFromValueInFile(String source){
	    	 try {
	    		 String tempFile = source+"_"+IDGenerator.getNextKey();//temporary file that will be replaced with original file
	    		 String[] commandArr = {"bash", "-c", "sed -n 'H;g;/^[^\"]*\"[^\"]*\\(\"[^\"]*\"[^\"]*\\)*$/d; s/^\\n//; y/\\n/ /; p; s/.*//; h' " +source+" > "+tempFile+"; mv "+tempFile+" " +source};
	    		 Process runCmd = Runtime.getRuntime().exec(commandArr);
	    		 try {
	    			 runCmd.waitFor();
	    		 } catch (InterruptedException e) {
	    			 // TODO Auto-generated catch block
	    			 logger.error("InterruptedException in CommonUtil > removeNewLineFromValueInFile() >>>> ",e);
	    		 }
	    	 }catch (Exception e) {
	    		 // TODO Auto-generated catch block
	    		 logger.error("Exception while executing command in CommonUtil > removeNewLineFromValueInFile() >>>> ",e);
	    	 }
	     }
	     
	     
	     
}
